import { writeFile, readFile } from "fs/promises";

// This did:webs MUST match the identifier that will be generated by the credential script.
const VLEI_DID_WEBS =
  "did:webs:mock-qvi.local:Eabc123_placeholder_legal_entity_aid";

async function createIdentity() {
  console.log("üöÄ Creating a new TWIN ID...");

  try {
    const domainOrigin = "http://localhost:3000";

    // Call the twin-service API to create a real DID with LinkedDomains service
    const response = await fetch("http://localhost:3001/create-did", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        domainOrigin,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    if (!result.success) {
      throw new Error(result.error || "Failed to create DID");
    }

    const realDid = result.did.id;
    console.log("‚úÖ New TWIN ID created successfully! DID:", realDid);

    const walletData = {
      did: realDid,
      address: result.address,
      controllerIdentity: result.controllerIdentity,
      verificationMethodId: result.verificationMethodId,
      // Note: In production, seed should not be stored locally
      // It's stored securely in Vault by the twin-service
    };

    // Save to file
    await writeFile("./twin-wallet.json", JSON.stringify(walletData, null, 2));
    console.log(
      `üîë Wallet data saved to twin-wallet.json. Do not lose this file.`
    );
  } catch (error) {
    console.error("‚ùå Failed to create TWIN ID:", error.message);
    throw error;
  }
}

async function updateIdentityWithVLEILink() {
  console.log(`üöÄ Updating TWIN ID to link with vLEI: ${VLEI_DID_WEBS}`);
  let walletData;
  try {
    walletData = JSON.parse(await readFile("./twin-wallet.json", "utf-8"));
  } catch (error) {
    console.error(
      `Error: Could not read wallet file. Please run 'createIdentity' first.`
    );
    return;
  }

  if (!walletData.controllerIdentity) {
    throw new Error(
      "Wallet file missing controllerIdentity. Please recreate the DID."
    );
  }

  const domainOrigin = "http://localhost:3000";

  console.log("üåê Publishing LinkedDomains service to DID document...");
  const linkDomainResponse = await fetch("http://localhost:3001/link-domain", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      did: walletData.did,
      controllerIdentity: walletData.controllerIdentity,
      domainOrigin,
    }),
  });

  if (!linkDomainResponse.ok) {
    throw new Error(
      `Failed to link domain: HTTP ${
        linkDomainResponse.status
      } ${await linkDomainResponse.text()}`
    );
  }

  console.log("‚úÖ LinkedDomains service published successfully.");

  // Persist alsoKnownAs locally for reference
  walletData.alsoKnownAs = [
    "did:webs:localhost:3000:Eabc123_placeholder_legal_entity_aid",
    "did:webs:localhost:3000",
  ];
  await writeFile("./twin-wallet.json", JSON.stringify(walletData, null, 2));

  console.log("‚úÖ TWIN ID updated successfully!");
  console.log(`DID: ${walletData.did}`);
  console.log(`Linked with vLEI: ${VLEI_DID_WEBS}`);
}

async function main() {
  // For automation: always create new identity and link with vLEI
  await createIdentity();
  await updateIdentityWithVLEILink();
}

main().catch(console.error);

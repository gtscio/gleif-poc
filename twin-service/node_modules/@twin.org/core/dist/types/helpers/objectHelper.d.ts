/**
 * Class to help with objects.
 */
export declare class ObjectHelper {
    /**
     * Convert an object to bytes.
     * @param obj The object to convert.
     * @param format Format the JSON content.
     * @returns The object as bytes.
     */
    static toBytes<T>(obj: T | undefined, format?: boolean): Uint8Array;
    /**
     * Convert a bytes to an object.
     * @param bytes The bytes to convert to an object.
     * @returns The object.
     * @throws GeneralError if there was an error parsing the JSON.
     */
    static fromBytes<T>(bytes: Uint8Array | undefined | null): T;
    /**
     * Make a deep clone of an object.
     * @param obj The object to clone.
     * @returns The objects clone.
     */
    static clone<T>(obj: T): T;
    /**
     * Deep merge objects.
     * @param obj1 The first object to merge.
     * @param obj2 The second object to merge.
     * @returns The combined deep merge of the objects.
     */
    static merge<T = unknown, U = unknown>(obj1: T, obj2: U): T & U;
    /**
     * Does one object equal another.
     * @param obj1 The first object to compare.
     * @param obj2 The second object to compare.
     * @param strictPropertyOrder Should the properties be in the same order, defaults to true.
     * @returns True is the objects are equal.
     */
    static equal<T>(obj1: T, obj2: T, strictPropertyOrder?: boolean): boolean;
    /**
     * Get the property of an unknown object.
     * @param obj The object to get the property from.
     * @param property The property to get, can be separated by dots for nested path.
     * @returns The property.
     */
    static propertyGet<T = unknown>(obj: unknown, property: string): T | undefined;
    /**
     * Set the property of an unknown object.
     * @param obj The object to set the property from.
     * @param property The property to set.
     * @param value The value to set.
     * @throws GeneralError if the property target is not an object.
     */
    static propertySet(obj: unknown, property: string, value: unknown): void;
    /**
     * Delete the property of an unknown object.
     * @param obj The object to set the property from.
     * @param property The property to set
     */
    static propertyDelete(obj: unknown, property: string): void;
    /**
     * Extract a property from the object, providing alternative names.
     * @param obj The object to extract from.
     * @param propertyNames The possible names for the property.
     * @param removeProperties Remove the properties from the object, defaults to true.
     * @returns The property if available.
     */
    static extractProperty<T>(obj: unknown, propertyNames: string | string[], removeProperties?: boolean): T | undefined;
    /**
     * Pick a subset of properties from an object.
     * @param obj The object to pick the properties from.
     * @param keys The property keys to pick.
     * @returns The partial object.
     */
    static pick<T>(obj: T | undefined, keys?: (keyof T)[]): Partial<T>;
    /**
     * Omit a subset of properties from an object.
     * @param obj The object to omit the properties from.
     * @param keys The property keys to omit.
     * @returns The partial object.
     */
    static omit<T>(obj: T | undefined, keys?: (keyof T)[]): Partial<T>;
    /**
     * Converter the non JSON primitives to extended types.
     * @param obj The object to convert.
     * @returns The object with extended properties.
     */
    static toExtended(obj: any): any;
    /**
     * Converter the extended types to non JSON primitives.
     * @param obj The object to convert.
     * @returns The object with regular properties.
     */
    static fromExtended(obj: any): any;
    /**
     * Remove empty properties from an object.
     * @param obj The object to remove the empty properties from.
     * @param options The options for the removal.
     * @param options.removeUndefined Remove undefined properties, defaults to true.
     * @param options.removeNull Remove null properties, defaults to false.
     * @returns The object with empty properties removed.
     */
    static removeEmptyProperties<T = unknown>(obj: T, options?: {
        removeUndefined?: boolean;
        removeNull?: boolean;
    }): T;
}

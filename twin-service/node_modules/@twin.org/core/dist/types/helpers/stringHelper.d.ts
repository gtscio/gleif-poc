/**
 * Class to help with string.
 */
export declare class StringHelper {
    /**
     * Trim trailing slashes from a string.
     * @param value The value to trim.
     * @returns The trimmed value.
     */
    static trimTrailingSlashes(value: string | undefined): string;
    /**
     * Trim leading slashes from a string.
     * @param value The value to trim.
     * @returns The trimmed value.
     */
    static trimLeadingSlashes(value: string | undefined): string;
    /**
     * Convert the input string to kebab case.
     * @param input The input to convert.
     * @param stripInterfacePrefix Strip interface prefixes.
     * @returns The kebab case version of the input.
     */
    static kebabCase(input: string, stripInterfacePrefix?: boolean): string;
    /**
     * Convert the input string to snake case.
     * @param input The input to convert.
     * @param stripInterfacePrefix Strip interface prefixes.
     * @returns The snake case version of the input.
     */
    static snakeCase(input: string, stripInterfacePrefix?: boolean): string;
    /**
     * Title case all the words.
     * @param input The input to convert.
     * @param stripInterfacePrefix Strip interface prefixes.
     * @returns The title case version of the input.
     */
    static titleCase(input: string, stripInterfacePrefix?: boolean): string;
    /**
     * Pascal case all the words.
     * @param input The input to convert.
     * @param stripInterfacePrefix Strip interface prefixes.
     * @returns The pascal case version of the input.
     */
    static pascalCase(input: string, stripInterfacePrefix?: boolean): string;
    /**
     * Camel case all the words.
     * @param input The input to convert.
     * @param stripInterfacePrefix Strip interface prefixes.
     * @returns The camel case version of the input.
     */
    static camelCase(input: string, stripInterfacePrefix?: boolean): string;
    /**
     * Convert the words to a path.
     * @param input The input to convert.
     * @param stripInterfacePrefix Strip interface prefixes.
     * @returns The path version of the input.
     */
    static wordPath(input: string, stripInterfacePrefix?: boolean): string;
    /**
     * Strip interface prefix if there is one.
     * @param input The input to strip.
     * @returns The input with any interface prefix stripped.
     */
    static stripPrefix(input: string): string;
    /**
     * Split a string into words.
     * @param input The input to split.
     * @returns The string split into words.
     */
    static words(input: string): string[];
    /**
     * Check if a Node.js Buffer or Uint8Array is UTF-8.
     * Url https://tools.ietf.org/html/rfc3629
     * Source https://github.com/hcodes/isutf8
     * UTF8-char = UTF8-1 / UTF8-2 / UTF8-3 / UTF8-4.
     * UTF8-1    = %x00-7F.
     * UTF8-2    = %xC2-DF UTF8-tail.
     * UTF8-3    = %xE0 %xA0-BF UTF8-tail.
     * -           %xE1-EC 2( UTF8-tail ).
     * -           %xED %x80-9F UTF8-tail.
     * -           %xEE-EF 2( UTF8-tail ).
     * UTF8-4    = %xF0 %x90-BF 2( UTF8-tail ).
     * -           %xF1-F3 3( UTF8-tail ).
     * -           %xF4 %x80-8F 2( UTF8-tail ).
     * UTF8-tail = %x80-BF.
     * @param data The data to check.
     * @returns True if the data is utf8.
     */
    static isUtf8(data: Uint8Array): boolean;
}

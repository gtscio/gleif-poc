/**
 * Factory for creating implementation of generic types.
 */
export declare class Factory<T> {
    /**
     * Create a new factory, which is shared throughout all library instances.
     * @param typeName The type name for the instances.
     * @param autoInstance Automatically create an instance when registered.
     * @param matcher Match the name of the instance.
     * @returns The factory instance.
     */
    static createFactory<U>(typeName: string, autoInstance?: boolean, matcher?: (names: string[], name: string) => string | undefined): Factory<U>;
    /**
     * Get all the factories.
     * @returns All the factories.
     */
    static getFactories(): {
        [typeName: string]: Factory<unknown>;
    };
    /**
     * Reset all the factories, which removes any created instances, but not the registrations.
     */
    static resetFactories(): void;
    /**
     * Clear all the factories, which removes anything registered with the factories.
     */
    static clearFactories(): void;
    /**
     * Register a new generator.
     * @param name The name of the generator.
     * @param generator The function to create an instance.
     */
    register<U extends T>(name: string, generator: () => U): void;
    /**
     * Unregister a generator.
     * @param name The name of the generator to unregister.
     * @throws GuardError if the parameters are invalid.
     * @throws GeneralError if no generator exists.
     */
    unregister(name: string): void;
    /**
     * Get a generator instance.
     * @param name The name of the instance to generate.
     * @returns An instance of the item.
     * @throws GuardError if the parameters are invalid.
     * @throws GeneralError if no item exists to get.
     */
    get<U extends T>(name: string): U;
    /**
     * Get a generator instance with no exceptions.
     * @param name The name of the instance to generate.
     * @returns An instance of the item or undefined if it does not exist.
     */
    getIfExists<U extends T>(name: string): U | undefined;
    /**
     * Remove all the instances and leave the generators intact.
     */
    reset(): void;
    /**
     * Remove all the instances and the generators.
     */
    clear(): void;
    /**
     * Get all the instances as a map.
     * @returns The instances as a map.
     */
    instancesMap(): {
        [name: string]: T;
    };
    /**
     * Get all the instances as a list in the order they were registered.
     * @returns The instances as a list in the order they were registered.
     */
    instancesList(): T[];
    /**
     * Get all the generator names in the order they were registered.
     * @returns The ordered generator names.
     */
    names(): string[];
    /**
     * Does the factory contain the name.
     * @param name The name of the instance to find.
     * @returns True if the factory has a matching name.
     */
    hasName(name: string): boolean;
}

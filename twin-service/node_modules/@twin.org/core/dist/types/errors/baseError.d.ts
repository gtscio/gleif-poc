import type { IError } from "../models/IError";
/**
 * Class to handle errors.
 */
export declare class BaseError extends Error implements IError {
    /**
     * The source of the error.
     */
    source?: string;
    /**
     * Any additional information for the error.
     */
    properties?: {
        [id: string]: unknown;
    };
    /**
     * The inner error if there was one.
     */
    inner?: IError;
    /**
     * Create a new instance of BaseError.
     * @param name The name of the error.
     * @param source The source of the error.
     * @param message The message as a code.
     * @param properties Any additional information for the error.
     * @param inner The inner error if we have wrapped another error.
     */
    constructor(name: string, source: string, message: string, properties?: {
        [id: string]: unknown;
    }, inner?: unknown);
    /**
     * Construct an error from an existing one.
     * @param err The existing error.
     * @returns The new instance.
     */
    static fromError(err: unknown): BaseError;
    /**
     * Flatten an error tree.
     * @param err The starting error.
     * @returns The list of all internal errors.
     */
    static flatten(err: unknown): IError[];
    /**
     * Expand an error tree.
     * @param errors The list of errors to expand.
     * @returns The first level error.
     */
    static expand(errors: IError[] | undefined): IError | undefined;
    /**
     * Test to see if the error has the specified error name.
     * @param error The error to test.
     * @param name The name to check for.
     * @returns True if the error has the name.
     */
    static isErrorName(error: unknown, name: string | RegExp): error is BaseError;
    /**
     * Test to see if the error has the specified error message.
     * @param error The error to test.
     * @param message The message to check for.
     * @returns True if the error has the name.
     */
    static isErrorMessage(error: unknown, message: string | RegExp): error is BaseError;
    /**
     * Test to see if the error has the specified error code.
     * @param error The error to test.
     * @param code The code to check for.
     * @returns True if the error has the code.
     */
    static isErrorCode(error: unknown, code: string | RegExp): boolean;
    /**
     * Test to see if any of the errors or children have the given error name.
     * @param error The error to test.
     * @param name The name to check for.
     * @returns True if the error has the name.
     */
    static someErrorName(error: unknown, name: string | RegExp): error is BaseError;
    /**
     * Test to see if any of the errors or children have the given error message.
     * @param error The error to test.
     * @param message The message to check for.
     * @returns True if the error has the name.
     */
    static someErrorMessage(error: unknown, message: string | RegExp): error is BaseError;
    /**
     * Test to see if any of the errors or children are from a specific class.
     * @param error The error to test.
     * @param cls The class to check for.
     * @returns True if the error has the specific class.
     */
    static someErrorClass(error: unknown, cls: string): error is BaseError;
    /**
     * Test to see if any of the errors or children have the given error code.
     * @param error The error to test.
     * @param code The code to check for.
     * @returns True if the error has the name.
     */
    static someErrorCode(error: unknown, code: string | RegExp): error is BaseError;
    /**
     * Serialize the error to the error model.
     * @param includeStackTrace Whether to include the error stack in the model, defaults to false.
     * @returns The error model.
     */
    toJsonObject(includeStackTrace?: boolean): IError;
}

import type { IUrlParts } from "../models/IUrlParts";
import type { IValidationFailure } from "../models/IValidationFailure";
/**
 * Class to help with urls.
 */
export declare class Url {
    /**
     * Create a new instance of Url.
     * @param url The url string.
     */
    constructor(url: string);
    /**
     * Try and parse a string into the url parts.
     * @param url The url to parse.
     * @returns The formatted url or undefined if the value is not a url.
     */
    static tryParseExact(url: unknown): Url | undefined;
    /**
     * Parse a string into the url parts.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The url to parse.
     * @throws GuardError If the value does not match the assertion.
     */
    static guard(source: string, property: string, value: unknown): asserts value is string;
    /**
     * Validate a string as a Url.
     * @param property Throw an exception if the url property is invalid.
     * @param value The url to parse.
     * @param failures The list of failures to add to.
     * @returns The formatted url.
     */
    static validate(property: string, value: unknown, failures: IValidationFailure[]): value is Url;
    /**
     * Construct a url from a URL.
     * @param url The url to construct from.
     * @returns The formatted url.
     */
    static fromURLToParts(url: URL): IUrlParts;
    /**
     * Construct a url from valid parts.
     * @param urlParts The url to create the parts from.
     * @returns The formatted url.
     */
    static fromParts(urlParts: IUrlParts): Url;
    /**
     * Get the parts of the url.
     * @returns The parts of the url.
     */
    parts(): IUrlParts;
    /**
     * Convert the parts in to a full string.
     * @returns The formatted url.
     */
    toString(): string;
}

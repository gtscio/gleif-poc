import type { IValidationFailure } from "../models/IValidationFailure";
/**
 * Class to help with urns.
 */
export declare class Urn {
    /**
     * Create a new instance of Urn.
     * @param namespaceIdentifier The identifier for the namespace.
     * @param namespaceSpecific The specific part of the namespace.
     */
    constructor(namespaceIdentifier: string, namespaceSpecific: string | string[]);
    /**
     * Generate a random identifier with 32 byte id.
     * @param namespace The prefix for the urn.
     * @returns A new Id in URN format.
     */
    static generateRandom(namespace: string): Urn;
    /**
     * Does the provided urn match the namespace.
     * @param urn The urn to check.
     * @param namespace The namespace to match.
     * @returns True if the namespace matches.
     */
    static hasNamespace(urn: string, namespace: string): boolean;
    /**
     * Try and parse a string into the urn parts.
     * @param urn The urn to parse.
     * @returns The formatted urn or undefined if the value is not a urn.
     */
    static tryParseExact(urn: unknown): Urn | undefined;
    /**
     * Construct a urn from a string that has already been validated.
     * @param urn The urn to parse.
     * @returns The formatted urn.
     */
    static fromValidString(urn: string): Urn;
    /**
     * Add a urn: prefix if there isn't one already.
     * @param urn The urn string to add a prefix to.
     * @returns The urn with a prefix.
     */
    static addPrefix(urn: unknown): string | undefined;
    /**
     * Parse a string into the urn parts.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The urn to parse.
     * @throws GuardError If the value does not match the assertion.
     */
    static guard(source: string, property: string, value: unknown): asserts value is string;
    /**
     * Validate a string as a Urn.
     * @param property Throw an exception if the urn property is invalid.
     * @param value The urn to parse.
     * @param failures The list of failures to add to.
     * @returns The formatted urn.
     */
    static validate(property: string, value: unknown, failures: IValidationFailure[]): value is string;
    /**
     * Get the parts.
     * @param startIndex The index to start from, defaults to 0.
     * @returns The parts.
     */
    parts(startIndex?: number): string[];
    /**
     * Get the namespace identifier.
     * @returns The namespace identifier.
     */
    namespaceIdentifier(): string;
    /**
     * Get the namespace method, the first component after the identifier.
     * @returns The namespace method.
     */
    namespaceMethod(): string;
    /**
     * Get the namespace specific parts.
     * @param startIndex The index to start from, defaults to 0.
     * @returns The namespace specific parts.
     */
    namespaceSpecificParts(startIndex?: number): string[];
    /**
     * Get the namespace specific.
     * @param startIndex The index to start from, defaults to 0.
     * @returns The namespace specific.
     */
    namespaceSpecific(startIndex?: number): string;
    /**
     * Convert the parts in to a full string.
     * @param omitPrefix Omit the urn: prefix from the string.
     * @returns The formatted urn.
     */
    toString(omitPrefix?: boolean): string;
}

import { CoerceType } from "../models/coerceType";
/**
 * Coerce an object from one type to another.
 */
export declare class Coerce {
    /**
     * Coerce the value to a string.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static string(value: unknown): string | undefined;
    /**
     * Coerce the value to a number.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static number(value: unknown): number | undefined;
    /**
     * Coerce the value to an integer.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static integer(value: unknown): number | undefined;
    /**
     * Coerce the value to a bigint.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static bigint(value: unknown): bigint | undefined;
    /**
     * Coerce the value to a boolean.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static boolean(value: unknown): boolean | undefined;
    /**
     * Coerce the value to a date.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static date(value: unknown): Date | undefined;
    /**
     * Coerce the value to a date/time.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static dateTime(value: unknown): Date | undefined;
    /**
     * Coerce the value to a time.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static time(value: unknown): Date | undefined;
    /**
     * Coerce the value to an object.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static object<T = unknown>(value: unknown): T | undefined;
    /**
     * Coerce the value to a Uint8Array.
     * @param value The value to coerce.
     * @throws TypeError If the value can not be coerced.
     * @returns The value if it can be coerced.
     */
    static uint8Array(value: unknown): Uint8Array | undefined;
    /**
     * Coerces a value based on the coercion type.
     * @param value The value to coerce.
     * @param type The coercion type to perform.
     * @returns The coerced value.
     */
    static byType(value: unknown, type?: CoerceType): unknown;
}

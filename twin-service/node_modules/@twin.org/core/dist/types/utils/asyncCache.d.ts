/**
 * Cache the results from asynchronous requests.
 */
export declare class AsyncCache {
    /**
     * Execute an async request and cache the result.
     * @param key The key for the entry in the cache.
     * @param ttlMs The TTL of the entry in the cache.
     * @param requestMethod The method to call if not cached.
     * @param cacheFailures Cache failure results, defaults to false.
     * @returns The response.
     */
    static exec<T = unknown>(key: string, ttlMs: number | undefined, requestMethod: () => Promise<T>, cacheFailures?: boolean): Promise<T> | undefined;
    /**
     * Get an entry from the cache.
     * @param key The key to get from the cache.
     * @returns The item from the cache if it exists.
     */
    static get<T = unknown>(key: string): Promise<T | undefined>;
    /**
     * Set an entry into the cache.
     * @param key The key to set in the cache.
     * @param value The value to set in the cache.
     * @param ttlMs The TTL of the entry in the cache in ms, defaults to 1s.
     * @returns Nothing.
     */
    static set<T = unknown>(key: string, value: T, ttlMs?: number): Promise<void>;
    /**
     * Remove an entry from the cache.
     * @param key The key to remove from the cache.
     */
    static remove(key: string): void;
    /**
     * Clear the cache.
     * @param prefix Optional prefix to clear only entries with that prefix.
     */
    static clearCache(prefix?: string): void;
    /**
     * Perform a cleanup of the expired entries in the cache.
     */
    static cleanupExpired(): void;
}

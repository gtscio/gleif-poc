import type { ObjectOrArray } from "../models/objectOrArray";
/**
 * Class to handle guard operations for parameters.
 */
export declare class Guards {
    /**
     * Is the property defined.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static defined(source: string, property: string, value: unknown): asserts value;
    /**
     * Is the property a string.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static string(source: string, property: string, value: unknown): asserts value is string;
    /**
     * Is the property a string with a value.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static stringValue(source: string, property: string, value: unknown): asserts value is string;
    /**
     * Is the property a JSON value.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static json(source: string, property: string, value: unknown): asserts value is string;
    /**
     * Is the property a base64 string.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static stringBase64(source: string, property: string, value: unknown): asserts value is string;
    /**
     * Is the property a base64 url string.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static stringBase64Url(source: string, property: string, value: unknown): asserts value is string;
    /**
     * Is the property a base58 string.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static stringBase58(source: string, property: string, value: unknown): asserts value is string;
    /**
     * Is the property a string with a hex value.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @param allowPrefix Allow the hex to have the 0x prefix.
     * @throws GuardError If the value does not match the assertion.
     */
    static stringHex(source: string, property: string, value: unknown, allowPrefix?: boolean): asserts value is string;
    /**
     * Is the property a string with a hex value with fixed length.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @param length The length of the string to match.
     * @param allowPrefix Allow the hex to have the 0x prefix.
     * @throws GuardError If the value does not match the assertion.
     */
    static stringHexLength(source: string, property: string, value: unknown, length: number, allowPrefix?: boolean): asserts value is string;
    /**
     * Is the property a number.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static number(source: string, property: string, value: unknown): asserts value is number;
    /**
     * Is the property an integer.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static integer(source: string, property: string, value: unknown): asserts value is number;
    /**
     * Is the property a bigint.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static bigint(source: string, property: string, value: unknown): asserts value is bigint;
    /**
     * Is the property a boolean.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static boolean(source: string, property: string, value: unknown): asserts value is boolean;
    /**
     * Is the property a date.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static date(source: string, property: string, value: unknown): asserts value is Date;
    /**
     * Is the property a timestamp in milliseconds.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static timestampMilliseconds(source: string, property: string, value: unknown): asserts value is number;
    /**
     * Is the property a timestamp in seconds.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static timestampSeconds(source: string, property: string, value: unknown): asserts value is number;
    /**
     * Is the property an object.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static object<T = {
        [id: string]: unknown;
    }>(source: string, property: string, value: unknown): asserts value is T;
    /**
     * Is the property is an object with at least one property.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static objectValue<T = {
        [id: string]: unknown;
    }>(source: string, property: string, value: unknown): asserts value is T;
    /**
     * Is the property is an array.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static array<T>(source: string, property: string, value: unknown): asserts value is T[];
    /**
     * Is the property is an array with at least one item.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static arrayValue<T>(source: string, property: string, value: unknown): asserts value is T[];
    /**
     * Is the property one of a list of items.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @param options The options the value must be one of.
     * @throws GuardError If the value does not match the assertion.
     */
    static arrayOneOf<T>(source: string, property: string, value: T, options: T[]): asserts value is T;
    /**
     * Does the array start with the specified data.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @param startValues The values that must start the array.
     * @throws GuardError If the value does not match the assertion.
     */
    static arrayStartsWith<T>(source: string, property: string, value: unknown, startValues: ObjectOrArray<T>): asserts value is T[];
    /**
     * Does the array end with the specified data.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @param endValues The values that must end the array.
     * @throws GuardError If the value does not match the assertion.
     */
    static arrayEndsWith<T>(source: string, property: string, value: unknown, endValues: ObjectOrArray<T>): asserts value is T[];
    /**
     * Is the property a Uint8Array.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static uint8Array(source: string, property: string, value: unknown): asserts value is Uint8Array;
    /**
     * Is the property a function.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @returns True if the value is a function.
     * @throws GuardError If the value does not match the assertion.
     */
    static function(source: string, property: string, value: unknown): boolean;
    /**
     * Is the property a string formatted as an email address.
     * @param source The source of the error.
     * @param property The name of the property.
     * @param value The value to test.
     * @throws GuardError If the value does not match the assertion.
     */
    static email(source: string, property: string, value: unknown): asserts value is string;
}

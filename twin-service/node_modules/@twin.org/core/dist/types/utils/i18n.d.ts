import type { ILocaleDictionary } from "../models/ILocaleDictionary";
/**
 * Class to perform internationalization.
 */
export declare class I18n {
    /**
     * The default translation.
     */
    static DEFAULT_LOCALE: string;
    /**
     * Set the locale.
     * @param locale The new locale.
     */
    static setLocale(locale: string): void;
    /**
     * Get the locale.
     * @returns The current locale.
     */
    static getLocale(): string;
    /**
     * Add a locale dictionary.
     * @param locale The locale.
     * @param dictionary The dictionary to add.
     */
    static addDictionary(locale: string, dictionary: ILocaleDictionary): void;
    /**
     * Get a locale dictionary.
     * @param locale The locale.
     * @returns The dictionary of undefined if it does not exist.
     */
    static getDictionary(locale: string): {
        [key: string]: string;
    } | undefined;
    /**
     * Get all the locale dictionaries.
     * @returns The dictionaries.
     */
    static getAllDictionaries(): {
        [locale: string]: {
            [key: string]: string;
        };
    };
    /**
     * Add a locale changed handler.
     * @param id The id of the handler.
     * @param handler The handler to add.
     */
    static addLocaleHandler(id: string, handler: (locale: string) => void): void;
    /**
     * Remove a locale changed handler.
     * @param id The id of the handler.
     */
    static removeLocaleHandler(id: string): void;
    /**
     * Add a dictionary changed handler.
     * @param id The id of the handler.
     * @param handler The handler to add.
     */
    static addDictionaryHandler(id: string, handler: (locale: string) => void): void;
    /**
     * Remove a dictionary changed handler.
     * @param id The id of the handler.
     */
    static removeDictionaryHandler(id: string): void;
    /**
     * Format a message.
     * @param key The key of the message to format.
     * @param values The values to substitute into the message.
     * @param overrideLocale Override the locale.
     * @returns The formatted string.
     */
    static formatMessage(key: string, values?: {
        [key: string]: unknown;
    }, overrideLocale?: string): string;
    /**
     * Check if the dictionaries have a message for the given key.
     * @param key The key to check for existence.
     * @returns True if the key exists.
     */
    static hasMessage(key: string): boolean;
}

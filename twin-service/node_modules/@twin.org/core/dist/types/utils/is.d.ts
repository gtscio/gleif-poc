/**
 * Class to check types of objects.
 */
export declare class Is {
    /**
     * Is the property undefined.
     * @param value The value to test.
     * @returns True if the value is a empty.
     */
    static undefined(value: unknown): value is undefined;
    /**
     * Is the property null.
     * @param value The value to test.
     * @returns True if the value is a empty.
     */
    static null(value: unknown): value is null;
    /**
     * Is the property null or undefined.
     * @param value The value to test.
     * @returns True if the value is a empty.
     */
    static empty(value: unknown): value is undefined | null;
    /**
     * Is the property is not null or undefined.
     * @param value The value to test.
     * @returns True if the value is a not empty.
     */
    static notEmpty(value: unknown): boolean;
    /**
     * Is the value a string.
     * @param value The value to test.
     * @returns True if the value is a string.
     */
    static string(value: unknown): value is string;
    /**
     * Is the value a string.
     * @param value The value to test.
     * @returns True if the value is a string.
     */
    static stringValue(value: unknown): value is string;
    /**
     * Is the value a JSON string.
     * @param value The value to test.
     * @returns True if the value is a JSON string.
     */
    static json(value: unknown): value is string;
    /**
     * Is the value a base64 string.
     * @param value The value to test.
     * @returns True if the value is a base64 string.
     */
    static stringBase64(value: unknown): value is string;
    /**
     * Is the value a base64 url string.
     * @param value The value to test.
     * @returns True if the value is a base64 string.
     */
    static stringBase64Url(value: unknown): value is string;
    /**
     * Is the value a base58 string.
     * @param value The value to test.
     * @returns True if the value is a base58 string.
     */
    static stringBase58(value: unknown): value is string;
    /**
     * Is the value a hex string.
     * @param value The value to test.
     * @param allowPrefix Allow the hex to have the 0x prefix.
     * @returns True if the value is a hex string.
     */
    static stringHex(value: unknown, allowPrefix?: boolean): value is string;
    /**
     * Is the value a hex string of fixed length.
     * @param value The value to test.
     * @param length The length to test.
     * @param allowPrefix Allow the hex to have the 0x prefix.
     * @returns True if the value is a hex string of required length.
     */
    static stringHexLength(value: unknown, length: number, allowPrefix?: boolean): value is string;
    /**
     * Is the value a number.
     * @param value The value to test.
     * @returns True if the value is a number.
     */
    static number(value: unknown): value is number;
    /**
     * Is the value an integer.
     * @param value The value to test.
     * @returns True if the value is an integer.
     */
    static integer(value: unknown): value is number;
    /**
     * Is the value a big integer.
     * @param value The value to test.
     * @returns True if the value is a big integer.
     */
    static bigint(value: unknown): value is bigint;
    /**
     * Is the value a boolean.
     * @param value The value to test.
     * @returns True if the value is a boolean.
     */
    static boolean(value: unknown): value is boolean;
    /**
     * Is the value a date.
     * @param value The value to test.
     * @returns True if the value is a date.
     */
    static date(value: unknown): value is Date;
    /**
     * Is the value an empty date.
     * @param value The value to test.
     * @returns True if the value is an empty date.
     */
    static dateEmpty(value: unknown): boolean;
    /**
     * Is the value a date string.
     * @param value The value to test.
     * @returns True if the value is a string in ISO 8601 date format.
     */
    static dateString(value: unknown): boolean;
    /**
     * Is the value a date string.
     * @param value The value to test.
     * @returns True if the value is a string in ISO 8601 date/time format.
     */
    static dateTimeString(value: unknown): boolean;
    /**
     * Is the value a time string.
     * @param value The value to test.
     * @returns True if the value is a string in ISO 8601 time format.
     */
    static timeString(value: unknown): boolean;
    /**
     * Is the value a timestamp in seconds.
     * @param value The value to test.
     * @returns True if the value is a date.
     */
    static timestampSeconds(value: unknown): value is number;
    /**
     * Is the value a timestamp in milliseconds.
     * @param value The value to test.
     * @returns True if the value is a date.
     */
    static timestampMilliseconds(value: unknown): value is number;
    /**
     * Is the value an object.
     * @param value The value to test.
     * @returns True if the value is a object.
     */
    static object<T = {
        [id: string]: unknown;
    }>(value: unknown): value is T;
    /**
     * Is the value an object with at least one property.
     * @param value The value to test.
     * @returns True if the value is a object.
     */
    static objectValue<T = {
        [id: string]: unknown;
    }>(value: unknown): value is T;
    /**
     * Is the value an array.
     * @param value The value to test.
     * @returns True if the value is an array.
     */
    static array<T>(value: unknown): value is T[];
    /**
     * Is the value an array with at least one element.
     * @param value The value to test.
     * @returns True if the value is an array with at least one element.
     */
    static arrayValue<T>(value: unknown): value is T[];
    /**
     * Is the value an array with at least one element.
     * @param value The value to test.
     * @param options The options the value must be one of.
     * @returns True if the value is an element from the options array.
     */
    static arrayOneOf<T>(value: T, options: T[]): value is T;
    /**
     * Is the value a Uint8Array.
     * @param value The value to test.
     * @returns True if the value is a Uint8Array.
     */
    static uint8Array(value: unknown): value is Uint8Array;
    /**
     * Is the value a TypedArray.
     * @param value The value to test.
     * @returns True if the value is a TypedArray.
     */
    static typedArray(value: unknown): value is Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array;
    /**
     * Is the property a function.
     * @param value The value to test.
     * @returns True if the value is a function.
     */
    static function(value: unknown): value is (...args: unknown[]) => unknown;
    /**
     * Is the value a string formatted as an email address.
     * @param value The value to test.
     * @returns True if the value is a string.
     */
    static email(value: unknown): value is string;
    /**
     * Is the value a promise.
     * @param value The value to test.
     * @returns True if the value is a promise.
     */
    static promise<T = unknown>(value: unknown): value is Promise<T>;
    /**
     * Is the value a regexp.
     * @param value The value to test.
     * @returns True if the value is a regexp.
     */
    static regexp(value: unknown): value is RegExp;
}

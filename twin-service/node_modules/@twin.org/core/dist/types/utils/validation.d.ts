import type { IValidationFailure } from "../models/IValidationFailure";
/**
 * Class to handle validation operations.
 */
export declare class Validation {
    /**
     * Is the property null or undefined.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a empty.
     */
    static empty(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is undefined | null;
    /**
     * Is the property is not null or undefined.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a not empty.
     */
    static notEmpty(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): boolean;
    /**
     * Is the property a string.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @param options Additional options for the validation.
     * @param options.minLength The minimum length of the string.
     * @param options.maxLength The maximum length of the string.
     * @param options.format Specific format to check.
     * @returns True if the value is a valid string.
     */
    static string(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string, options?: {
        format?: "base64" | "base58" | "hex" | RegExp;
        minLength?: number;
        maxLength?: number;
    }): value is string;
    /**
     * Is the property a string with a value.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @param options Additional options for the validation.
     * @param options.minLength The minimum length of the string.
     * @param options.maxLength The maximum length of the string.
     * @returns True if the value is a valid string.
     */
    static stringValue(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string, options?: {
        minLength?: number;
        maxLength?: number;
    }): value is string;
    /**
     * Is the property a number.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @param options Additional options for the validation.
     * @param options.minValue The minimum value of the number.
     * @param options.maxValue The maximum value of the number.
     * @returns True if the value is a valid number.
     */
    static number(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string, options?: {
        minValue?: number;
        maxValue?: number;
    }): value is number;
    /**
     * Is the property an integer.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @param options Additional options for the validation.
     * @param options.minValue The minimum value of the integer.
     * @param options.maxValue The maximum value of the integer.
     * @returns True if the value is a valid integer.
     */
    static integer(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string, options?: {
        minValue?: number;
        maxValue?: number;
    }): value is number;
    /**
     * Is the property a bigint.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @param options Additional options for the validation.
     * @param options.minValue The minimum value of the bigint.
     * @param options.maxValue The maximum value of the bigint.
     * @returns True if the value is a valid bigint.
     */
    static bigint(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string, options?: {
        minValue?: bigint;
        maxValue?: bigint;
    }): value is bigint;
    /**
     * Is the property a boolean.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a boolean.
     */
    static boolean(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is boolean;
    /**
     * Is the property a date.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a date.
     */
    static date(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is Date;
    /**
     * Is the property a date in ISO 8601 format.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a date.
     */
    static dateString(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is string;
    /**
     * Is the property a date/time in ISO 8601 format.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a date/time.
     */
    static dateTimeString(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is string;
    /**
     * Is the property a time in ISO 8601 format.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a time.
     */
    static timeString(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is string;
    /**
     * Is the property a timestamp in milliseconds.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a timestamp in milliseconds.
     */
    static timestampMilliseconds(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is number;
    /**
     * Is the property a timestamp in seconds.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a timestamp in seconds.
     */
    static timestampSeconds(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is number;
    /**
     * Is the property an object.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a object.
     */
    static object<T = {
        [id: string]: unknown;
    }>(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is T;
    /**
     * Is the property an array.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is an array.
     */
    static array<T>(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is T[];
    /**
     * Is the property an array with at least one item.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is an array with at least one element.
     */
    static arrayValue<T>(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is T[];
    /**
     * Is the property one of a list of items.
     * @param property The name of the property.
     * @param value The value to test.
     * @param options The options the value must be one of.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is one of the items in the options.
     */
    static arrayOneOf<T>(property: string, value: T, options: T[], failures: IValidationFailure[], fieldNameResource?: string): value is T;
    /**
     * Is the property a Uint8Array.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a Uint8Array.
     */
    static uint8Array(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is Uint8Array;
    /**
     * Is the property valid JSON.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is valid JSON.
     */
    static json(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is string;
    /**
     * Is the property a string in e-mail format.
     * @param property The name of the property.
     * @param value The value to test.
     * @param failures The list of failures to add to.
     * @param fieldNameResource Optional i18n resource of the field name to display in the message.
     * @returns True if the value is a valid looking e-mail.
     */
    static email(property: string, value: unknown, failures: IValidationFailure[], fieldNameResource?: string): value is string;
    /**
     * Throw the validation failures as a ValidationError.
     * @param source The source of the error.
     * @param objectName The object that was being validated.
     * @param failures The validation failures.
     * @throws ValidationError From the converted failures.
     */
    static asValidationError(source: string, objectName: string, failures: IValidationFailure[]): void;
    /**
     * Map a list of failures to their properties in a map.
     * @param failures The validation failures to combine into the map for the properties.
     * @param propertyMap The map to add the failures to.
     * @param clearMap Should the map be cleared before adding the failures.
     */
    static toPropertyMap(failures: IValidationFailure[], propertyMap: {
        [property: string]: IValidationFailure[];
    }, clearMap?: boolean): void;
}

import { type IWalletConnector } from "@twin.org/wallet-models";
import type { IIotaWalletConnectorConstructorOptions } from "./models/IIotaWalletConnectorConstructorOptions";
/**
 * Class for performing wallet operations on IOTA.
 */
export declare class IotaWalletConnector implements IWalletConnector {
    /**
     * The namespace supported by the wallet connector.
     */
    static readonly NAMESPACE: string;
    /**
     * Runtime name for the class.
     */
    readonly CLASS_NAME: string;
    /**
     * Create a new instance of IOTA Wallet Connector.
     * @param options The options for the wallet connector.
     */
    constructor(options: IIotaWalletConnectorConstructorOptions);
    /**
     * Create a new wallet.
     * @param identity The identity of the user to access the vault keys.
     * @returns Nothing.
     */
    create(identity: string): Promise<void>;
    /**
     * Get the addresses for the identity.
     * @param identity The identity to get the addresses for.
     * @param accountIndex The account index to get the addresses for.
     * @param startAddressIndex The start index for the addresses.
     * @param count The number of addresses to generate.
     * @param isInternal Whether the addresses are internal.
     * @returns The addresses.
     */
    getAddresses(identity: string, accountIndex: number, startAddressIndex: number, count: number, isInternal?: boolean): Promise<string[]>;
    /**
     * Get the balance for the given address.
     * @param identity The identity of the user to access the vault keys.
     * @param address The address to get the balance for.
     * @returns The balance.
     */
    getBalance(identity: string, address: string): Promise<bigint>;
    /**
     * Ensure the balance for the given address is at least the given amount.
     * @param identity The identity of the user to access the vault keys.
     * @param address The address to ensure the balance for.
     * @param ensureBalance The minimum balance to ensure.
     * @param timeoutInSeconds Optional timeout in seconds, defaults to 10 seconds.
     * @returns True if the balance is at least the given amount, false otherwise.
     */
    ensureBalance(identity: string, address: string, ensureBalance: bigint, timeoutInSeconds?: number): Promise<boolean>;
    /**
     * Transfer an amount from one address to another.
     * @param identity The identity of the user to access the vault keys.
     * @param addressSource The source address to transfer from.
     * @param addressDest The destination address to transfer to.
     * @param amount The amount to transfer.
     * @returns The transaction digest.
     */
    transfer(identity: string, addressSource: string, addressDest: string, amount: bigint): Promise<string | undefined>;
}

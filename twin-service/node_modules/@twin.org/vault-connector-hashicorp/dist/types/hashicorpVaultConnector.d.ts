import { type IVaultConnector, VaultEncryptionType, VaultKeyType } from "@twin.org/vault-models";
import type { IHashicorpVaultConnectorConstructorOptions } from "./models/IHashicorpVaultConnectorConstructorOptions";
/**
 * Class for performing vault operations in entity storage.
 */
export declare class HashicorpVaultConnector implements IVaultConnector {
    /**
     * The namespace supported by the vault connector.
     */
    static readonly NAMESPACE: string;
    /**
     * Runtime name for the class.
     */
    readonly CLASS_NAME: string;
    /**
     * Create a new instance of HashicorpVaultConnector.
     * @param options The options for the vault connector.
     */
    constructor(options: IHashicorpVaultConnectorConstructorOptions);
    /**
     * Bootstrap the vault connector and ensure connectivity.
     * @param nodeLoggingConnectorType The node logging connector type, defaults to "node-logging".
     * @returns True if the bootstrapping process was successful.
     */
    bootstrap(nodeLoggingConnectorType?: string): Promise<boolean>;
    /**
     * Store a secret in the vault.
     * @param name The name of the item in the vault to set.
     * @param data The item to add to the vault.
     * @returns Nothing.
     */
    setSecret<T>(name: string, data: T): Promise<void>;
    /**
     * Get a secret from the vault.
     * @param name The name of the item in the vault to get.
     * @returns The item from the vault.
     * @throws Error if the item is not found.
     */
    getSecret<T>(name: string): Promise<T>;
    /**
     * Remove a secret from the vault.
     * @param name The name of the item in the vault to remove.
     * @returns Nothing.
     * @throws Error if the item is not found.
     */
    removeSecret(name: string): Promise<void>;
    /**
     * Generate a new key and store it in the vault.
     * @param name The name of the key to generate and store in the vault.
     * @param type The type of key to create.
     * @returns The public key for the key pair.
     */
    createKey(name: string, type: VaultKeyType): Promise<Uint8Array>;
    /**
     * Add an existing key to the vault.
     * @param name The name of the key to add to the vault.
     * @param type The type of key to add.
     * @param privateKey The private key.
     * @param publicKey The public key, can be undefined if the key type is symmetric.
     * @returns Nothing.
     */
    addKey(name: string, type: VaultKeyType, privateKey: Uint8Array, publicKey?: Uint8Array): Promise<void>;
    /**
     * Get a key from the vault.
     * @param name The name of the key to get.
     * @returns The key, publicKey can be undefined if key is symmetric.
     */
    getKey(name: string): Promise<{
        /**
         * The type of the key e.g. Ed25519.
         */
        type: VaultKeyType;
        /**
         * The private key.
         */
        privateKey: Uint8Array;
        /**
         * The public key, which can be undefined if key type is symmetric.
         */
        publicKey?: Uint8Array;
    }>;
    /**
     * Rename a key in the vault.
     * @param name The name of the key to rename.
     * @param newName The new name of the key.
     * @returns Nothing.
     */
    renameKey(name: string, newName: string): Promise<void>;
    /**
     * Remove a key from the vault.
     * @param name The name of the key to remove.
     * @returns Nothing.
     */
    removeKey(name: string): Promise<void>;
    /**
     * Sign data.
     * @param name The name of the key to use.
     * @param data The data to sign.
     * @returns The signature.
     */
    sign(name: string, data: Uint8Array): Promise<Uint8Array>;
    /**
     * Verify a signature.
     * @param name The name of the key to use.
     * @param data The data to verify.
     * @param signature The signature to verify.
     * @returns True if the signature is valid.
     */
    verify(name: string, data: Uint8Array, signature: Uint8Array): Promise<boolean>;
    /**
     * Encrypt data.
     * @param name The name of the key to use.
     * @param encryptionType The type of encryption to use.
     * @param data The data to encrypt.
     * @returns The encrypted data.
     */
    encrypt(name: string, encryptionType: VaultEncryptionType, data: Uint8Array): Promise<Uint8Array>;
    /**
     * Decrypt data.
     * @param name The name of the key to use.
     * @param encryptionType The type of encryption to use.
     * @param encryptedData The encrypted data to decrypt.
     * @returns The decrypted data.
     */
    decrypt(name: string, encryptionType: VaultEncryptionType, encryptedData: Uint8Array): Promise<Uint8Array>;
    /**
     * Get the versions of a secret.
     * @param name The name of the secret.
     * @returns The versions of the secret.
     * @throws Error if the secret is not found.
     */
    getSecretVersions(name: string): Promise<number[]>;
    /**
     * Update the configuration of a key.
     * @param name The name of the key to update.
     * @param deletionAllowed Whether the key can be deleted.
     * @param exportable Whether the key can be exported.
     * @returns Nothing.
     */
    updateKeyConfig(name: string, deletionAllowed?: boolean, exportable?: boolean): Promise<void>;
    /**
     * Backup a key from the vault.
     * @param name The name of the key to backup.
     * @returns The private key as a Uint8Array.
     * @throws Error if the key cannot be exported or found.
     */
    backupKey(name: string): Promise<string>;
    /**
     * Restore a key to the vault.
     * @param name The name of the key to restore.
     * @param backup The backup of the key.
     * @returns Nothing.
     * @throws Error if the key cannot be restored.
     */
    restoreKey(name: string, backup: string): Promise<void>;
    /**
     * Export the key from the vault.
     * @param name The name of the key.
     * @param keyPath The path of the key. Defaults to "signing-key".
     * @param version The version of the key. If omitted, all versions of the key will be returned.
     * @returns The key details.
     * @throws Error if the key cannot be exported or found.
     */
    exportKey(name: string, keyPath: "signing-key" | "encryption-key" | "public-key", version?: string): Promise<{
        /**
         * The type of the key e.g. Ed25519.
         */
        type: VaultKeyType;
        /**
         * The key.
         */
        key: Uint8Array;
        /**
         * The name of the key.
         */
        name: string;
    }>;
    /**
     * Get the key configuration.
     * @param name The name of the key to get the configuration for.
     * @returns True if the key can be deleted.
     */
    getKeyDeleteConfiguration(name: string): Promise<boolean>;
    /**
     * Check if the key type is asymmetric.
     * @param type The key type.
     * @returns True if the key type is asymmetric.
     */
    private isAsymmetricKeyType;
}

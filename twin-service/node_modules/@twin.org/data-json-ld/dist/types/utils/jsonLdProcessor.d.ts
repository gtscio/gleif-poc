import type { RemoteDocument, Url } from "jsonld/jsonld-spec";
import type { IJsonLdContextDefinitionElement } from "../models/IJsonLdContextDefinitionElement";
import type { IJsonLdContextDefinitionRoot } from "../models/IJsonLdContextDefinitionRoot";
import type { IJsonLdNodeObject } from "../models/IJsonLdNodeObject";
/**
 * JSON-LD Processor.
 */
export declare class JsonLdProcessor {
    /**
     * The document loader to use.
     * @param documentLoader The document loader to use.
     */
    static setDocumentLoader(documentLoader: (url: Url) => Promise<RemoteDocument>): void;
    /**
     * The document loader to use for retrieving JSON-LD documents.
     * @returns The document loader.
     */
    static getDocumentLoader(): (url: Url) => Promise<RemoteDocument>;
    /**
     * Set the cache time limit for documents.
     * @param cacheLimitMs The cache limit in milliseconds.
     */
    static setCacheLimit(cacheLimitMs: number): void;
    /**
     * Get the cache limit for documents.
     * @returns The document loader.
     */
    static getCacheLimit(): number;
    /**
     * Set the global redirects for JSON-LD, use addRedirect for default handling.
     * @param redirects The redirects to use.
     */
    static setRedirects(redirects: {
        from: RegExp;
        to: string;
    }[]): void;
    /**
     * Get the global redirects for JSON-LD.
     * @returns The registered redirects.
     */
    static getRedirects(): {
        from: RegExp;
        to: string;
    }[];
    /**
     * Compact a document according to a particular context.
     * @param document The JSON-LD document to compact.
     * @param context The context to compact the document to, if not provided will use the one in the document.
     * @param options The options for compacting the document.
     * @param options.itemListOverride Whether to override the itemListElement context with a set, defaults to true.
     * @returns The compacted JSON-LD document.
     */
    static compact<T>(document: T, context?: IJsonLdContextDefinitionRoot, options?: {
        itemListOverride: boolean;
    }): Promise<T>;
    /**
     * Expand a document, removing its context.
     * @param compacted The compacted JSON-LD document to expand.
     * @returns The expanded JSON-LD document.
     */
    static expand<T>(compacted: T): Promise<IJsonLdNodeObject[]>;
    /**
     * Canonize a document.
     * @param document The document to canonize.
     * @param options The options for canonization.
     * @param options.algorithm The algorithm to use for canonization, defaults to URDNA2015.
     * @returns The canonized document.
     */
    static canonize<T extends IJsonLdNodeObject>(document: T, options?: {
        algorithm?: "URDNA2015" | "URGNA2012" | undefined;
    }): Promise<string>;
    /**
     * Add a redirect to use during document resolution.
     * @param from The URL to redirect from.
     * @param to The URL to redirect to.
     */
    static addRedirect(from: RegExp, to: string): void;
    /**
     * Combine contexts.
     * @param context1 The first JSON-LD context to combine.
     * @param context2 The second JSON-LD context to combine.
     * @returns The combined context.
     */
    static combineContexts(context1: IJsonLdContextDefinitionRoot | undefined, context2: IJsonLdContextDefinitionRoot | undefined): IJsonLdContextDefinitionRoot | undefined;
    /**
     * Gather all the contexts from the element and it's children.
     * @param element The element to gather the contexts from.
     * @param initial The initial context.
     * @returns The combined contexts.
     */
    static gatherContexts<T>(element: T, initial?: IJsonLdContextDefinitionRoot): IJsonLdContextDefinitionRoot | undefined;
    /**
     * Remove all the contexts that match the pattern.
     * @param context The context to remove the entries from.
     * @param match The element to try and match.
     * @returns The updated contexts.
     */
    static removeContexts(context: IJsonLdContextDefinitionRoot | undefined, match?: IJsonLdContextDefinitionElement[]): IJsonLdContextDefinitionRoot | undefined;
    /**
     * Add a context directly to the document loader cache.
     * @param url The url the ld context is for.
     * @param ldContext The context to add.
     * @returns Nothing.
     */
    static documentCacheAdd(url: string, ldContext: unknown): Promise<void>;
    /**
     * Remove a context from the document loader cache.
     * @param url The url the ld context is for.
     * @returns Nothing.
     */
    static documentCacheRemove(url: string): Promise<void>;
}

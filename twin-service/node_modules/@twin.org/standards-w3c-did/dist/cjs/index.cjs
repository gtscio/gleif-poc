'use strict';

var core = require('@twin.org/core');
var crypto = require('@twin.org/crypto');
var dataJsonLd = require('@twin.org/data-json-ld');
var web = require('@twin.org/web');

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * The contexts for DIDs.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
const DidContexts = {
    /**
     * The context root for DID.
     */
    Context: "https://www.w3.org/ns/did/v1",
    /**
     * The context root for DID VC v1.
     */
    ContextVCv1: "https://www.w3.org/2018/credentials/v1",
    /**
     * The context root for DID VC v2.
     */
    ContextVCv2: "https://www.w3.org/ns/credentials/v2",
    /**
     * The context root for security ed25519 suites.
     */
    ContextSecurityEd25519: "https://w3id.org/security/suites/ed25519-2020/v1",
    /**
     * The context root for security jws-2020 suites.
     */
    ContextSecurityJws2020: "https://w3id.org/security/suites/jws-2020/v1",
    /**
     * The context root for VC Data Integrity.
     */
    ContextDataIntegrity: "https://www.w3.org/ns/credentials/v2",
    /**
     * The context root for VC Data Integrity.
     */
    ContextControllerIdentifiers: "https://www.w3.org/ns/cid/v1",
    /**
     * The context root for security multikey suites.
     */
    ContextSecurityMultikey: "https://w3id.org/security/multikey/v1"
};

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * The types for DID Proof crypto suites.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
const DidCryptoSuites = {
    /**
     * The type for EdDSA crypto suite for JSON Canonicalization Scheme [RFC8785].
     * https://www.w3.org/TR/vc-di-eddsa/#eddsa-jcs-2022
     */
    EdDSAJcs2022: "eddsa-jcs-2022",
    /**
     * The type for EdDSA crypto suite for RDF Dataset Canonicalization.
     * https://www.w3.org/TR/vc-di-eddsa/#eddsa-rdfc-2022
     */
    EdDSARdfc2022: "eddsa-rdfc-2022"
};

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * The types for DIDs.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
const DidTypes = {
    /**
     * The type for Verifiable Credential.
     */
    VerifiableCredential: "VerifiableCredential",
    /**
     * The type for Verifiable Presentation.
     */
    VerifiablePresentation: "VerifiablePresentation",
    /**
     * The type for Ed25519VerificationKey2020.
     */
    Ed25519VerificationKey2020: "Ed25519VerificationKey2020",
    /**
     * The type for JsonWebKey2020.
     */
    JsonWebKey2020: "JsonWebKey2020",
    /**
     * The type for LinkedDomains.
     */
    LinkedDomains: "LinkedDomains",
    /**
     * The type for Multikey.
     */
    Multikey: "Multikey"
};

/**
 * The types of verification method.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
const DidVerificationMethodType = {
    /**
     * VerificationMethod.
     */
    VerificationMethod: "verificationMethod",
    /**
     * Authentication.
     */
    Authentication: "authentication",
    /**
     * Assertion Method.
     */
    AssertionMethod: "assertionMethod",
    /**
     * Key Agreement.
     */
    KeyAgreement: "keyAgreement",
    /**
     * Capability Invocation.
     */
    CapabilityInvocation: "capabilityInvocation",
    /**
     * Capability Delegation.
     */
    CapabilityDelegation: "capabilityDelegation"
};

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * The types for proofs.
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
const ProofTypes = {
    /**
     * The type for Data Integrity Proof.
     */
    DataIntegrityProof: "DataIntegrityProof",
    /**
     * The type for Json Web Signature 2020.
     */
    JsonWebSignature2020: "JsonWebSignature2020"
};

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * Helper methods for creating and verifying proofs.
 * https://www.w3.org/TR/vc-di-eddsa/#eddsa-jcs-2022
 */
class DataIntegrityProofSignerVerifier {
    /**
     * Runtime name for the class.
     */
    CLASS_NAME = "DataIntegrityProofSignerVerifier";
    /**
     * Create a proof for the given data.
     * @param unsecuredDocument The data to create the proof for.
     * @param unsignedProof The proof options.
     * @param signKey The key to sign the proof with.
     * @returns The created proof.
     */
    async createProof(unsecuredDocument, unsignedProof, signKey) {
        core.Guards.object(this.CLASS_NAME, "unsecuredDocument", unsecuredDocument);
        core.Guards.object(this.CLASS_NAME, "unsignedProof", unsignedProof);
        core.Guards.object(this.CLASS_NAME, "signKey", signKey);
        const rawKeys = await web.Jwk.toRaw(signKey);
        if (!core.Is.uint8Array(rawKeys.privateKey)) {
            throw new core.GeneralError(this.CLASS_NAME, "missingPrivateKey");
        }
        const unsecuredDocumentClone = core.ObjectHelper.clone(unsecuredDocument);
        const signedProof = core.ObjectHelper.clone(unsignedProof);
        unsecuredDocumentClone["@context"] = dataJsonLd.JsonLdProcessor.combineContexts(unsecuredDocumentClone["@context"], DidContexts.ContextDataIntegrity);
        signedProof["@context"] = unsecuredDocumentClone["@context"];
        const combinedHash = await this.createHash(unsecuredDocument, unsignedProof);
        const signature = crypto.Ed25519.sign(rawKeys.privateKey, combinedHash);
        signedProof.proofValue = `z${core.Converter.bytesToBase58(signature)}`;
        return signedProof;
    }
    /**
     * Verify a proof for the given data in format.
     * @param securedDocument The credential to verify.
     * @param signedProof The proof to verify.
     * @param verifyKey The public key to verify the proof with.
     * @returns True if the credential was verified.
     */
    async verifyProof(securedDocument, signedProof, verifyKey) {
        core.Guards.object(this.CLASS_NAME, "securedDocument", securedDocument);
        core.Guards.object(this.CLASS_NAME, "signedProof", signedProof);
        core.Guards.stringValue(this.CLASS_NAME, "signedProof.proofValue", signedProof.proofValue);
        core.Guards.object(this.CLASS_NAME, "verifyKey", verifyKey);
        const rawKeys = await web.Jwk.toRaw(verifyKey);
        if (!core.Is.uint8Array(rawKeys.publicKey)) {
            throw new core.GeneralError(this.CLASS_NAME, "missingPublicKey");
        }
        const combinedHash = await this.createHash(securedDocument, signedProof);
        return crypto.Ed25519.verify(rawKeys.publicKey, combinedHash, core.Converter.base58ToBytes(signedProof.proofValue.slice(1)));
    }
    /**
     * Create a hash for the given data.
     * @param unsecuredDocument The data to create the proof for.
     * @param unsignedProof The unsigned proof.
     * @returns The created hash.
     */
    async createHash(unsecuredDocument, unsignedProof) {
        core.Guards.object(this.CLASS_NAME, "unsecuredDocument", unsecuredDocument);
        core.Guards.object(this.CLASS_NAME, "unsignedProof", unsignedProof);
        core.Guards.stringValue(this.CLASS_NAME, "unsignedProof.cryptosuite", unsignedProof.cryptosuite);
        core.Guards.stringValue(this.CLASS_NAME, "unsignedProof.verificationMethod", unsignedProof.verificationMethod);
        const unsecuredDocumentClone = core.ObjectHelper.clone(unsecuredDocument);
        const proofOptionsClone = core.ObjectHelper.clone(unsignedProof);
        delete unsecuredDocumentClone.proof;
        delete proofOptionsClone.proofValue;
        if (proofOptionsClone.cryptosuite !== DidCryptoSuites.EdDSAJcs2022) {
            throw new core.GeneralError(this.CLASS_NAME, "cryptosuiteNotSupported", {
                cryptoSuite: proofOptionsClone.cryptosuite
            });
        }
        unsecuredDocumentClone["@context"] = dataJsonLd.JsonLdProcessor.combineContexts(unsecuredDocumentClone["@context"], DidContexts.ContextDataIntegrity);
        proofOptionsClone["@context"] = unsecuredDocumentClone["@context"];
        const transformedDocument = core.JsonHelper.canonicalize(unsecuredDocumentClone);
        const transformedDocumentHash = crypto.Sha256.sum256(core.Converter.utf8ToBytes(transformedDocument));
        const transformedProofOptions = core.JsonHelper.canonicalize(proofOptionsClone);
        const proofOptionsHash = crypto.Sha256.sum256(core.Converter.utf8ToBytes(transformedProofOptions));
        return core.Uint8ArrayHelper.concat([proofOptionsHash, transformedDocumentHash]);
    }
}

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * Helper methods for creating and verifying proofs.
 */
class JsonWebSignature2020SignerVerifier {
    /**
     * Runtime name for the class.
     */
    CLASS_NAME = "JsonWebSignature2020SignerVerifier";
    /**
     * Create a proof for the given data.
     * @param unsecuredDocument The data to create the proof for.
     * @param unsignedProof The proof options.
     * @param signKey The key to sign the proof with.
     * @returns The created proof.
     */
    async createProof(unsecuredDocument, unsignedProof, signKey) {
        core.Guards.object(this.CLASS_NAME, "unsecuredDocument", unsecuredDocument);
        core.Guards.object(this.CLASS_NAME, "unsignedProof", unsignedProof);
        core.Guards.object(this.CLASS_NAME, "signKey", signKey);
        const unsecuredDocumentClone = core.ObjectHelper.clone(unsecuredDocument);
        unsecuredDocumentClone["@context"] = dataJsonLd.JsonLdProcessor.combineContexts(unsecuredDocumentClone["@context"], DidContexts.ContextSecurityJws2020);
        const hash = await this.createHash(unsecuredDocument, unsignedProof);
        const cryptoKey = await web.Jwk.toCryptoKey(signKey);
        const signature = await web.Jws.create(cryptoKey, hash, signKey.alg);
        const signedProof = core.ObjectHelper.clone(unsignedProof);
        signedProof["@context"] = unsecuredDocumentClone["@context"];
        signedProof.jws = signature;
        return signedProof;
    }
    /**
     * Verify a proof for the given data in format.
     * @param securedDocument The credential to verify.
     * @param signedProof The proof to verify.
     * @param verifyKey The public key to verify the proof with.
     * @returns True if the credential was verified.
     */
    async verifyProof(securedDocument, signedProof, verifyKey) {
        core.Guards.object(this.CLASS_NAME, "securedDocument", securedDocument);
        core.Guards.object(this.CLASS_NAME, "signedProof", signedProof);
        core.Guards.object(this.CLASS_NAME, "verifyKey", verifyKey);
        const jws = signedProof.jws;
        if (!core.Is.stringValue(jws)) {
            throw new core.GeneralError(this.CLASS_NAME, "jwsMissing");
        }
        const hash = await this.createHash(securedDocument, signedProof);
        const cryptoKey = await web.Jwk.toCryptoKey(verifyKey);
        return web.Jws.verify(jws, cryptoKey, hash);
    }
    /**
     * Create a hash for the given data.
     * @param unsecuredDocument The data to create the proof for.
     * @param unsignedProof The unsigned proof.
     * @returns The created hash.
     */
    async createHash(unsecuredDocument, unsignedProof) {
        core.Guards.object(this.CLASS_NAME, "unsecuredDocument", unsecuredDocument);
        core.Guards.object(this.CLASS_NAME, "unsignedProof", unsignedProof);
        core.Guards.stringValue(this.CLASS_NAME, "unsignedProof.verificationMethod", unsignedProof.verificationMethod);
        const unsecuredDocumentClone = core.ObjectHelper.clone(unsecuredDocument);
        const proofOptionsClone = core.ObjectHelper.clone(unsignedProof);
        unsecuredDocumentClone["@context"] = dataJsonLd.JsonLdProcessor.combineContexts(unsecuredDocumentClone["@context"], DidContexts.ContextSecurityJws2020);
        proofOptionsClone["@context"] = unsecuredDocumentClone["@context"];
        delete unsecuredDocumentClone.proof;
        delete proofOptionsClone.jws;
        const canonizedData = await dataJsonLd.JsonLdProcessor.canonize(unsecuredDocumentClone);
        const canonizedProof = await dataJsonLd.JsonLdProcessor.canonize(proofOptionsClone);
        const hashedProof = crypto.Sha256.sum256(core.Converter.utf8ToBytes(canonizedProof));
        const hashedData = crypto.Sha256.sum256(core.Converter.utf8ToBytes(canonizedData));
        return core.Uint8ArrayHelper.concat([hashedProof, hashedData]);
    }
}

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * Helper methods for multikey.
 */
class MultikeyHelper {
    /**
     * Runtime name for the class.
     */
    static CLASS_NAME = "MultikeyHelper";
    /**
     * Convert a multikey to a JWK.
     * @param multikey The multikey to convert.
     * @returns The JWK.
     * @throws GeneralError if the multikey is invalid.
     */
    static toJwk(multikey) {
        core.Guards.object(MultikeyHelper.CLASS_NAME, "multikey", multikey);
        const { publicKey, privateKey } = MultikeyHelper.toRaw(multikey);
        return {
            kty: "OKP",
            crv: "Ed25519",
            alg: "EdDSA",
            x: core.Is.uint8Array(publicKey) ? core.Converter.bytesToBase64Url(publicKey) : undefined,
            d: core.Is.uint8Array(privateKey) ? core.Converter.bytesToBase64Url(privateKey) : undefined
        };
    }
    /**
     * Convert a JWK to a Multikey.
     * @param controller The controller of the multikey.
     * @param id The id of the multikey.
     * @param jwk The jwk to convert.
     * @returns The multikey.
     * @throws GeneralError if the jwk is invalid.
     */
    static fromJwk(controller, id, jwk) {
        core.Guards.stringValue(MultikeyHelper.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(MultikeyHelper.CLASS_NAME, "id", id);
        core.Guards.object(MultikeyHelper.CLASS_NAME, "jwk", jwk);
        core.Guards.stringValue(MultikeyHelper.CLASS_NAME, "jwk.x", jwk.x);
        if (jwk.kty !== "OKP") {
            throw new core.GeneralError(MultikeyHelper.CLASS_NAME, "unsupportedKty", { kty: jwk.kty });
        }
        if (jwk.crv !== "Ed25519") {
            throw new core.GeneralError(MultikeyHelper.CLASS_NAME, "unsupportedCrv", { crv: jwk.crv });
        }
        const publicRaw = core.Converter.base64UrlToBytes(jwk.x);
        const publicKey = new Uint8Array(2 + publicRaw.length);
        publicKey[0] = 0xed;
        publicKey[1] = 0x01;
        publicKey.set(publicRaw, 2);
        const multikey = {
            "@context": DidContexts.ContextControllerIdentifiers,
            type: DidTypes.Multikey,
            controller,
            id,
            publicKeyMultibase: `z${core.Converter.bytesToBase58(publicKey)}`
        };
        if (core.Is.stringValue(jwk.d)) {
            const privateRaw = core.Converter.base64UrlToBytes(jwk.d);
            const secretKey = new Uint8Array(2 + privateRaw.length);
            secretKey[0] = 0x80;
            secretKey[1] = 0x26;
            secretKey.set(privateRaw, 2);
            multikey.secretKeyMultibase = `z${core.Converter.bytesToBase58(secretKey)}`;
        }
        return multikey;
    }
    /**
     * Convert a multikey to raw keys.
     * @param multikey The multikey to convert.
     * @returns The JWK.
     * @throws GeneralError if the multikey is invalid.
     */
    static toRaw(multikey) {
        core.Guards.object(MultikeyHelper.CLASS_NAME, "multikey", multikey);
        let publicKeyRaw;
        let secretKeyRaw;
        if (core.Is.stringValue(multikey.publicKeyMultibase)) {
            if (!multikey.publicKeyMultibase.startsWith("z")) {
                throw new core.GeneralError(MultikeyHelper.CLASS_NAME, "invalidPublicKeyMultibase", {
                    publicKeyMultibase: multikey.publicKeyMultibase
                });
            }
            publicKeyRaw = core.Converter.base58ToBytes(multikey.publicKeyMultibase.slice(1));
            if (publicKeyRaw[0] !== 0xed || publicKeyRaw[1] !== 0x01) {
                throw new core.GeneralError(MultikeyHelper.CLASS_NAME, "publicKeyMultibaseMissingHeader", {
                    publicKeyMultibase: multikey.publicKeyMultibase
                });
            }
        }
        if (core.Is.stringValue(multikey.secretKeyMultibase)) {
            if (!multikey.secretKeyMultibase.startsWith("z")) {
                throw new core.GeneralError(MultikeyHelper.CLASS_NAME, "invalidSecretKeyMultibase", {
                    secretKeyMultibase: multikey.secretKeyMultibase
                });
            }
            secretKeyRaw = core.Converter.base58ToBytes(multikey.secretKeyMultibase.slice(1));
            if (secretKeyRaw[0] !== 0x80 || secretKeyRaw[1] !== 0x26) {
                throw new core.GeneralError(MultikeyHelper.CLASS_NAME, "publicKeyMultibaseMissingHeader", {
                    publicKeyMultibase: multikey.publicKeyMultibase
                });
            }
        }
        return {
            publicKey: publicKeyRaw?.slice(2) ?? new Uint8Array(),
            privateKey: secretKeyRaw?.slice(2, 34) ?? new Uint8Array()
        };
    }
}

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * Helper methods for creating and verifying proofs.
 */
class ProofHelper {
    /**
     * Runtime name for the class.
     */
    static CLASS_NAME = "ProofHelper";
    /**
     * Create a signer verifier.
     * @param proofType The type of proof to create.
     * @returns The created signer verifier.
     * @throws GeneralError if the proof type is not supported.
     */
    static createSignerVerifier(proofType) {
        core.Guards.arrayOneOf(this.CLASS_NAME, "proofType", proofType, Object.values(ProofTypes));
        let signerVerifier;
        if (proofType === ProofTypes.DataIntegrityProof) {
            signerVerifier = new DataIntegrityProofSignerVerifier();
        }
        else if (proofType === ProofTypes.JsonWebSignature2020) {
            signerVerifier = new JsonWebSignature2020SignerVerifier();
        }
        if (core.Is.empty(signerVerifier)) {
            throw new core.GeneralError(ProofHelper.CLASS_NAME, "unsupportedProofType", { proofType });
        }
        return signerVerifier;
    }
    /**
     * Create a proof for the given data.
     * @param proofType The type of proof to create.
     * @param unsecuredDocument The data to create the proof for.
     * @param unsignedProof The proof options.
     * @param signKey The key to sign the proof with.
     * @returns The created proof.
     */
    static async createProof(proofType, unsecuredDocument, unsignedProof, signKey) {
        core.Guards.arrayOneOf(this.CLASS_NAME, "proofType", proofType, Object.values(ProofTypes));
        core.Guards.object(this.CLASS_NAME, "unsecuredDocument", unsecuredDocument);
        core.Guards.object(this.CLASS_NAME, "unsignedProof", unsignedProof);
        core.Guards.object(this.CLASS_NAME, "signKey", signKey);
        return ProofHelper.createSignerVerifier(proofType).createProof(unsecuredDocument, unsignedProof, signKey);
    }
    /**
     * Verify a proof for the given data.
     * @param securedDocument The credential to verify.
     * @param signedProof The proof to verify.
     * @param verifyKey The public key to verify the proof with.
     * @returns True if the credential was verified.
     */
    static async verifyProof(securedDocument, signedProof, verifyKey) {
        core.Guards.object(this.CLASS_NAME, "securedDocument", securedDocument);
        core.Guards.object(this.CLASS_NAME, "signedProof", signedProof);
        core.Guards.stringValue(this.CLASS_NAME, "signedProof.type", signedProof.type);
        core.Guards.object(this.CLASS_NAME, "verifyKey", verifyKey);
        const signerVerifier = ProofHelper.createSignerVerifier(signedProof.type);
        return signerVerifier.verifyProof(securedDocument, signedProof, verifyKey);
    }
    /**
     * Create an unsigned proof.
     * @param proofType The type of proof to create.
     * @param verificationMethodId The verification method id.
     * @param otherParams Other parameters for the proof.
     * @returns The created proof.
     * @throws GeneralError if the proof type is not supported.
     */
    static createUnsignedProof(proofType, verificationMethodId, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    otherParams) {
        let proof;
        if (proofType === ProofTypes.DataIntegrityProof) {
            proof = {
                "@context": DidContexts.ContextDataIntegrity,
                type: ProofTypes.DataIntegrityProof,
                cryptosuite: DidCryptoSuites.EdDSAJcs2022,
                created: new Date(Date.now()).toISOString(),
                verificationMethod: verificationMethodId,
                proofPurpose: "assertionMethod",
                ...otherParams
            };
        }
        else if (proofType === ProofTypes.JsonWebSignature2020) {
            proof = {
                "@context": DidContexts.ContextSecurityJws2020,
                type: ProofTypes.JsonWebSignature2020,
                created: new Date(Date.now()).toISOString(),
                verificationMethod: verificationMethodId,
                proofPurpose: "assertionMethod",
                ...otherParams
            };
        }
        if (core.Is.empty(proof)) {
            throw new core.GeneralError(ProofHelper.CLASS_NAME, "unsupportedProofType", { proofType });
        }
        return proof;
    }
}

exports.DataIntegrityProofSignerVerifier = DataIntegrityProofSignerVerifier;
exports.DidContexts = DidContexts;
exports.DidCryptoSuites = DidCryptoSuites;
exports.DidTypes = DidTypes;
exports.DidVerificationMethodType = DidVerificationMethodType;
exports.JsonWebSignature2020SignerVerifier = JsonWebSignature2020SignerVerifier;
exports.MultikeyHelper = MultikeyHelper;
exports.ProofHelper = ProofHelper;
exports.ProofTypes = ProofTypes;

import type { IJsonLdNodeObject } from "@twin.org/data-json-ld";
import type { IJwk } from "@twin.org/web";
import type { IProof } from "../models/IProof";
import type { IProofSignerVerifier } from "../models/IProofSignerVerifier";
import { ProofTypes } from "../models/proofTypes";
/**
 * Helper methods for creating and verifying proofs.
 */
export declare class ProofHelper {
    /**
     * Runtime name for the class.
     */
    static readonly CLASS_NAME: string;
    /**
     * Create a signer verifier.
     * @param proofType The type of proof to create.
     * @returns The created signer verifier.
     * @throws GeneralError if the proof type is not supported.
     */
    static createSignerVerifier(proofType: ProofTypes): IProofSignerVerifier;
    /**
     * Create a proof for the given data.
     * @param proofType The type of proof to create.
     * @param unsecuredDocument The data to create the proof for.
     * @param unsignedProof The proof options.
     * @param signKey The key to sign the proof with.
     * @returns The created proof.
     */
    static createProof(proofType: ProofTypes, unsecuredDocument: IJsonLdNodeObject, unsignedProof: IProof, signKey: IJwk): Promise<IProof>;
    /**
     * Verify a proof for the given data.
     * @param securedDocument The credential to verify.
     * @param signedProof The proof to verify.
     * @param verifyKey The public key to verify the proof with.
     * @returns True if the credential was verified.
     */
    static verifyProof(securedDocument: IJsonLdNodeObject, signedProof: IProof, verifyKey: IJwk): Promise<boolean>;
    /**
     * Create an unsigned proof.
     * @param proofType The type of proof to create.
     * @param verificationMethodId The verification method id.
     * @param otherParams Other parameters for the proof.
     * @returns The created proof.
     * @throws GeneralError if the proof type is not supported.
     */
    static createUnsignedProof(proofType: ProofTypes, verificationMethodId: string, otherParams?: any): IProof;
}

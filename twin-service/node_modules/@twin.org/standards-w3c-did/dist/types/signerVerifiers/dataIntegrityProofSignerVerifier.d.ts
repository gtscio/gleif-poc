import { type IJsonLdNodeObject } from "@twin.org/data-json-ld";
import { type IJwk } from "@twin.org/web";
import type { IDataIntegrityProof } from "../models/IDataIntegrityProof";
import type { IProof } from "../models/IProof";
import type { IProofSignerVerifier } from "../models/IProofSignerVerifier";
/**
 * Helper methods for creating and verifying proofs.
 * https://www.w3.org/TR/vc-di-eddsa/#eddsa-jcs-2022
 */
export declare class DataIntegrityProofSignerVerifier implements IProofSignerVerifier {
    /**
     * Runtime name for the class.
     */
    readonly CLASS_NAME: string;
    /**
     * Create a proof for the given data.
     * @param unsecuredDocument The data to create the proof for.
     * @param unsignedProof The proof options.
     * @param signKey The key to sign the proof with.
     * @returns The created proof.
     */
    createProof(unsecuredDocument: IJsonLdNodeObject, unsignedProof: IDataIntegrityProof, signKey: IJwk): Promise<IProof>;
    /**
     * Verify a proof for the given data in format.
     * @param securedDocument The credential to verify.
     * @param signedProof The proof to verify.
     * @param verifyKey The public key to verify the proof with.
     * @returns True if the credential was verified.
     */
    verifyProof(securedDocument: IJsonLdNodeObject, signedProof: IDataIntegrityProof, verifyKey: IJwk): Promise<boolean>;
    /**
     * Create a hash for the given data.
     * @param unsecuredDocument The data to create the proof for.
     * @param unsignedProof The unsigned proof.
     * @returns The created hash.
     */
    createHash(unsecuredDocument: IJsonLdNodeObject, unsignedProof: IDataIntegrityProof): Promise<Uint8Array>;
}

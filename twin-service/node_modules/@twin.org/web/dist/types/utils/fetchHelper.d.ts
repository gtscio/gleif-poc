import { HttpMethod } from "../models/httpMethod";
import type { IFetchOptions } from "../models/IFetchOptions";
/**
 * Class to helper with fetch operations.
 */
export declare class FetchHelper {
    /**
     * Perform a fetch request.
     * @param source The source for the request.
     * @param url The url for the request.
     * @param method The http method.
     * @param body Request to send to the endpoint.
     * @param options Options for sending the requests.
     * @returns The response.
     */
    static fetch(source: string, url: string, method: HttpMethod, body?: string | Uint8Array, options?: Omit<IFetchOptions, "cacheTtlSeconds">): Promise<Response>;
    /**
     * Perform a request in json format.
     * @param source The source for the request.
     * @param url The url for the request.
     * @param method The http method.
     * @param requestData Request to send to the endpoint.
     * @param options Options for sending the requests.
     * @returns The response.
     */
    static fetchJson<T, U>(source: string, url: string, method: HttpMethod, requestData?: T, options?: IFetchOptions): Promise<U>;
    /**
     * Perform a request for binary data.
     * @param source The source for the request.
     * @param url The url for the request.
     * @param method The http method.
     * @param requestData Request to send to the endpoint.
     * @param options Options for sending the requests.
     * @returns The response.
     */
    static fetchBinary<T>(source: string, url: string, method: Extract<HttpMethod, "GET" | "POST">, requestData?: Uint8Array, options?: IFetchOptions): Promise<Uint8Array | T>;
    /**
     * Clears the cache.
     */
    static clearCache(): void;
    /**
     * Get a cache entry.
     * @param url The url for the request.
     * @returns The cache entry if it exists.
     */
    static getCacheEntry<T>(url: string): Promise<T | undefined>;
    /**
     * Set a cache entry.
     * @param url The url for the request.
     * @param value The value to cache.
     * @returns The cache entry if it exists.
     */
    static setCacheEntry<T>(url: string, value: T): Promise<void>;
    /**
     * Remove a cache entry.
     * @param url The url for the request.
     */
    static removeCacheEntry(url: string): void;
}

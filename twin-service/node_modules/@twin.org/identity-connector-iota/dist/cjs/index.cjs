'use strict';

var index_js = require('@iota/identity-wasm/node/index.js');
var client = require('@iota/iota-sdk/client');
var core = require('@twin.org/core');
var dltIota = require('@twin.org/dlt-iota');
var identityModels = require('@twin.org/identity-models');
var standardsW3cDid = require('@twin.org/standards-w3c-did');
var vaultModels = require('@twin.org/vault-models');
var web = require('@twin.org/web');

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * IOTA network constants for DID formatting.
 */
class NetworkConstants {
    /**
     * The network identifier for IOTA mainnet as specified in the DID Method Specification v2.0.
     * When this network is detected, DIDs should omit the network identifier per the canonical format.
     */
    static MAINNET_NETWORK_ID = "6364aad5";
}

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * Class for performing identity operations on IOTA.
 */
class IotaIdentityConnector {
    /**
     * The namespace supported by the identity connector.
     */
    static NAMESPACE = "iota";
    /**
     * Runtime name for the class.
     */
    CLASS_NAME = "IotaIdentityConnector";
    /**
     * The vault for the keys.
     * @internal
     */
    _vaultConnector;
    /**
     * The configuration to use for IOTA operations.
     * @internal
     */
    _config;
    /**
     * The wallet address index to use for funding.
     * @internal
     */
    _walletAddressIndex;
    /**
     * Gas budget for transactions.
     * @internal
     */
    _gasBudget;
    /**
     * Standard gas price in nanos per computation unit.
     * (1 Nano = 0.000000001 IOTA)
     * @internal
     */
    _standardGasPrice;
    /**
     * Create a new instance of IotaIdentityConnector.
     * @param options The options for the identity connector.
     */
    constructor(options) {
        core.Guards.object(this.CLASS_NAME, "options", options);
        core.Guards.object(this.CLASS_NAME, "options.config", options.config);
        core.Guards.object(this.CLASS_NAME, "options.config.clientOptions", options.config.clientOptions);
        this._vaultConnector = vaultModels.VaultConnectorFactory.get(options.vaultConnectorType ?? "vault");
        this._config = options.config;
        this._gasBudget = this._config.gasBudget ?? 1_000_000_000;
        this._walletAddressIndex = options.config.walletAddressIndex ?? 0;
        this._standardGasPrice = BigInt(this._config.standardGasPrice ?? 1000);
        dltIota.Iota.populateConfig(this._config);
    }
    /**
     * Create a new document.
     * @param controller The controller of the identity who can make changes.
     * @returns The created document.
     */
    async createDocument(controller) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        try {
            const identityClient = await this.getIdentityClient(controller);
            const networkHrp = identityClient.network();
            const document = new index_js.IotaDocument(networkHrp);
            const revocationBitmap = new index_js.RevocationBitmap();
            const revocationServiceId = document.id().join("#revocation");
            document.insertService(revocationBitmap.toService(revocationServiceId));
            const executionResult = await this.executeIdentityTransaction(controller, identityClient.createIdentity(document).finish());
            const did = this.extractDidFromExecutionResult(executionResult, networkHrp);
            // Both regular and gas station transactions now use waitForTransactionConfirmation
            // so the DID should be immediately resolvable after transaction confirmation
            const resolved = await identityClient.resolveDid(did);
            const docJson = resolved.toJSON();
            return docJson.doc;
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "createDocumentFailed", undefined, dltIota.Iota.extractPayloadError(error));
        }
    }
    /**
     * Remove a document.
     * @param controller The controller of the identity who can make changes.
     * @param documentId The id of the document to remove.
     * @returns Nothing.
     */
    async removeDocument(controller, documentId) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "documentId", documentId);
        try {
            const identityClient = await this.getIdentityClient(controller);
            const idParts = identityModels.DocumentHelper.parseId(documentId).id.split(":");
            const onChain = await index_js.OnChainIdentity.getById(`0x${idParts[idParts.length - 1]}`, identityClient);
            if (core.Is.undefined(onChain)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", documentId);
            }
            const controllerToken = await onChain.getControllerToken(identityClient);
            if (core.Is.undefined(controllerToken)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", documentId);
            }
            const deleteBuilder = await onChain
                .deleteDid(controllerToken)
                .withGasBudget(BigInt(this._gasBudget));
            if (core.Is.object(this._config.gasStation)) {
                await this.executeDocumentUpdateWithGasStation(controller, deleteBuilder);
            }
            await deleteBuilder.buildAndExecute(identityClient);
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "removeDocumentFailed", undefined, error);
        }
    }
    /**
     * Add a verification method to the document in JSON Web key Format.
     * @param controller The controller of the identity who can make changes.
     * @param documentId The id of the document to add the verification method to.
     * @param verificationMethodType The type of the verification method to add.
     * @param verificationMethodId The id of the verification method, if undefined uses the kid of the generated JWK.
     * @returns The verification method.
     * @throws NotFoundError if the id can not be resolved.
     * @throws NotSupportedError if the platform does not support multiple keys.
     */
    async addVerificationMethod(controller, documentId, verificationMethodType, verificationMethodId) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "documentId", documentId);
        core.Guards.arrayOneOf(this.CLASS_NAME, "verificationMethodType", verificationMethodType, Object.values(standardsW3cDid.DidVerificationMethodType));
        let tempKeyId;
        try {
            const identityClient = await this.getIdentityClient(controller);
            const document = await identityClient.resolveDid(index_js.IotaDID.parse(documentId));
            if (core.Is.undefined(document)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", documentId);
            }
            const identity = await identityClient.getIdentity(this.extractAliasId(documentId));
            const identityOnChain = identity.toFullFledged();
            if (core.Is.undefined(identityOnChain)) {
                throw new core.NotFoundError(this.CLASS_NAME, "identityNotFound", identityOnChain);
            }
            let methodKeyPublic;
            if (core.Is.stringValue(verificationMethodId)) {
                // If there is a verification method id, we will try to get the key from the vault.
                try {
                    const defaultMethodId = `${controller}/${verificationMethodId}`;
                    // If there is an existing key, we will use it.
                    const existingKey = await this._vaultConnector.getKey(defaultMethodId);
                    methodKeyPublic = existingKey.publicKey;
                }
                catch { }
            }
            if (core.Is.empty(methodKeyPublic)) {
                // If there is no existing key, we will create a new one with a temporary name.
                tempKeyId = `${controller}/temp-vm-${Date.now()}`;
                methodKeyPublic = await this._vaultConnector.createKey(tempKeyId, vaultModels.VaultKeyType.Ed25519);
            }
            const jwkParams = await web.Jwk.fromEd25519Public(methodKeyPublic);
            const jwk = new index_js.Jwk(jwkParams);
            const methodId = `#${verificationMethodId ?? (await web.Jwk.generateKid(jwkParams))}`;
            if (core.Is.stringValue(tempKeyId)) {
                // If we created a temporary key, we will rename it to the final method id.
                await this._vaultConnector.renameKey(tempKeyId, `${controller}/${methodId.slice(1)}`);
                tempKeyId = undefined;
            }
            const method = index_js.VerificationMethod.newFromJwk(document.id(), jwk, methodId);
            const methods = document.methods();
            const existingMethod = methods.find(m => m.id().toString() === method.id().toString());
            if (existingMethod) {
                document.removeMethod(method.id());
            }
            if (verificationMethodType === "verificationMethod") {
                document.insertMethod(method, index_js.MethodScope.VerificationMethod());
            }
            else if (verificationMethodType === "authentication") {
                document.insertMethod(method, index_js.MethodScope.Authentication());
            }
            else if (verificationMethodType === "assertionMethod") {
                document.insertMethod(method, index_js.MethodScope.AssertionMethod());
            }
            else if (verificationMethodType === "keyAgreement") {
                document.insertMethod(method, index_js.MethodScope.KeyAgreement());
            }
            else if (verificationMethodType === "capabilityDelegation") {
                document.insertMethod(method, index_js.MethodScope.CapabilityDelegation());
            }
            else if (verificationMethodType === "capabilityInvocation") {
                document.insertMethod(method, index_js.MethodScope.CapabilityInvocation());
            }
            const controllerToken = await identityOnChain.getControllerToken(identityClient);
            if (core.Is.empty(controllerToken)) {
                throw new core.GeneralError(this.CLASS_NAME, "missingControllerToken");
            }
            await this.executeDocumentUpdate(controller, identityOnChain, document, controllerToken);
            return method.toJSON();
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "addVerificationMethodFailed", undefined, dltIota.Iota.extractPayloadError(error));
        }
        finally {
            if (core.Is.stringValue(tempKeyId)) {
                // If we created a temporary key and it is still in use, we will remove it from the vault.
                try {
                    await this._vaultConnector.removeKey(tempKeyId);
                }
                catch { }
            }
        }
    }
    /**
     * Remove a verification method from the document.
     * @param controller The controller of the identity who can make changes.
     * @param verificationMethodId The id of the verification method.
     * @returns Nothing.
     * @throws NotFoundError if the id can not be resolved.
     * @throws NotSupportedError if the platform does not support multiple revocable keys.
     */
    async removeVerificationMethod(controller, verificationMethodId) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "verificationMethodId", verificationMethodId);
        try {
            const idParts = identityModels.DocumentHelper.parseId(verificationMethodId);
            if (core.Is.empty(idParts.fragment)) {
                throw new core.NotFoundError(this.CLASS_NAME, "missingDid", verificationMethodId);
            }
            const identityClient = await this.getIdentityClient(controller);
            const document = await identityClient.resolveDid(index_js.IotaDID.parse(idParts.id));
            if (core.Is.undefined(document)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", idParts.id);
            }
            const methods = document.methods();
            const method = methods.find(m => m.id().toString() === verificationMethodId);
            if (!method) {
                throw new core.NotFoundError(this.CLASS_NAME, "verificationMethodNotFound", verificationMethodId);
            }
            document.removeMethod(method.id());
            const identity = await identityClient.getIdentity(this.extractAliasId(idParts.id));
            const identityOnChain = identity.toFullFledged();
            if (core.Is.undefined(identityOnChain)) {
                throw new core.NotFoundError(this.CLASS_NAME, "identityNotFound", verificationMethodId);
            }
            const controllerToken = await identityOnChain.getControllerToken(identityClient);
            if (core.Is.empty(controllerToken)) {
                throw new core.GeneralError(this.CLASS_NAME, "missingControllerToken");
            }
            await this.executeDocumentUpdate(controller, identityOnChain, document, controllerToken);
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "removeVerificationMethodFailed", undefined, dltIota.Iota.extractPayloadError(error));
        }
    }
    /**
     * Add a service to the document.
     * @param controller The controller of the identity who can make changes.
     * @param documentId The id of the document to add the service to.
     * @param serviceId The id of the service.
     * @param serviceType The type of the service.
     * @param serviceEndpoint The endpoint for the service.
     * @returns The service.
     * @throws NotFoundError if the id can not be resolved.
     */
    async addService(controller, documentId, serviceId, serviceType, serviceEndpoint) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "documentId", documentId);
        core.Guards.stringValue(this.CLASS_NAME, "serviceId", serviceId);
        core.Guards.stringValue(this.CLASS_NAME, "serviceType", serviceType);
        core.Guards.stringValue(this.CLASS_NAME, "serviceEndpoint", serviceEndpoint);
        try {
            const identityClient = await this.getIdentityClient(controller);
            const document = await identityClient.resolveDid(index_js.IotaDID.parse(documentId));
            if (core.Is.undefined(document)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", documentId);
            }
            const identity = await identityClient.getIdentity(this.extractAliasId(documentId));
            const identityOnChain = identity.toFullFledged();
            if (core.Is.undefined(identityOnChain)) {
                throw new core.NotFoundError(this.CLASS_NAME, "identityNotFound", identityOnChain);
            }
            const service = new index_js.Service({
                id: `${document.id()}#${serviceId}`,
                type: serviceType,
                serviceEndpoint
            });
            document.insertService(service);
            const controllerToken = await identityOnChain.getControllerToken(identityClient);
            if (core.Is.empty(controllerToken)) {
                throw new core.GeneralError(this.CLASS_NAME, "missingControllerToken");
            }
            await this.executeDocumentUpdate(controller, identityOnChain, document, controllerToken);
            return service.toJSON();
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "addServiceFailed", undefined, dltIota.Iota.extractPayloadError(error));
        }
    }
    /**
     * Remove a service from the document.
     * @param controller The controller of the identity who can make changes.
     * @param serviceId The id of the service.
     * @returns Nothing.
     * @throws NotFoundError if the id can not be resolved.
     */
    async removeService(controller, serviceId) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "serviceId", serviceId);
        try {
            const idParts = identityModels.DocumentHelper.parseId(serviceId);
            if (core.Is.empty(idParts.fragment)) {
                throw new core.NotFoundError(this.CLASS_NAME, "missingDid", serviceId);
            }
            const identityClient = await this.getIdentityClient(controller);
            const document = await identityClient.resolveDid(index_js.IotaDID.parse(idParts.id));
            if (core.Is.undefined(document)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", idParts.id);
            }
            const services = document.service();
            const service = services.find(s => s.id().toString() === serviceId);
            if (!service) {
                throw new core.NotFoundError(this.CLASS_NAME, "serviceNotFound", serviceId);
            }
            document.removeService(service.id());
            const identity = await identityClient.getIdentity(this.extractAliasId(idParts.id));
            const identityOnChain = identity.toFullFledged();
            if (core.Is.undefined(identityOnChain)) {
                throw new core.NotFoundError(this.CLASS_NAME, "identityNotFound", idParts.id);
            }
            const controllerToken = await identityOnChain.getControllerToken(identityClient);
            if (core.Is.empty(controllerToken)) {
                throw new core.GeneralError(this.CLASS_NAME, "missingControllerToken");
            }
            await this.executeDocumentUpdate(controller, identityOnChain, document, controllerToken);
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "removeServiceFailed", undefined, dltIota.Iota.extractPayloadError(error));
        }
    }
    /**
     * Create a verifiable credential for a verification method.
     * @param controller The controller of the identity who can make changes.
     * @param verificationMethodId The verification method id to use.
     * @param id The id of the credential.
     * @param subject The credential subject to store in the verifiable credential.
     * @param revocationIndex The bitmap revocation index of the credential, if undefined will not have revocation status.
     * @returns The created verifiable credential and its token.
     * @throws NotFoundError if the id can not be resolved.
     */
    async createVerifiableCredential(controller, verificationMethodId, id, subject, revocationIndex) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "verificationMethodId", verificationMethodId);
        core.Guards.objectValue(this.CLASS_NAME, "subject", subject);
        if (!core.Is.undefined(revocationIndex)) {
            core.Guards.number(this.CLASS_NAME, "revocationIndex", revocationIndex);
        }
        try {
            const idParts = identityModels.DocumentHelper.parseId(verificationMethodId);
            if (core.Is.empty(idParts.fragment)) {
                throw new core.NotFoundError(this.CLASS_NAME, "missingDid", verificationMethodId);
            }
            const identityClient = await this.getIdentityClient(controller);
            const issuerDocument = await identityClient.resolveDid(index_js.IotaDID.parse(idParts.id));
            if (core.Is.undefined(issuerDocument)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", idParts.id);
            }
            const methods = issuerDocument.methods();
            const method = methods.find(m => m.id().toString() === verificationMethodId);
            if (!method) {
                throw new core.GeneralError(this.CLASS_NAME, "methodMissing", { method: verificationMethodId });
            }
            const subjectClone = core.ObjectHelper.clone(subject);
            const credContext = core.ObjectHelper.extractProperty(subjectClone, "@context", true);
            const credType = core.ObjectHelper.extractProperty(subjectClone, ["@type", "type"], false);
            const finalTypes = [];
            if (core.Is.stringValue(credType)) {
                finalTypes.push(credType);
            }
            const verificationMethodKey = await this._vaultConnector.getKey(`${controller}/${idParts.fragment}`);
            if (core.Is.undefined(verificationMethodKey)) {
                throw new core.GeneralError(this.CLASS_NAME, "verificationKeyMissing", {
                    method: verificationMethodId
                });
            }
            if (core.Is.undefined(verificationMethodKey.publicKey)) {
                throw new core.GeneralError(this.CLASS_NAME, "publicKeyJwkMethodMissing", {
                    method: verificationMethodId
                });
            }
            const jwkMemStore = new index_js.JwkMemStore();
            const jwkResult = await web.Jwk.fromEd25519Private(verificationMethodKey.privateKey);
            const jwkParams = jwkResult;
            const keyId = await jwkMemStore.insert(new index_js.Jwk(jwkParams));
            const keyIdMemStore = new index_js.KeyIdMemStore();
            const methodDigest = new index_js.MethodDigest(method);
            await keyIdMemStore.insertKeyId(methodDigest, keyId);
            const storage = new index_js.Storage(jwkMemStore, keyIdMemStore);
            const subjectId = subjectClone.id;
            if (core.Is.stringValue(subjectId) &&
                !core.Url.tryParseExact(subjectId) &&
                !core.Urn.tryParseExact(subjectId)) {
                throw new core.GeneralError(this.CLASS_NAME, "invalidSubjectId", { subjectId });
            }
            const unsignedVc = new index_js.Credential({
                issuer: idParts.id,
                credentialSubject: subjectClone,
                type: finalTypes,
                id,
                context: credContext
            });
            if (!core.Is.undefined(revocationIndex)) {
                Object.assign(unsignedVc, {
                    credentialStatus: {
                        id: `${issuerDocument.id().toString()}#revocation`,
                        type: index_js.RevocationBitmap.type(),
                        revocationBitmapIndex: revocationIndex.toString()
                    }
                });
            }
            const credentialJwt = await issuerDocument.createCredentialJwt(storage, `#${idParts.fragment}`, unsignedVc, new index_js.JwsSignatureOptions());
            const validatedCredential = new index_js.JwtCredentialValidator(new index_js.EdDSAJwsVerifier());
            const decoded = validatedCredential.validate(credentialJwt, issuerDocument, new index_js.JwtCredentialValidationOptions(), index_js.FailFast.FirstError);
            return {
                verifiableCredential: decoded.credential().toJSON(),
                jwt: credentialJwt.toString()
            };
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "createVerifiableCredentialFailed", {
                error: core.BaseError.fromError(error)
            });
        }
    }
    /**
     * Check a verifiable credential is valid.
     * @param credentialJwt The credential to verify.
     * @returns The credential stored in the jwt and the revocation status.
     */
    async checkVerifiableCredential(credentialJwt) {
        core.Guards.stringValue(this.CLASS_NAME, "credentialJwt", credentialJwt);
        try {
            const identityClientReadOnly = await index_js.IdentityClientReadOnly.create(new client.IotaClient(this._config.clientOptions));
            const resolver = new index_js.Resolver({ client: identityClientReadOnly });
            const jwt = new index_js.Jwt(credentialJwt);
            const issuerDocumentId = index_js.JwtCredentialValidator.extractIssuerFromJwt(jwt);
            const issuerDocument = await resolver.resolve(issuerDocumentId.toString());
            if (core.Is.undefined(issuerDocument)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", issuerDocumentId.toString());
            }
            const validatedCredential = new index_js.JwtCredentialValidator(new index_js.EdDSAJwsVerifier());
            const decoded = validatedCredential.validate(jwt, issuerDocument, new index_js.JwtCredentialValidationOptions(), index_js.FailFast.FirstError);
            const credential = decoded.credential();
            return {
                revoked: false,
                verifiableCredential: credential.toJSON()
            };
        }
        catch (error) {
            if (error instanceof Error && error.message.toLowerCase().includes("revoked")) {
                return {
                    revoked: true
                };
            }
            throw new core.GeneralError(this.CLASS_NAME, "checkingVerifiableCredentialFailed", {
                error: core.BaseError.fromError(error)
            });
        }
    }
    /**
     * Revoke verifiable credential(s).
     * @param controller The controller of the identity who can make changes.
     * @param issuerDocumentId The id of the document to update the revocation list for.
     * @param credentialIndices The revocation bitmap index or indices to revoke.
     * @returns Nothing.
     */
    async revokeVerifiableCredentials(controller, issuerDocumentId, credentialIndices) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "issuerDocumentId", issuerDocumentId);
        core.Guards.array(this.CLASS_NAME, "credentialIndices", credentialIndices);
        try {
            const identityClient = await this.getIdentityClient(controller);
            const document = await identityClient.resolveDid(index_js.IotaDID.parse(issuerDocumentId));
            if (core.Is.undefined(document)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", issuerDocumentId);
            }
            const serviceId = `${document.id().toString()}#revocation`;
            const revocationService = document.service().find(s => s.id().toString() === serviceId);
            if (core.Is.undefined(revocationService)) {
                const revocationBitmap = new index_js.RevocationBitmap();
                const service = revocationBitmap.toService(serviceId);
                document.insertService(service);
            }
            document.revokeCredentials("revocation", credentialIndices);
            const aliasId = this.extractAliasId(issuerDocumentId);
            const identity = await identityClient.getIdentity(aliasId);
            const identityOnChain = identity.toFullFledged();
            if (core.Is.undefined(identityOnChain)) {
                throw new core.NotFoundError(this.CLASS_NAME, "identityNotFound", issuerDocumentId);
            }
            const controllerToken = await identityOnChain.getControllerToken(identityClient);
            if (core.Is.empty(controllerToken)) {
                throw new core.GeneralError(this.CLASS_NAME, "missingControllerToken");
            }
            await this.executeDocumentUpdate(controller, identityOnChain, document, controllerToken);
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "revokeVerifiableCredentialsFailed", {
                error: core.BaseError.fromError(error)
            });
        }
    }
    /**
     * Unrevoke verifiable credential(s).
     * @param controller The controller of the identity who can make changes.
     * @param issuerDocumentId The id of the document to update the revocation list for.
     * @param credentialIndices The revocation bitmap index or indices to un revoke.
     * @returns Nothing.
     */
    async unrevokeVerifiableCredentials(controller, issuerDocumentId, credentialIndices) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "issuerDocumentId", issuerDocumentId);
        core.Guards.array(this.CLASS_NAME, "credentialIndices", credentialIndices);
        try {
            const identityClient = await this.getIdentityClient(controller);
            const document = await identityClient.resolveDid(index_js.IotaDID.parse(issuerDocumentId));
            if (core.Is.undefined(document)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", issuerDocumentId);
            }
            const serviceId = `${document.id().toString()}#revocation`;
            const revocationService = document.service().find(s => s.id().toString() === serviceId);
            if (core.Is.undefined(revocationService)) {
                throw new core.NotFoundError(this.CLASS_NAME, "revocationServiceNotFound", serviceId);
            }
            document.unrevokeCredentials("revocation", credentialIndices);
            const aliasId = this.extractAliasId(issuerDocumentId);
            const identity = await identityClient.getIdentity(aliasId);
            const identityOnChain = identity.toFullFledged();
            if (core.Is.undefined(identityOnChain)) {
                throw new core.NotFoundError(this.CLASS_NAME, "identityNotFound", issuerDocumentId);
            }
            const controllerToken = await identityOnChain.getControllerToken(identityClient);
            if (core.Is.empty(controllerToken)) {
                throw new core.GeneralError(this.CLASS_NAME, "missingControllerToken");
            }
            await this.executeDocumentUpdate(controller, identityOnChain, document, controllerToken);
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "unrevokeVerifiableCredentialsFailed", {
                error: core.BaseError.fromError(error)
            });
        }
    }
    /**
     * Create a verifiable presentation from the supplied verifiable credentials.
     * @param controller The controller of the identity who can make changes.
     * @param verificationMethodId The method to associate with the presentation.
     * @param presentationId The id of the presentation.
     * @param contexts The contexts for the data stored in the verifiable credential.
     * @param types The types for the data stored in the verifiable credential.
     * @param verifiableCredentials The credentials to use for creating the presentation in jwt format.
     * @param expiresInMinutes The time in minutes for the presentation to expire.
     * @returns The created verifiable presentation and its token.
     * @throws NotFoundError if the id can not be resolved.
     */
    async createVerifiablePresentation(controller, verificationMethodId, presentationId, contexts, types, verifiableCredentials, expiresInMinutes) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "verificationMethodId", verificationMethodId);
        if (core.Is.array(types)) {
            core.Guards.arrayValue(this.CLASS_NAME, "types", types);
        }
        else if (core.Is.string(types)) {
            core.Guards.stringValue(this.CLASS_NAME, "types", types);
        }
        core.Guards.arrayValue(this.CLASS_NAME, "verifiableCredentials", verifiableCredentials);
        if (!core.Is.undefined(expiresInMinutes)) {
            core.Guards.integer(this.CLASS_NAME, "expiresInMinutes", expiresInMinutes);
        }
        try {
            const idParts = identityModels.DocumentHelper.parseId(verificationMethodId);
            if (core.Is.empty(idParts.fragment)) {
                throw new core.NotFoundError(this.CLASS_NAME, "missingDid", verificationMethodId);
            }
            const identityClient = await this.getIdentityClient(controller);
            const issuerDocument = await identityClient.resolveDid(index_js.IotaDID.parse(idParts.id));
            if (core.Is.undefined(issuerDocument)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", idParts.id);
            }
            const methods = issuerDocument.methods();
            const method = methods.find(m => m.id().toString() === verificationMethodId);
            if (!method) {
                throw new core.GeneralError(this.CLASS_NAME, "methodMissing", { method: verificationMethodId });
            }
            const didMethod = method.toJSON();
            if (core.Is.undefined(didMethod.publicKeyJwk)) {
                throw new core.GeneralError(this.CLASS_NAME, "publicKeyJwkMethodMissing", {
                    method: verificationMethodId
                });
            }
            const finalTypes = [];
            if (core.Is.array(types)) {
                finalTypes.push(...types);
            }
            else if (core.Is.stringValue(types)) {
                finalTypes.push(types);
            }
            const credentials = [];
            for (const cred of verifiableCredentials) {
                if (core.Is.stringValue(cred)) {
                    credentials.push(cred);
                }
                else {
                    credentials.push(new index_js.Credential(cred));
                }
            }
            const unsignedVp = new index_js.Presentation({
                context: contexts,
                id: presentationId,
                verifiableCredential: credentials,
                type: finalTypes,
                holder: idParts.id
            });
            const verificationMethodKey = await this._vaultConnector.getKey(`${controller}/${idParts.fragment}`);
            if (core.Is.undefined(verificationMethodKey)) {
                throw new core.GeneralError(this.CLASS_NAME, "verificationKeyMissing", {
                    method: verificationMethodId
                });
            }
            const jwkParams = {
                alg: didMethod.publicKeyJwk.alg,
                kty: didMethod.publicKeyJwk.kty,
                crv: didMethod.publicKeyJwk.crv,
                x: didMethod.publicKeyJwk.x,
                d: core.Converter.bytesToBase64Url(verificationMethodKey.privateKey)
            };
            const jwkMemStore = new index_js.JwkMemStore();
            const jwk = new index_js.Jwk(jwkParams);
            const publicKeyJwk = jwk.toPublic();
            if (!publicKeyJwk) {
                throw new core.GeneralError(this.CLASS_NAME, "publicKeyJwkMissing", {
                    jwk: jwk.kid()
                });
            }
            const keyId = await jwkMemStore.insert(jwk);
            const keyIdMemStore = new index_js.KeyIdMemStore();
            const methodDigest = new index_js.MethodDigest(method);
            await keyIdMemStore.insertKeyId(methodDigest, keyId);
            const expirationDate = core.Is.integer(expiresInMinutes) && expiresInMinutes > 0
                ? index_js.Timestamp.nowUTC().checkedAdd(index_js.Duration.minutes(expiresInMinutes))
                : undefined;
            const storage = new index_js.Storage(jwkMemStore, keyIdMemStore);
            const presentationJwt = await issuerDocument.createPresentationJwt(storage, `#${method.id().fragment()?.toString()}`, unsignedVp, new index_js.JwsSignatureOptions(), new index_js.JwtPresentationOptions({ expirationDate }));
            const validatedCredential = new index_js.JwtPresentationValidator(new index_js.EdDSAJwsVerifier());
            const decoded = validatedCredential.validate(presentationJwt, issuerDocument, new index_js.JwtPresentationValidationOptions());
            return {
                verifiablePresentation: decoded.presentation().toJSON(),
                jwt: presentationJwt.toString()
            };
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "createVerifiablePresentationFailed", undefined, dltIota.Iota.extractPayloadError(error));
        }
    }
    /**
     * Check a verifiable presentation is valid.
     * @param presentationJwt The presentation to verify.
     * @returns The presentation stored in the jwt and the revocation status.
     */
    async checkVerifiablePresentation(presentationJwt) {
        core.Guards.stringValue(this.CLASS_NAME, "presentationJwt", presentationJwt);
        try {
            const identityClientReadOnly = await index_js.IdentityClientReadOnly.create(new client.IotaClient(this._config.clientOptions));
            const resolver = new index_js.Resolver({ client: identityClientReadOnly });
            const jwt = new index_js.Jwt(presentationJwt);
            const holderId = index_js.JwtPresentationValidator.extractHolder(jwt);
            const holderDocument = await resolver.resolve(holderId.toString());
            if (core.Is.undefined(holderDocument)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", holderId.toString());
            }
            const validatedCredential = new index_js.JwtPresentationValidator(new index_js.EdDSAJwsVerifier());
            const decoded = validatedCredential.validate(jwt, holderDocument, new index_js.JwtPresentationValidationOptions());
            const presentation = decoded.presentation();
            const credentialValidator = new index_js.JwtCredentialValidator(new index_js.EdDSAJwsVerifier());
            const validationOptions = new index_js.JwtCredentialValidationOptions({
                subjectHolderRelationship: [holderId.toString(), index_js.SubjectHolderRelationship.AlwaysSubject]
            });
            const jwtCredentials = decoded
                .presentation()
                .verifiableCredential()
                .map(credential => {
                const jwtCredential = credential.tryIntoJwt();
                if (jwtCredential) {
                    return jwtCredential;
                }
                return null;
            })
                .filter(Boolean);
            const issuers = [];
            for (const jwtCredential of jwtCredentials) {
                const issuer = index_js.JwtCredentialValidator.extractIssuerFromJwt(jwtCredential);
                issuers.push(issuer.toString());
            }
            const resolvedIssuers = await resolver.resolveMultiple(issuers);
            for (let i = 0; i < jwtCredentials.length; i++) {
                credentialValidator.validate(jwtCredentials[i], resolvedIssuers[i], validationOptions, index_js.FailFast.FirstError);
            }
            const jsonIssuers = [];
            for (let issuer of resolvedIssuers) {
                if (!("toJSON" in issuer)) {
                    issuer = issuer.toCoreDocument();
                }
                jsonIssuers.push(issuer.toJSON());
            }
            return {
                revoked: false,
                verifiablePresentation: presentation.toJSON(),
                issuers: jsonIssuers
            };
        }
        catch (error) {
            if (error instanceof Error && error.message.toLowerCase().includes("revoked")) {
                return {
                    revoked: true
                };
            }
            throw new core.GeneralError(this.CLASS_NAME, "checkingVerifiablePresentationFailed", undefined, dltIota.Iota.extractPayloadError(error));
        }
    }
    /**
     * Create a proof for arbitrary data with the specified verification method.
     * @param controller The controller of the identity who can make changes.
     * @param verificationMethodId The verification method id to use.
     * @param proofType The type of proof to create.
     * @param unsecureDocument The unsecure document to create the proof for.
     * @returns The proof.
     */
    async createProof(controller, verificationMethodId, proofType, unsecureDocument) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.stringValue(this.CLASS_NAME, "verificationMethodId", verificationMethodId);
        core.Guards.arrayOneOf(this.CLASS_NAME, "proofType", proofType, Object.values(standardsW3cDid.ProofTypes));
        core.Guards.object(this.CLASS_NAME, "unsecureDocument", unsecureDocument);
        try {
            const idParts = identityModels.DocumentHelper.parseId(verificationMethodId);
            if (core.Is.empty(idParts.fragment)) {
                throw new core.NotFoundError(this.CLASS_NAME, "missingDid", verificationMethodId);
            }
            const identityClient = await this.getIdentityClient(controller);
            const document = await identityClient.resolveDid(index_js.IotaDID.parse(idParts.id));
            if (core.Is.undefined(document)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", idParts.id);
            }
            const methods = document.methods();
            const method = methods.find(m => m.id().toString() === verificationMethodId);
            if (!method) {
                throw new core.GeneralError(this.CLASS_NAME, "methodMissing", { method: verificationMethodId });
            }
            const keyId = `${controller}/${idParts.fragment}`;
            const verificationMethodKey = await this._vaultConnector.getKey(keyId);
            if (core.Is.undefined(verificationMethodKey)) {
                throw new core.GeneralError(this.CLASS_NAME, "privateKeyMissing", { keyId });
            }
            const unsignedProof = standardsW3cDid.ProofHelper.createUnsignedProof(proofType, verificationMethodId);
            const jwk = await web.Jwk.fromEd25519Private(verificationMethodKey.privateKey);
            const signedProof = await standardsW3cDid.ProofHelper.createProof(proofType, unsecureDocument, unsignedProof, jwk);
            return signedProof;
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "createProofFailed", { controller, verificationMethodId, proofType }, dltIota.Iota.extractPayloadError(error));
        }
    }
    /**
     * Verify proof for arbitrary data with the specified verification method.
     * @param document The document to verify.
     * @param proof The proof to verify.
     * @returns True if the proof is verified.
     */
    async verifyProof(document, proof) {
        core.Guards.object(this.CLASS_NAME, "document", document);
        core.Guards.object(this.CLASS_NAME, "proof", proof);
        core.Guards.stringValue(this.CLASS_NAME, "proof.verificationMethod", proof.verificationMethod);
        try {
            const idParts = identityModels.DocumentHelper.parseId(proof.verificationMethod);
            if (core.Is.empty(idParts.fragment)) {
                throw new core.NotFoundError(this.CLASS_NAME, "missingDid", proof.verificationMethod);
            }
            const identityClient = await this.getIdentityClient();
            const resolvedDocument = await identityClient.resolveDid(index_js.IotaDID.parse(idParts.id));
            if (core.Is.undefined(resolvedDocument)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", idParts.id);
            }
            const methods = resolvedDocument.methods();
            const method = methods.find(m => m.id().toString() === proof.verificationMethod);
            if (!method) {
                throw new core.GeneralError(this.CLASS_NAME, "methodMissing", {
                    method: proof.verificationMethod
                });
            }
            const didMethod = method.toJSON();
            if (core.Is.undefined(didMethod.publicKeyJwk)) {
                throw new core.GeneralError(this.CLASS_NAME, "publicKeyJwkMethodMissing", {
                    method: proof.verificationMethod
                });
            }
            return standardsW3cDid.ProofHelper.verifyProof(document, proof, didMethod.publicKeyJwk);
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "verifyProofFailed", undefined, dltIota.Iota.extractPayloadError(error));
        }
    }
    /**
     * Get an identity client.
     * @param controller The controller to get the client for.
     * @returns The identity client.
     * @internal
     */
    async getIdentityClient(controller) {
        const identityClientReadOnly = await index_js.IdentityClientReadOnly.create(new client.IotaClient(this._config.clientOptions));
        if (core.Is.undefined(controller)) {
            const jwkMemStore = new index_js.JwkMemStore();
            const keyIdMemStore = new index_js.KeyIdMemStore();
            const storage = new index_js.Storage(jwkMemStore, keyIdMemStore);
            // Create a proper no-op signer with valid but empty keys
            const noOpJwkParams = {
                kty: "OKP" /* JwkType.Okp */,
                crv: "Ed25519",
                alg: "EdDSA" /* JwsAlgorithm.EdDSA */,
                x: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", // Base64 encoded empty 32-byte array
                d: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            };
            const noOpJwk = new index_js.Jwk(noOpJwkParams);
            const signer = new index_js.StorageSigner(storage, "", noOpJwk);
            return index_js.IdentityClient.create(identityClientReadOnly, signer);
        }
        const seed = await dltIota.Iota.getSeed(this._config, this._vaultConnector, controller);
        const kp = dltIota.Iota.getKeyPair(seed, this._config.coinType ?? dltIota.Iota.DEFAULT_COIN_TYPE, 0, this._walletAddressIndex, false);
        const jwkMemStore = new index_js.JwkMemStore();
        const keyIdMemStore = new index_js.KeyIdMemStore();
        const storage = new index_js.Storage(jwkMemStore, keyIdMemStore);
        const jwkParams = {
            kty: "OKP" /* JwkType.Okp */,
            crv: "Ed25519",
            alg: "EdDSA" /* JwsAlgorithm.EdDSA */,
            x: core.Converter.bytesToBase64Url(kp.publicKey),
            d: core.Converter.bytesToBase64Url(kp.privateKey)
        };
        const jwk = new index_js.Jwk(jwkParams);
        const publicKeyJwk = jwk.toPublic();
        if (!publicKeyJwk) {
            throw new core.GeneralError(this.CLASS_NAME, "publicKeyJwkMissing", {
                jwk: jwk.kid()
            });
        }
        const keyId = await jwkMemStore.insert(jwk);
        const signer = new index_js.StorageSigner(storage, keyId, publicKeyJwk);
        return index_js.IdentityClient.create(identityClientReadOnly, signer);
    }
    /**
     * Get the IOTA client for transaction operations.
     * @returns The IOTA client.
     * @internal
     */
    getIotaClient() {
        return dltIota.Iota.createClient(this._config);
    }
    /**
     * Extract DID from execution result, handling both regular and gas station transaction formats.
     * @param executionResult The transaction execution result.
     * @param networkHrp The network HRP for DID construction.
     * @returns The extracted DID.
     * @throws GeneralError if the execution result format is unexpected.
     * @internal
     */
    extractDidFromExecutionResult(executionResult, networkHrp) {
        if (core.Is.function(executionResult.output?.didDocument)) {
            return executionResult.output.didDocument().id();
        }
        if (core.Is.arrayValue(executionResult.response?.objectChanges)) {
            const resultNetworkHrp = core.ObjectHelper.propertyGet(executionResult, "networkHrp");
            const did = this.tryExtractDidFromObjectChanges(executionResult.response.objectChanges, resultNetworkHrp ?? networkHrp);
            if (did) {
                return did;
            }
        }
        throw new core.GeneralError(this.CLASS_NAME, "didExtractionFailed", {
            resultType: typeof executionResult,
            availableKeys: Object.keys(executionResult ?? {}),
            hasOutput: core.Is.object(executionResult.output),
            hasResponse: core.Is.object(executionResult.response),
            hasObjectChanges: core.Is.arrayValue(executionResult.response?.objectChanges),
            gasStationConfig: core.Is.object(this._config.gasStation)
        });
    }
    /**
     * Attempts to extract DID from transaction object changes.
     * @param objectChanges The object changes from the transaction response.
     * @param transactionDigest The transaction digest for logging.
     * @returns The DID if found, undefined otherwise.
     * @internal
     */
    tryExtractDidFromObjectChanges(objectChanges, networkHrp) {
        const identityObject = objectChanges.find(change => {
            if (!core.Is.object(change)) {
                return false;
            }
            const changeType = core.ObjectHelper.propertyGet(change, "type");
            const objectType = core.ObjectHelper.propertyGet(change, "objectType");
            if (changeType === "created" &&
                core.Is.stringValue(objectType) &&
                objectType.includes("::identity::Identity")) {
                return true;
            }
            return false;
        });
        if (core.Is.object(identityObject)) {
            const objectId = core.ObjectHelper.propertyGet(identityObject, "objectId");
            if (core.Is.stringValue(objectId)) {
                if (core.Is.stringValue(networkHrp)) {
                    return this.constructDid(networkHrp, objectId);
                }
                return index_js.IotaDID.parse(`did:iota:${objectId}`);
            }
        }
        return undefined;
    }
    /**
     * Constructs a DID following the IOTA DID Method Specification v2.0.
     * For mainnet, omits network identifier (canonical format).
     * For testnet/devnet, includes network identifier.
     * @param networkHrp The network HRP.
     * @param objectId The object ID.
     * @returns The constructed DID.
     * @internal
     */
    constructDid(networkHrp, objectId) {
        if (networkHrp === NetworkConstants.MAINNET_NETWORK_ID) {
            return index_js.IotaDID.parse(`did:iota:${objectId}`);
        }
        return index_js.IotaDID.parse(`did:iota:${networkHrp}:${objectId}`);
    }
    /**
     * Extract alias id from document id.
     * @param documentId The id of the document.
     * @returns The alias id.
     * @internal
     */
    extractAliasId(documentId) {
        const didUrn = core.Urn.fromValidString(documentId);
        const didParts = didUrn.parts();
        return didParts[didParts.length - 1];
    }
    /**
     * Execute identity transaction with conditional gas station support.
     * @param controller The controller identity.
     * @param transactionBuilder The finished transaction builder from createIdentity().finish().
     * @returns The execution result.
     * @internal
     */
    async executeIdentityTransaction(controller, transactionBuilder) {
        if (core.Is.object(this._config.gasStation)) {
            return this.executeIdentityTransactionWithGasStation(controller, transactionBuilder);
        }
        const identityClient = await this.getIdentityClient(controller);
        const buildResult = await transactionBuilder.build(identityClient);
        if (core.Is.arrayValue(buildResult) && buildResult.length === 3 && core.Is.uint8Array(buildResult[0])) {
            const [txBytes, signatures, createIdentity] = buildResult;
            if (core.Is.arrayValue(signatures)) {
                const iotaClient = this.getIotaClient();
                const txResponse = await iotaClient.executeTransactionBlock({
                    transactionBlock: txBytes,
                    signature: signatures,
                    options: {
                        showEffects: true,
                        showEvents: true,
                        showObjectChanges: true
                    }
                });
                const confirmedTx = await dltIota.Iota.waitForTransactionConfirmation(iotaClient, txResponse.digest, this._config);
                if (!confirmedTx) {
                    throw new core.GeneralError(this.CLASS_NAME, "transactionConfirmationTimeout", undefined, txResponse.digest);
                }
                const result = {
                    output: createIdentity,
                    response: txResponse,
                    networkHrp: identityClient.network()
                };
                return result;
            }
        }
        throw new core.GeneralError(this.CLASS_NAME, "transactionBuildFailed", {
            buildResultType: typeof buildResult,
            isArray: core.Is.arrayValue(buildResult),
            length: core.Is.arrayValue(buildResult) ? buildResult.length : 0,
            hasUint8Array: core.Is.arrayValue(buildResult) && core.Is.uint8Array(buildResult[0])
        }, dltIota.Iota.extractPayloadError(buildResult));
    }
    /**
     * Execute identity transaction with gas station sponsoring.
     * @param controller The controller identity.
     * @param transactionBuilder The finished transaction builder.
     * @returns The execution result.
     * @internal
     */
    async executeIdentityTransactionWithGasStation(controller, transactionBuilder) {
        return this.executeGasStationTransaction(controller, transactionBuilder, "identity");
    }
    /**
     * Get user address for the given controller.
     * @param controller The controller to get the address for.
     * @returns The user address.
     * @internal
     */
    async getUserAddress(controller) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        const seed = await dltIota.Iota.getSeed(this._config, this._vaultConnector, controller);
        const addresses = dltIota.Iota.getAddresses(seed, this._config.coinType ?? dltIota.Iota.DEFAULT_COIN_TYPE, 0, this._walletAddressIndex, 1, false);
        return addresses[0];
    }
    /**
     * Execute document update transaction with conditional gas station support.
     * @param controller The controller identity.
     * @param identityOnChain The on-chain identity to update.
     * @param document The document to update.
     * @param controllerToken The controller token.
     * @returns The execution result.
     * @internal
     */
    async executeDocumentUpdate(controller, identityOnChain, document, controllerToken) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.object(this.CLASS_NAME, "identityOnChain", identityOnChain);
        core.Guards.object(this.CLASS_NAME, "document", document);
        core.Guards.object(this.CLASS_NAME, "controllerToken", controllerToken);
        const updateBuilder = identityOnChain
            .updateDidDocument(document.clone(), controllerToken)
            .withGasBudget(BigInt(this._gasBudget));
        if (core.Is.object(this._config.gasStation)) {
            return this.executeDocumentUpdateWithGasStation(controller, updateBuilder);
        }
        const identityClient = await this.getIdentityClient(controller);
        return updateBuilder.buildAndExecute(identityClient);
    }
    /**
     * Execute document update transaction with gas station sponsoring.
     * @param controller The controller identity.
     * @param updateBuilder The document update builder.
     * @returns The execution result.
     * @internal
     */
    async executeDocumentUpdateWithGasStation(controller, updateBuilder) {
        return this.executeGasStationTransaction(controller, updateBuilder, "update");
    }
    /**
     * Execute a transaction with gas station sponsoring (consolidated method).
     * @param controller The controller identity.
     * @param builder The transaction builder (either finished identity builder or update builder).
     * @param operationType The type of operation for error messaging and result formatting.
     * @returns The execution result.
     * @internal
     */
    async executeGasStationTransaction(controller, builder, operationType) {
        core.Guards.stringValue(this.CLASS_NAME, "controller", controller);
        core.Guards.object(this.CLASS_NAME, "builder", builder);
        try {
            const identityClient = await this.getIdentityClient(controller);
            // Get user address for gas station, as the user remains the sender
            const userAddress = await this.getUserAddress(controller);
            const gasReservation = await dltIota.Iota.reserveGas(this._config, this._gasBudget);
            const gasCoinsWithStringVersions = gasReservation.gasCoins.map(coin => ({
                objectId: coin.objectId,
                version: String(coin.version),
                digest: coin.digest
            }));
            const gasConfiguredBuilder = builder
                .withSender(userAddress)
                .withGasBudget(BigInt(this._gasBudget))
                .withGasOwner(gasReservation.sponsorAddress)
                .withGasPayment(gasCoinsWithStringVersions)
                .withGasPrice(this._standardGasPrice);
            const buildResult = await gasConfiguredBuilder.build(identityClient);
            if (core.Is.arrayValue(buildResult) && buildResult.length === 3 && core.Is.uint8Array(buildResult[0])) {
                const [txBytes, signatures] = buildResult;
                const iotaClient = this.getIotaClient();
                const confirmedResponse = await dltIota.Iota.executeAndConfirmGasStationTransaction(this._config, iotaClient, gasReservation.reservationId, txBytes, signatures[0], {
                    waitForConfirmation: true,
                    showEffects: true,
                    showEvents: true,
                    showObjectChanges: true
                });
                if (operationType === "identity") {
                    // For identity creation, include the output and network HRP
                    const createIdentity = buildResult[2];
                    const result = {
                        output: createIdentity,
                        response: confirmedResponse,
                        networkHrp: identityClient.network()
                    };
                    return result;
                }
                return confirmedResponse;
            }
            throw new core.GeneralError(this.CLASS_NAME, "gasStationTransactionBuildFailed", {
                buildResultType: typeof buildResult,
                isArray: core.Is.arrayValue(buildResult),
                length: core.Is.arrayValue(buildResult) ? buildResult.length : 0
            }, dltIota.Iota.extractPayloadError(buildResult));
        }
        catch (error) {
            const errorMessage = operationType === "identity"
                ? "gasStationTransactionFailed"
                : "gasStationDocumentUpdateFailed";
            throw new core.GeneralError(this.CLASS_NAME, errorMessage, undefined, dltIota.Iota.extractPayloadError(error));
        }
    }
}

// Copyright 2024 IOTA Stiftung.
// SPDX-License-Identifier: Apache-2.0.
/**
 * Class for performing identity operations on IOTA.
 */
class IotaIdentityResolverConnector {
    /**
     * The namespace supported by the identity connector.
     */
    static NAMESPACE = "iota";
    /**
     * Runtime name for the class.
     */
    CLASS_NAME = "IotaIdentityResolverConnector";
    /**
     * The configuration to use for IOTA operations.
     * @internal
     */
    _config;
    /**
     * Create a new instance of IotaIdentityResolverConnector.
     * @param options The options for the identity connector.
     */
    constructor(options) {
        core.Guards.object(this.CLASS_NAME, "options", options);
        core.Guards.object(this.CLASS_NAME, "options.config", options.config);
        core.Guards.object(this.CLASS_NAME, "options.config.clientOptions", options.config.clientOptions);
        this._config = options.config;
    }
    /**
     * Resolve a document from its id.
     * @param documentId The id of the document to resolve.
     * @returns The resolved document.
     * @throws NotFoundError if the id can not be resolved.
     */
    async resolveDocument(documentId) {
        core.Guards.stringValue(this.CLASS_NAME, "documentId", documentId);
        try {
            const identityClientReadOnly = await index_js.IdentityClientReadOnly.create(new client.IotaClient(this._config.clientOptions));
            const resolver = new index_js.Resolver({
                client: identityClientReadOnly
            });
            const resolvedDocument = await resolver.resolve(documentId);
            if (core.Is.undefined(resolvedDocument)) {
                throw new core.NotFoundError(this.CLASS_NAME, "documentNotFound", documentId);
            }
            const doc = resolvedDocument.toJSON();
            return doc.doc;
        }
        catch (error) {
            throw new core.GeneralError(this.CLASS_NAME, "resolveDocumentFailed", { documentId }, dltIota.Iota.extractPayloadError(error));
        }
    }
}

exports.IotaIdentityConnector = IotaIdentityConnector;
exports.IotaIdentityResolverConnector = IotaIdentityResolverConnector;

import { type IValidationFailure } from "@twin.org/core";
import { ValidationMode } from "../models/validationMode";
/**
 * Class to help with data types.
 */
export declare class DataTypeHelper {
    /**
     * Validate a data type.
     * @param propertyName The name of the property being validated to use in error messages.
     * @param dataType The data type to validate.
     * @param data The data to validate.
     * @param validationFailures The list of validation failures to add to.
     * @param options Optional options for validation.
     * @param options.failOnMissingType If true, will fail validation if the data type is missing, defaults to false.
     * @param options.validationMode The validation mode to use, defaults to either.
     * @returns True if the data was valid.
     */
    static validate(propertyName: string, dataType: string | undefined, data: unknown, validationFailures: IValidationFailure[], options?: {
        validationMode?: ValidationMode;
        failOnMissingType?: boolean;
    }): Promise<boolean>;
}

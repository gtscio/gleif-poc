import type { IEntitySchema } from "@twin.org/entity";
import type { IJsonSchema } from "../models/IJsonSchema";
import type { ISchemaValidationResult } from "../models/ISchemaValidationResult";
/**
 * A helper for JSON schemas.
 */
export declare class JsonSchemaHelper {
    /**
     * The schema version.
     */
    static readonly SCHEMA_VERSION = "https://json-schema.org/draft/2020-12/schema";
    /**
     * Validates data against the schema.
     * @param schema The schema to validate the data with.
     * @param data The data to be validated.
     * @param additionalTypes Additional types to add for reference, not already in DataTypeHandlerFactory.
     * @returns Result containing errors if there are any.
     */
    static validate<T = unknown>(schema: IJsonSchema, data: T, additionalTypes?: {
        [id: string]: IJsonSchema;
    }): Promise<ISchemaValidationResult>;
    /**
     * Get the property type from a schema.
     * @param schema The schema to extract the types from.
     * @param propertyName The name of the property to get the type for.
     * @returns The types of the property.
     */
    static getPropertyType(schema: IJsonSchema, propertyName: string): string | undefined;
    /**
     * Convert an entity schema to JSON schema e.g https://example.com/schemas/.
     * @param entitySchema The entity schema to convert.
     * @param baseDomain The base domain for local schemas e.g. https://example.com/
     * @returns The JSON schema for the entity.
     */
    static entitySchemaToJsonSchema(entitySchema: IEntitySchema | undefined, baseDomain?: string): IJsonSchema;
}

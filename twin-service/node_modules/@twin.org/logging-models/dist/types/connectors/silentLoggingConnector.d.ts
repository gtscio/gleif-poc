import type { EntityCondition, SortDirection } from "@twin.org/entity";
import type { ILogEntry } from "../models/ILogEntry";
import type { ILoggingConnector } from "../models/ILoggingConnector";
/**
 * Class for performing logging operations to nowhere.
 */
export declare class SilentLoggingConnector implements ILoggingConnector {
    /**
     * The namespace for the logging connector.
     */
    static readonly NAMESPACE: string;
    /**
     * Runtime name for the class.
     */
    readonly CLASS_NAME: string;
    /**
     * Log an entry to the connector.
     * @param logEntry The entry to log.
     * @returns Nothing.
     */
    log(logEntry: ILogEntry): Promise<void>;
    /**
     * Query the log entries.
     * @param conditions The conditions to match for the entities.
     * @param sortProperties The optional sort order.
     * @param properties The optional keys to return, defaults to all.
     * @param cursor The cursor to request the next page of entities.
     * @param pageSize The maximum number of entities in a page.
     * @returns All the entities for the storage matching the conditions,
     * and a cursor which can be used to request more entities.
     */
    query(conditions?: EntityCondition<ILogEntry>, sortProperties?: {
        property: keyof Omit<ILogEntry, "error" | "data">;
        sortDirection: SortDirection;
    }[], properties?: (keyof ILogEntry)[], cursor?: string, pageSize?: number): Promise<{
        /**
         * The entities, which can be partial if a limited keys list was provided.
         */
        entities: Partial<ILogEntry>[];
        /**
         * An optional cursor, when defined can be used to call find to get more entities.
         */
        cursor?: string;
    }>;
}

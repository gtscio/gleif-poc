/**
 * Perform TOTP.
 * Implementation of https://datatracker.ietf.org/doc/html/rfc4226 .
 */
export declare class Totp {
    /**
     * Generate a time based One Time Password.
     * @param key Key for the one time password.
     * @param interval The time step of the counter.
     * @param timestamp The timestamp.
     * @returns The one time password.
     */
    static generate(key: Uint8Array, interval?: number, timestamp?: number): string;
    /**
     * Check a One Time Password based on a timer.
     * @param token Passcode to validate.
     * @param key Key for the one time password. This should be unique and secret for
     * every user as it is the seed used to calculate the HMAC.
     * @param window The allowable margin for the counter.
     * @param interval The time step of the counter.
     * @param timestamp The timestamp now.
     * @returns Undefined if failure, delta on success
     */
    static verify(token: string, key: Uint8Array, window?: number, interval?: number, timestamp?: number): number | undefined;
    /**
     * Generate a secret.
     * @param length The length of the secret to generate.
     * @returns The secret encoded as base32.
     */
    static generateSecret(length: number): string;
    /**
     * Convert the secret back to bytes.
     * @param secretBase32 The secret encoded as base32.
     * @returns The bytes of the secret.
     */
    static secretToBytes(secretBase32: string): Uint8Array;
    /**
     * Generate a url for use with authenticator apps.
     * See https://github.com/google/google-authenticator/wiki/Key-Uri-Format .
     * @param issuer The issuer of the totp.
     * @param label The label that will show in auth apps.
     * @param secretBase32 The secret as base 32.
     * @returns The url.
     */
    static generateAuthUrl(issuer: string, label: string, secretBase32: string): string;
}

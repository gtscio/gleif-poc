import { Bip32Path } from "../keys/bip32Path";
import { KeyType } from "../models/keyType";
/**
 * Implementation of Bip44 for address generation.
 */
export declare class Bip44 {
    /**
     * Generate a bip44 key pair from the seed and parts.
     * @param seed The account seed.
     * @param keyType The key type.
     * @param coinType The coin type.
     * @param accountIndex The account index.
     * @param isInternal Is this an internal address.
     * @param addressIndex The address index.
     * @returns The key pair.
     * @throws Error if the address type is not supported.
     */
    static keyPair(seed: Uint8Array, keyType: KeyType, coinType: number, accountIndex: number, isInternal: boolean, addressIndex: number): {
        privateKey: Uint8Array;
        publicKey: Uint8Array;
    };
    /**
     * Generate a bip44 path based on all its parts.
     * @param coinType The coin type.
     * @param accountIndex The account index.
     * @param isInternal Is this an internal address.
     * @param addressIndex The address index.
     * @returns The generated path.
     */
    static path(coinType: number, accountIndex: number, isInternal: boolean, addressIndex: number): Bip32Path;
    /**
     * Create a bip44 base path for the provided coin type.
     * @param coinType The coin type.
     * @returns The bip44 address base path.
     */
    static basePath(coinType: number): string;
    /**
     * Generate an address from the seed and parts.
     * @param seed The account seed.
     * @param keyType The key type.
     * @param coinType The coin type.
     * @param accountIndex The account index.
     * @param isInternal Is this an internal address.
     * @param addressIndex The address index.
     * @returns The generated path and the associated keypair.
     */
    static address(seed: Uint8Array, keyType: KeyType, coinType: number, accountIndex: number, isInternal: boolean, addressIndex: number): {
        address: string;
        privateKey: Uint8Array;
        publicKey: Uint8Array;
    };
    /**
     * Generate a bech32 address from the seed and parts.
     * @param seed The account seed.
     * @param keyType The key type.
     * @param hrp The human readable part of the address.
     * @param coinType The coin type.
     * @param accountIndex The account index.
     * @param isInternal Is this an internal address.
     * @param addressIndex The address index.
     * @returns The generated path and the associated keypair.
     */
    static addressBech32(seed: Uint8Array, keyType: KeyType, hrp: string, coinType: number, accountIndex: number, isInternal: boolean, addressIndex: number): {
        address: string;
        privateKey: Uint8Array;
        publicKey: Uint8Array;
    };
}

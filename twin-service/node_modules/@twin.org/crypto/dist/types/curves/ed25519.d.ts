/**
 * Implementation of Ed25519.
 */
export declare class Ed25519 {
    /**
     * Private Key Size is the size, in bytes, of private keys as used in this package.
     */
    static PRIVATE_KEY_SIZE: number;
    /**
     * Public Key Size is the size, in bytes, of public keys as used in this package.
     */
    static PUBLIC_KEY_SIZE: number;
    /**
     * Public returns the PublicKey corresponding to private.
     * @param privateKey The private key to get the corresponding public key.
     * @returns The public key.
     * @throws Error if the private key is not the correct length.
     */
    static publicKeyFromPrivateKey(privateKey: Uint8Array): Uint8Array;
    /**
     * Sign the block with privateKey and returns a signature.
     * @param privateKey The private key.
     * @param block The block to sign.
     * @returns The signature.
     * @throws Error if the private key is not the correct length.
     */
    static sign(privateKey: Uint8Array, block: Uint8Array): Uint8Array;
    /**
     * Verify reports whether sig is a valid signature of block by publicKey.
     * @param publicKey The public key to verify the signature.
     * @param block The block for the signature.
     * @param signature The signature.
     * @returns True if the signature matches.
     * @throws Error if the public key is not the correct length.
     */
    static verify(publicKey: Uint8Array, block: Uint8Array, signature: Uint8Array): boolean;
    /**
     * Convert a private key in PKCS8 format.
     * @param privateKey The private key to convert.
     * @returns The private key in PKCS8 format.
     */
    static privateKeyToPkcs8(privateKey: Uint8Array): Promise<CryptoKey>;
    /**
     * Convert a crypto key to raw private key.
     * @param cryptoKey The crypto key to convert.
     * @returns The raw private key.
     */
    static pkcs8ToPrivateKey(cryptoKey: CryptoKey): Promise<Uint8Array>;
}

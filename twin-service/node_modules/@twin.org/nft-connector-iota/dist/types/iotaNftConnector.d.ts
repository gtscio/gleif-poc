import type { INftConnector } from "@twin.org/nft-models";
import type { IIotaNftConnectorConstructorOptions } from "./models/IIotaNftConnectorConstructorOptions";
/**
 * Class for performing NFT operations on IOTA.
 */
export declare class IotaNftConnector implements INftConnector {
    /**
     * The namespace supported by the nft connector.
     */
    static readonly NAMESPACE: string;
    /**
     * Runtime name for the class.
     */
    readonly CLASS_NAME: string;
    /**
     * Create a new instance of IotaNftConnector.
     * @param options The options for the connector.
     */
    constructor(options: IIotaNftConnectorConstructorOptions);
    /**
     * Bootstrap the NFT contract.
     * @param nodeIdentity The identity of the node.
     * @param nodeLoggingConnectorType The node logging connector type, defaults to "node-logging".
     * @param componentState The component state.
     * @param componentState.contractDeployments The contract deployments.
     * @returns void.
     */
    start(nodeIdentity: string, nodeLoggingConnectorType?: string, componentState?: {
        contractDeployments?: {
            [id: string]: string;
        };
    }): Promise<void>;
    /**
     * Mint an NFT.
     * @param controllerIdentity The identity of the user to access the vault keys.
     * @param tag The tag for the NFT.
     * @param immutableMetadata The immutable metadata for the NFT.
     * @param metadata The metadata for the NFT.
     * @returns The id of the created NFT in urn format.
     */
    mint<T = unknown, U = unknown>(controllerIdentity: string, tag: string, immutableMetadata?: T, metadata?: U): Promise<string>;
    /**
     * Resolve an NFT to get its details.
     * @param nftId The id of the NFT to resolve.
     * @returns The NFT details.
     */
    resolve<T = unknown, U = unknown>(nftId: string): Promise<{
        issuer: string;
        owner: string;
        tag: string;
        immutableMetadata?: T;
        metadata?: U;
    }>;
    /**
     * Burn an NFT.
     * @param controllerIdentity The controller of the NFT who can make changes.
     * @param id The id of the NFT to burn in urn format.
     * @returns void.
     */
    burn(controllerIdentity: string, id: string): Promise<void>;
    /**
     * Transfer an NFT to a new owner.
     * @param controller The identity of the user to access the vault keys.
     * @param nftId The id of the NFT to transfer.
     * @param recipientIdentity The recipient identity for the NFT.
     * @param recipientAddress The recipient address for the NFT.
     * @param metadata Optional metadata to update during transfer.
     * @returns void.
     */
    transfer<U = unknown>(controller: string, nftId: string, recipientIdentity: string, recipientAddress: string, metadata?: U): Promise<void>;
    /**
     * Update the mutable data of an NFT.
     * @param controllerIdentity The controller of the NFT who can make changes.
     * @param id The id of the NFT to update in urn format.
     * @param metadata The new metadata for the NFT.
     * @returns void.
     */
    update<U = unknown>(controllerIdentity: string, id: string, metadata: U): Promise<void>;
}

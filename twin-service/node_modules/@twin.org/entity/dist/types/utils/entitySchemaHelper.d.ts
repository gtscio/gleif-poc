import type { IEntitySchema } from "../models/IEntitySchema";
import type { IEntitySchemaProperty } from "../models/IEntitySchemaProperty";
import type { IEntitySort } from "../models/IEntitySort";
import type { SortDirection } from "../models/sortDirection";
/**
 * Class to help with entity schema operations.
 */
export declare class EntitySchemaHelper {
    /**
     * Get the schema for the specified object.
     * @param target The object to get the schema data for.
     * @returns The schema for the object if it can be found.
     */
    static getSchema<T = unknown>(target: any): IEntitySchema<T>;
    /**
     * Get the primary key from the entity schema.
     * @param entitySchema The entity schema to find the primary key from.
     * @returns The key if only one was found.
     * @throws If no primary key was found, or more than one.
     */
    static getPrimaryKey<T>(entitySchema: IEntitySchema<T>): IEntitySchemaProperty<T>;
    /**
     * Get the sort properties from the schema.
     * @param entitySchema The entity schema to find the primary key from.
     * @returns The sort keys from the schema or undefined if there are none.
     */
    static getSortProperties<T>(entitySchema: IEntitySchema<T>): IEntitySort<T>[] | undefined;
    /**
     * Build sort properties from the schema and override if necessary.
     * @param entitySchema The entity schema to retrieve the default sort keys.
     * @param overrideSortKeys The override sort keys.
     * @returns The finalised sort keys.
     */
    static buildSortProperties<T>(entitySchema: IEntitySchema<T>, overrideSortKeys?: {
        property: keyof T;
        sortDirection: SortDirection;
    }[]): IEntitySort<T>[] | undefined;
    /**
     * Validate the entity against the schema.
     * @param entity The entity to validate.
     * @param entitySchema The schema to validate against.
     * @throws If the entity is invalid.
     */
    static validateEntity<T>(entity: T, entitySchema: IEntitySchema<T>): void;
}

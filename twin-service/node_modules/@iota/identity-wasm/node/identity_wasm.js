
if (!globalThis.fetch) {
    const fetch = require('node-fetch')
    globalThis.Headers = fetch.Headers
    globalThis.Request = fetch.Request
    globalThis.Response = fetch.Response
    globalThis.fetch = fetch
}
let imports = {};
imports['__wbindgen_placeholder__'] = module.exports;
let wasm;
const { WasmIotaTransactionBlockResponseWrapper } = require(`@iota/iota-interaction-ts/node/iota_client_helpers`);
const { Ed25519PublicKey } = require(`@iota/iota-sdk/keypairs/ed25519`);
const { Secp256k1PublicKey } = require(`@iota/iota-sdk/keypairs/secp256k1`);
const { Secp256r1PublicKey } = require(`@iota/iota-sdk/keypairs/secp256r1`);
const { TransactionDataBuilder } = require(`@iota/iota-sdk/transactions`);
const { execSync } = require(`child_process`);
const { TextEncoder, TextDecoder, inspect } = require(`util`);

let WASM_VECTOR_LEN = 0;

let cachedUint8ArrayMemory0 = null;

function getUint8ArrayMemory0() {
    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8ArrayMemory0;
}

let cachedTextEncoder = new TextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length, 1) >>> 0;
        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len, 1) >>> 0;

    const mem = getUint8ArrayMemory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
        ptr = realloc(ptr, len, offset, 1) >>> 0;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

let cachedDataViewMemory0 = null;

function getDataViewMemory0() {
    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {
        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);
    }
    return cachedDataViewMemory0;
}

function addToExternrefTable0(obj) {
    const idx = wasm.__externref_table_alloc();
    wasm.__wbindgen_export_4.set(idx, obj);
    return idx;
}

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        const idx = addToExternrefTable0(e);
        wasm.__wbindgen_exn_store(idx);
    }
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
}

function getArrayU8FromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);
}

function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1, 1) >>> 0;
    getUint8ArrayMemory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
}

function passArrayJsValueToWasm0(array, malloc) {
    const ptr = malloc(array.length * 4, 4) >>> 0;
    for (let i = 0; i < array.length; i++) {
        const add = addToExternrefTable0(array[i]);
        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);
    }
    WASM_VECTOR_LEN = array.length;
    return ptr;
}

const CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(state => {
    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)
});

function makeMutClosure(arg0, arg1, dtor, f) {
    const state = { a: arg0, b: arg1, cnt: 1, dtor };
    const real = (...args) => {
        // First up with a closure we increment the internal reference
        // count. This ensures that the Rust closure environment won't
        // be deallocated while we're invoking it.
        state.cnt++;
        const a = state.a;
        state.a = 0;
        try {
            return f(a, state.b, ...args);
        } finally {
            if (--state.cnt === 0) {
                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);
                CLOSURE_DTORS.unregister(state);
            } else {
                state.a = a;
            }
        }
    };
    real.original = state;
    CLOSURE_DTORS.register(real, state, state);
    return real;
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches && builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

function takeFromExternrefTable0(idx) {
    const value = wasm.__wbindgen_export_4.get(idx);
    wasm.__externref_table_dealloc(idx);
    return value;
}

function getArrayJsValueFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    const mem = getDataViewMemory0();
    const result = [];
    for (let i = ptr; i < ptr + 4 * len; i += 4) {
        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));
    }
    wasm.__externref_drop_slice(ptr, len);
    return result;
}
/**
 * @param {string} resource
 * @returns {string | undefined}
 */
module.exports.vctToUrl = function(resource) {
    const ptr0 = passStringToWasm0(resource, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = wasm.vctToUrl(ptr0, len0);
    let v2;
    if (ret[0] !== 0) {
        v2 = getStringFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
    }
    return v2;
};

/**
 * Initializes the console error panic hook for better error messages
 */
module.exports.start = function() {
    wasm.start();
};

let cachedUint32ArrayMemory0 = null;

function getUint32ArrayMemory0() {
    if (cachedUint32ArrayMemory0 === null || cachedUint32ArrayMemory0.byteLength === 0) {
        cachedUint32ArrayMemory0 = new Uint32Array(wasm.memory.buffer);
    }
    return cachedUint32ArrayMemory0;
}

function getArrayU32FromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return getUint32ArrayMemory0().subarray(ptr / 4, ptr / 4 + len);
}
/**
 * Verify a JWS signature secured with the `EdDSA` algorithm and curve `Ed25519`.
 *
 * This function is useful when one is composing a `IJwsVerifier` that delegates
 * `EdDSA` verification with curve `Ed25519` to this function.
 *
 * # Warning
 *
 * This function does not check whether `alg = EdDSA` in the protected header. Callers are expected to assert this
 * prior to calling the function.
 * @param {JwsAlgorithm} alg
 * @param {Uint8Array} signingInput
 * @param {Uint8Array} decodedSignature
 * @param {Jwk} publicKey
 */
module.exports.verifyEd25519 = function(alg, signingInput, decodedSignature, publicKey) {
    const ptr0 = passArray8ToWasm0(signingInput, wasm.__wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passArray8ToWasm0(decodedSignature, wasm.__wbindgen_malloc);
    const len1 = WASM_VECTOR_LEN;
    _assertClass(publicKey, Jwk);
    const ret = wasm.verifyEd25519(alg, ptr0, len0, ptr1, len1, publicKey.__wbg_ptr);
    if (ret[1]) {
        throw takeFromExternrefTable0(ret[0]);
    }
};

/**
 * Encode the given bytes in url-safe base64.
 * @param {Uint8Array} data
 * @returns {string}
 */
module.exports.encodeB64 = function(data) {
    let deferred2_0;
    let deferred2_1;
    try {
        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.encodeB64(ptr0, len0);
        deferred2_0 = ret[0];
        deferred2_1 = ret[1];
        return getStringFromWasm0(ret[0], ret[1]);
    } finally {
        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
    }
};

/**
 * Decode the given url-safe base64-encoded slice into its raw bytes.
 * @param {Uint8Array} data
 * @returns {Uint8Array}
 */
module.exports.decodeB64 = function(data) {
    const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = wasm.decodeB64(ptr0, len0);
    if (ret[3]) {
        throw takeFromExternrefTable0(ret[2]);
    }
    var v2 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
    wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
    return v2;
};

function __wbg_adapter_58(arg0, arg1, arg2) {
    wasm.closure3478_externref_shim(arg0, arg1, arg2);
}

function __wbg_adapter_1374(arg0, arg1, arg2, arg3) {
    wasm.closure4384_externref_shim(arg0, arg1, arg2, arg3);
}

/**
 * @enum {0 | 1 | 2}
 */
module.exports.CredentialStatus = Object.freeze({
    Revoked: 0, "0": "Revoked",
    Suspended: 1, "1": "Suspended",
    Valid: 2, "2": "Valid",
});
/**
 * Declares when validation should return if an error occurs.
 * @enum {0 | 1}
 */
module.exports.FailFast = Object.freeze({
    /**
     * Return all errors that occur during validation.
     */
    AllErrors: 0, "0": "AllErrors",
    /**
     * Return after the first error occurs.
     */
    FirstError: 1, "1": "FirstError",
});
/**
 * @enum {0 | 1 | 2 | 3 | 4}
 */
module.exports.MethodRelationship = Object.freeze({
    Authentication: 0, "0": "Authentication",
    AssertionMethod: 1, "1": "AssertionMethod",
    KeyAgreement: 2, "2": "KeyAgreement",
    CapabilityDelegation: 3, "3": "CapabilityDelegation",
    CapabilityInvocation: 4, "4": "CapabilityInvocation",
});
/**
 * @enum {0 | 1 | 2}
 */
module.exports.PayloadType = Object.freeze({
    Disclosed: 0, "0": "Disclosed",
    Undisclosed: 1, "1": "Undisclosed",
    ProofMethods: 2, "2": "ProofMethods",
});
/**
 * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8}
 */
module.exports.PresentationProofAlgorithm = Object.freeze({
    BLS12381_SHA256_PROOF: 0, "0": "BLS12381_SHA256_PROOF",
    BLS12381_SHAKE256_PROOF: 1, "1": "BLS12381_SHAKE256_PROOF",
    SU_ES256: 2, "2": "SU_ES256",
    MAC_H256: 3, "3": "MAC_H256",
    MAC_H384: 4, "4": "MAC_H384",
    MAC_H512: 5, "5": "MAC_H512",
    MAC_K25519: 6, "6": "MAC_K25519",
    MAC_K448: 7, "7": "MAC_K448",
    MAC_H256K: 8, "8": "MAC_H256K",
});
/**
 * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8}
 */
module.exports.ProofAlgorithm = Object.freeze({
    BLS12381_SHA256: 0, "0": "BLS12381_SHA256",
    BLS12381_SHAKE256: 1, "1": "BLS12381_SHAKE256",
    SU_ES256: 2, "2": "SU_ES256",
    MAC_H256: 3, "3": "MAC_H256",
    MAC_H384: 4, "4": "MAC_H384",
    MAC_H512: 5, "5": "MAC_H512",
    MAC_K25519: 6, "6": "MAC_K25519",
    MAC_K448: 7, "7": "MAC_K448",
    MAC_H256K: 8, "8": "MAC_H256K",
});
/**
 * @enum {0 | 1}
 */
module.exports.SerializationType = Object.freeze({
    COMPACT: 0, "0": "COMPACT",
    JSON: 1, "1": "JSON",
});
/**
 * Indicates the encoding of a DID document in state metadata.
 * @enum {0}
 */
module.exports.StateMetadataEncoding = Object.freeze({
    /**
     * State Metadata encoded as JSON.
     */
    Json: 0, "0": "Json",
});
/**
 * Controls validation behaviour when checking whether or not a credential has been revoked by its
 * [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status).
 * @enum {0 | 1 | 2}
 */
module.exports.StatusCheck = Object.freeze({
    /**
     * Validate the status if supported, reject any unsupported
     * [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.
     *
     * Only `RevocationBitmap2022` is currently supported.
     *
     * This is the default.
     */
    Strict: 0, "0": "Strict",
    /**
     * Validate the status if supported, skip any unsupported
     * [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.
     */
    SkipUnsupported: 1, "1": "SkipUnsupported",
    /**
     * Skip all status checks.
     */
    SkipAll: 2, "2": "SkipAll",
});
/**
 * Purpose of a {@link StatusList2021}.
 * @enum {0 | 1}
 */
module.exports.StatusPurpose = Object.freeze({
    /**
     * Used for revocation.
     */
    Revocation: 0, "0": "Revocation",
    /**
     * Used for suspension.
     */
    Suspension: 1, "1": "Suspension",
});
/**
 * Declares how credential subjects must relate to the presentation holder.
 *
 * See also the [Subject-Holder Relationship](https://www.w3.org/TR/vc-data-model/#subject-holder-relationships) section of the specification.
 * @enum {0 | 1 | 2}
 */
module.exports.SubjectHolderRelationship = Object.freeze({
    /**
     * The holder must always match the subject on all credentials, regardless of their [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property.
     * This variant is the default.
     */
    AlwaysSubject: 0, "0": "AlwaysSubject",
    /**
     * The holder must match the subject only for credentials where the [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property is `true`.
     */
    SubjectOnNonTransferable: 1, "1": "SubjectOnNonTransferable",
    /**
     * The holder is not required to have any kind of relationship to any credential subject.
     */
    Any: 2, "2": "Any",
});

const ApproveConfigChangeProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_approveconfigchangeproposal_free(ptr >>> 0, 1));

class ApproveConfigChangeProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ApproveConfigChangeProposal.prototype);
        obj.__wbg_ptr = ptr;
        ApproveConfigChangeProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ApproveConfigChangeProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_approveconfigchangeproposal_free(ptr, 0);
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ret = wasm.approveconfigchangeproposal_buildProgrammableTransaction(this.__wbg_ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {Promise<void>}
     */
    apply(wasm_effects, client) {
        const ret = wasm.approveconfigchangeproposal_apply(this.__wbg_ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.ApproveConfigChangeProposal = ApproveConfigChangeProposal;

const ApproveSendProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_approvesendproposal_free(ptr >>> 0, 1));

class ApproveSendProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ApproveSendProposal.prototype);
        obj.__wbg_ptr = ptr;
        ApproveSendProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ApproveSendProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_approvesendproposal_free(ptr, 0);
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.approvesendproposal_buildProgrammableTransaction(ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {Promise<void>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.approvesendproposal_apply(ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.ApproveSendProposal = ApproveSendProposal;

const ApproveUpdateDidDocumentProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_approveupdatediddocumentproposal_free(ptr >>> 0, 1));

class ApproveUpdateDidDocumentProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ApproveUpdateDidDocumentProposal.prototype);
        obj.__wbg_ptr = ptr;
        ApproveUpdateDidDocumentProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ApproveUpdateDidDocumentProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_approveupdatediddocumentproposal_free(ptr, 0);
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ret = wasm.approveupdatediddocumentproposal_buildProgrammableTransaction(this.__wbg_ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {Promise<void>}
     */
    apply(wasm_effects, client) {
        const ret = wasm.approveupdatediddocumentproposal_apply(this.__wbg_ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.ApproveUpdateDidDocumentProposal = ApproveUpdateDidDocumentProposal;

const ClaimDisplayFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_claimdisplay_free(ptr >>> 0, 1));

class ClaimDisplay {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ClaimDisplay.prototype);
        obj.__wbg_ptr = ptr;
        ClaimDisplayFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    static __unwrap(jsValue) {
        if (!(jsValue instanceof ClaimDisplay)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    toJSON() {
        return {
            lang: this.lang,
            label: this.label,
            description: this.description,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ClaimDisplayFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_claimdisplay_free(ptr, 0);
    }
    /**
     * A language tag as defined in [RFC5646](https://www.rfc-editor.org/rfc/rfc5646.txt).
     * @returns {string}
     */
    get lang() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_claimdisplay_lang(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * A language tag as defined in [RFC5646](https://www.rfc-editor.org/rfc/rfc5646.txt).
     * @param {string} arg0
     */
    set lang(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_claimdisplay_lang(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * A human-readable label for the claim.
     * @returns {string}
     */
    get label() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_claimdisplay_label(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * A human-readable label for the claim.
     * @param {string} arg0
     */
    set label(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_claimdisplay_label(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * A human-readable description for the claim.
     * @returns {string | undefined}
     */
    get description() {
        const ret = wasm.__wbg_get_claimdisplay_description(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * A human-readable description for the claim.
     * @param {string | null} [arg0]
     */
    set description(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_claimdisplay_description(this.__wbg_ptr, ptr0, len0);
    }
}
module.exports.ClaimDisplay = ClaimDisplay;

const ClaimMetadataFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_claimmetadata_free(ptr >>> 0, 1));

class ClaimMetadata {

    static __unwrap(jsValue) {
        if (!(jsValue instanceof ClaimMetadata)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    toJSON() {
        return {
            path: this.path,
            display: this.display,
            sd: this.sd,
            svg_id: this.svg_id,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ClaimMetadataFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_claimmetadata_free(ptr, 0);
    }
    /**
     * @returns {ClaimPath}
     */
    get path() {
        const ret = wasm.__wbg_get_claimmetadata_path(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {ClaimPath} arg0
     */
    set path(arg0) {
        wasm.__wbg_set_claimmetadata_path(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {ClaimDisplay[]}
     */
    get display() {
        const ret = wasm.__wbg_get_claimmetadata_display(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {ClaimDisplay[]} arg0
     */
    set display(arg0) {
        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_claimmetadata_display(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {ClaimDisclosability | undefined}
     */
    get sd() {
        const ret = wasm.__wbg_get_claimmetadata_sd(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {ClaimDisclosability | null} [arg0]
     */
    set sd(arg0) {
        wasm.__wbg_set_claimmetadata_sd(this.__wbg_ptr, isLikeNone(arg0) ? 0 : addToExternrefTable0(arg0));
    }
    /**
     * @returns {string | undefined}
     */
    get svg_id() {
        const ret = wasm.__wbg_get_claimmetadata_svg_id(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @param {string | null} [arg0]
     */
    set svg_id(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_claimmetadata_svg_id(this.__wbg_ptr, ptr0, len0);
    }
}
module.exports.ClaimMetadata = ClaimMetadata;

const ConfigChangeFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_configchange_free(ptr >>> 0, 1));

class ConfigChange {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ConfigChange.prototype);
        obj.__wbg_ptr = ptr;
        ConfigChangeFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
            threshold: this.threshold,
            controllersToAdd: this.controllersToAdd,
            controllersToRemove: this.controllersToRemove,
            controllersToUpdate: this.controllersToUpdate,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ConfigChangeFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_configchange_free(ptr, 0);
    }
    /**
     * @returns {bigint | undefined}
     */
    get threshold() {
        const ret = wasm.__wbg_get_configchange_threshold(this.__wbg_ptr);
        return ret[0] === 0 ? undefined : BigInt.asUintN(64, ret[1]);
    }
    /**
     * @param {bigint | null} [arg0]
     */
    set threshold(arg0) {
        wasm.__wbg_set_configchange_threshold(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? BigInt(0) : arg0);
    }
    /**
     * @returns {Map<string, number> | undefined}
     */
    get controllersToAdd() {
        const ret = wasm.__wbg_get_configchange_controllersToAdd(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Map<string, number> | null} [arg0]
     */
    set controllersToAdd(arg0) {
        wasm.__wbg_set_configchange_controllersToAdd(this.__wbg_ptr, isLikeNone(arg0) ? 0 : addToExternrefTable0(arg0));
    }
    /**
     * @returns {Set<string> | undefined}
     */
    get controllersToRemove() {
        const ret = wasm.__wbg_get_configchange_controllersToRemove(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Set<string> | null} [arg0]
     */
    set controllersToRemove(arg0) {
        wasm.__wbg_set_configchange_controllersToRemove(this.__wbg_ptr, isLikeNone(arg0) ? 0 : addToExternrefTable0(arg0));
    }
    /**
     * @returns {Map<string, number> | undefined}
     */
    get controllersToUpdate() {
        const ret = wasm.__wbg_get_configchange_controllersToUpdate(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Map<string, number> | null} [arg0]
     */
    set controllersToUpdate(arg0) {
        wasm.__wbg_set_configchange_controllersToUpdate(this.__wbg_ptr, isLikeNone(arg0) ? 0 : addToExternrefTable0(arg0));
    }
}
module.exports.ConfigChange = ConfigChange;

const ConfigChangeProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_configchangeproposal_free(ptr >>> 0, 1));

class ConfigChangeProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ConfigChangeProposal.prototype);
        obj.__wbg_ptr = ptr;
        ConfigChangeProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ConfigChangeProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_configchangeproposal_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get id() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.configchangeproposal_id(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @returns {ConfigChange}
     */
    get action() {
        const ret = wasm.configchangeproposal_action(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ConfigChange.__wrap(ret[0]);
    }
    /**
     * @returns {bigint | undefined}
     */
    get expiration_epoch() {
        const ret = wasm.configchangeproposal_expiration_epoch(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        return ret[0] === 0 ? undefined : BigInt.asUintN(64, ret[1]);
    }
    /**
     * @returns {bigint}
     */
    get votes() {
        const ret = wasm.configchangeproposal_votes(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return BigInt.asUintN(64, ret[0]);
    }
    /**
     * @returns {Set<string>}
     */
    get voters() {
        const ret = wasm.configchangeproposal_voters(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {OnChainIdentity} identity
     * @param {ControllerToken} controller_token
     * @returns {TransactionBuilder<ApproveProposal>}
     */
    approve(identity, controller_token) {
        _assertClass(identity, OnChainIdentity);
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.configchangeproposal_approve(this.__wbg_ptr, identity.__wbg_ptr, controller_token.__wbg_ptr);
        return TransactionBuilder.__wrap(ret);
    }
    /**
     * @param {OnChainIdentity} identity
     * @param {ControllerToken} controller_token
     * @returns {TransactionBuilder<ExecuteProposal<ConfigChange>>}
     */
    intoTx(identity, controller_token) {
        const ptr = this.__destroy_into_raw();
        _assertClass(identity, OnChainIdentity);
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.configchangeproposal_intoTx(ptr, identity.__wbg_ptr, controller_token.__wbg_ptr);
        return TransactionBuilder.__wrap(ret);
    }
}
module.exports.ConfigChangeProposal = ConfigChangeProposal;

const ControllerAndVotingPowerFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_controllerandvotingpower_free(ptr >>> 0, 1));

class ControllerAndVotingPower {

    static __unwrap(jsValue) {
        if (!(jsValue instanceof ControllerAndVotingPower)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ControllerAndVotingPowerFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_controllerandvotingpower_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get 0() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_controllerandvotingpower_0(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set 0(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_controllerandvotingpower_0(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {bigint}
     */
    get 1() {
        const ret = wasm.__wbg_get_controllerandvotingpower_1(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set 1(arg0) {
        wasm.__wbg_set_controllerandvotingpower_1(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {boolean}
     */
    get 2() {
        const ret = wasm.__wbg_get_controllerandvotingpower_2(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * @param {boolean} arg0
     */
    set 2(arg0) {
        wasm.__wbg_set_controllerandvotingpower_2(this.__wbg_ptr, arg0);
    }
    /**
     * @param {string} address
     * @param {bigint} voting_power
     * @param {boolean} can_delegate
     */
    constructor(address, voting_power, can_delegate) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.controllerandvotingpower_new(ptr0, len0, voting_power, can_delegate);
        this.__wbg_ptr = ret >>> 0;
        ControllerAndVotingPowerFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}
module.exports.ControllerAndVotingPower = ControllerAndVotingPower;

const ControllerCapFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_controllercap_free(ptr >>> 0, 1));
/**
 * A token that authenticates its bearer as a controller of a specific shared object.
 */
class ControllerCap {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ControllerCap.prototype);
        obj.__wbg_ptr = ptr;
        ControllerCapFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ControllerCapFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_controllercap_free(ptr, 0);
    }
    /**
     * Returns the ID of this {@link ControllerCap}.
     * @returns {string}
     */
    get id() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.controllercap_id(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the ID of the object this token controls.
     * @returns {string}
     */
    get controllerOf() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.controllercap_controllerOf(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns whether this controller is allowed to delegate
     * its access to the controlled object.
     * @returns {boolean}
     */
    get canDelegate() {
        const ret = wasm.controllercap_canDelegate(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * If this token can be delegated, this function will return
     * a {@link DelegationToken} Transaction that will mint a new {@link DelegationToken}
     * and send it to `recipient`.
     * @param {string} recipient
     * @param {DelegatePermissions | undefined | null} permissions
     * @returns {TransactionBuilder}
     */
    delegate(recipient, permissions) {
        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.controllercap_delegate(this.__wbg_ptr, ptr0, len0, isLikeNone(permissions) ? 0x100000001 : (permissions) >>> 0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return TransactionBuilder.__wrap(ret[0]);
    }
}
module.exports.ControllerCap = ControllerCap;

const ControllerTokenFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_controllertoken_free(ptr >>> 0, 1));

class ControllerToken {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ControllerToken.prototype);
        obj.__wbg_ptr = ptr;
        ControllerTokenFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ControllerTokenFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_controllertoken_free(ptr, 0);
    }
    /**
     * @param {ControllerCap} cap
     * @returns {ControllerToken}
     */
    static fromControllerCap(cap) {
        _assertClass(cap, ControllerCap);
        const ret = wasm.controllertoken_fromControllerCap(cap.__wbg_ptr);
        return ControllerToken.__wrap(ret);
    }
    /**
     * @param {DelegationToken} token
     * @returns {ControllerToken}
     */
    static fromDelegationToken(token) {
        _assertClass(token, DelegationToken);
        const ret = wasm.controllertoken_fromDelegationToken(token.__wbg_ptr);
        return ControllerToken.__wrap(ret);
    }
    /**
     * @returns {string}
     */
    id() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.controllertoken_id(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {string}
     */
    controllerOf() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.controllertoken_controllerOf(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {ControllerCap | undefined}
     */
    toControllerCap() {
        const ret = wasm.controllertoken_toControllerCap(this.__wbg_ptr);
        return ret === 0 ? undefined : ControllerCap.__wrap(ret);
    }
    /**
     * @returns {DelegationToken | undefined}
     */
    toDelegationToken() {
        const ret = wasm.controllertoken_toDelegationToken(this.__wbg_ptr);
        return ret === 0 ? undefined : DelegationToken.__wrap(ret);
    }
    /**
     * @param {string} id
     * @param {CoreClientReadOnly} client
     * @returns {Promise<ControllerToken>}
     */
    static getById(id, client) {
        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.controllertoken_getById(ptr0, len0, client);
        return ret;
    }
}
module.exports.ControllerToken = ControllerToken;

const CoreDIDFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_coredid_free(ptr >>> 0, 1));
/**
 * A method-agnostic Decentralized Identifier (DID).
 */
class CoreDID {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(CoreDID.prototype);
        obj.__wbg_ptr = ptr;
        CoreDIDFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CoreDIDFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_coredid_free(ptr, 0);
    }
    /**
     * Parses a {@link CoreDID} from the given `input`.
     *
     * ### Errors
     *
     * Throws an error if the input is not a valid {@link CoreDID}.
     * @param {string} input
     * @returns {CoreDID}
     */
    static parse(input) {
        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.coredid_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDID.__wrap(ret[0]);
    }
    /**
     * Set the method name of the {@link CoreDID}.
     * @param {string} value
     */
    setMethodName(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.coredid_setMethodName(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Validates whether a string is a valid DID method name.
     * @param {string} value
     * @returns {boolean}
     */
    static validMethodName(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.coredid_validMethodName(ptr0, len0);
        return ret !== 0;
    }
    /**
     * Set the method-specific-id of the `DID`.
     * @param {string} value
     */
    setMethodId(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.coredid_setMethodId(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Validates whether a string is a valid `DID` method-id.
     * @param {string} value
     * @returns {boolean}
     */
    static validMethodId(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.coredid_validMethodId(ptr0, len0);
        return ret !== 0;
    }
    /**
     * Returns the {@link CoreDID} scheme.
     *
     * E.g.
     * - `"did:example:12345678" -> "did"`
     * - `"did:iota:smr:12345678" -> "did"`
     * @returns {string}
     */
    scheme() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.coredid_scheme(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the {@link CoreDID} authority: the method name and method-id.
     *
     * E.g.
     * - `"did:example:12345678" -> "example:12345678"`
     * - `"did:iota:smr:12345678" -> "iota:smr:12345678"`
     * @returns {string}
     */
    authority() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.coredid_authority(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the {@link CoreDID} method name.
     *
     * E.g.
     * - `"did:example:12345678" -> "example"`
     * - `"did:iota:smr:12345678" -> "iota"`
     * @returns {string}
     */
    method() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.coredid_method(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the {@link CoreDID} method-specific ID.
     *
     * E.g.
     * - `"did:example:12345678" -> "12345678"`
     * - `"did:iota:smr:12345678" -> "smr:12345678"`
     * @returns {string}
     */
    methodId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.coredid_methodId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Construct a new {@link DIDUrl} by joining with a relative DID Url string.
     * @param {string} segment
     * @returns {DIDUrl}
     */
    join(segment) {
        const ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.coredid_join(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DIDUrl.__wrap(ret[0]);
    }
    /**
     * Clones the {@link CoreDID} into a {@link DIDUrl}.
     * @returns {DIDUrl}
     */
    toUrl() {
        const ret = wasm.coredid_toUrl(this.__wbg_ptr);
        return DIDUrl.__wrap(ret);
    }
    /**
     * Converts the {@link CoreDID} into a {@link DIDUrl}, consuming it.
     * @returns {DIDUrl}
     */
    intoUrl() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.coredid_intoUrl(ptr);
        return DIDUrl.__wrap(ret);
    }
    /**
     * Returns the {@link CoreDID} as a string.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.coredid_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {CoreDID}
     */
    toCoreDid() {
        const ret = wasm.coredid_clone(this.__wbg_ptr);
        return CoreDID.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.coredid_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {CoreDID}
     */
    static fromJSON(json) {
        const ret = wasm.coredid_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDID.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {CoreDID}
     */
    clone() {
        const ret = wasm.coredid_clone(this.__wbg_ptr);
        return CoreDID.__wrap(ret);
    }
}
module.exports.CoreDID = CoreDID;

const CoreDocumentFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_coredocument_free(ptr >>> 0, 1));
/**
 * A method-agnostic DID Document.
 *
 * Note: All methods that involve reading from this class may potentially raise an error
 * if the object is being concurrently modified.
 */
class CoreDocument {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(CoreDocument.prototype);
        obj.__wbg_ptr = ptr;
        CoreDocumentFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CoreDocumentFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_coredocument_free(ptr, 0);
    }
    /**
     * Creates a new {@link CoreDocument} with the given properties.
     * @param {ICoreDocument} values
     */
    constructor(values) {
        const ret = wasm.coredocument_new(values);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        CoreDocumentFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns a copy of the DID Document `id`.
     * @returns {CoreDID}
     */
    id() {
        const ret = wasm.coredocument_id(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDID.__wrap(ret[0]);
    }
    /**
     * Sets the DID of the document.
     *
     * ### Warning
     *
     * Changing the identifier can drastically alter the results of
     * `resolve_method`, `resolve_service` and the related
     * [DID URL dereferencing](https://w3c-ccg.github.io/did-resolution/#dereferencing) algorithm.
     * @param {CoreDID} id
     */
    setId(id) {
        _assertClass(id, CoreDID);
        const ret = wasm.coredocument_setId(this.__wbg_ptr, id.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the document controllers.
     * @returns {Array<CoreDID>}
     */
    controller() {
        const ret = wasm.coredocument_controller(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sets the controllers of the DID Document.
     *
     * Note: Duplicates will be ignored.
     * Use `null` to remove all controllers.
     * @param {CoreDID | CoreDID[] | null} controllers
     */
    setController(controllers) {
        const ret = wasm.coredocument_setController(this.__wbg_ptr, controllers);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the document's `alsoKnownAs` set.
     * @returns {Array<string>}
     */
    alsoKnownAs() {
        const ret = wasm.coredocument_alsoKnownAs(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sets the `alsoKnownAs` property in the DID document.
     * @param {string | string[] | null} urls
     */
    setAlsoKnownAs(urls) {
        const ret = wasm.coredocument_setAlsoKnownAs(this.__wbg_ptr, urls);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the document's `verificationMethod` set.
     * @returns {VerificationMethod[]}
     */
    verificationMethod() {
        const ret = wasm.coredocument_verificationMethod(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the document's `authentication` set.
     * @returns {Array<DIDUrl | VerificationMethod>}
     */
    authentication() {
        const ret = wasm.coredocument_authentication(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the document's `assertionMethod` set.
     * @returns {Array<DIDUrl | VerificationMethod>}
     */
    assertionMethod() {
        const ret = wasm.coredocument_assertionMethod(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the document's `keyAgreement` set.
     * @returns {Array<DIDUrl | VerificationMethod>}
     */
    keyAgreement() {
        const ret = wasm.coredocument_keyAgreement(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the document's `capabilityDelegation` set.
     * @returns {Array<DIDUrl | VerificationMethod>}
     */
    capabilityDelegation() {
        const ret = wasm.coredocument_capabilityDelegation(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the document's `capabilityInvocation` set.
     * @returns {Array<DIDUrl | VerificationMethod>}
     */
    capabilityInvocation() {
        const ret = wasm.coredocument_capabilityInvocation(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the custom DID Document properties.
     * @returns {Map<string, any>}
     */
    properties() {
        const ret = wasm.coredocument_properties(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sets a custom property in the DID Document.
     * If the value is set to `null`, the custom property will be removed.
     *
     * ### WARNING
     *
     * This method can overwrite existing properties like `id` and result in an invalid document.
     * @param {string} key
     * @param {any} value
     */
    setPropertyUnchecked(key, value) {
        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.coredocument_setPropertyUnchecked(this.__wbg_ptr, ptr0, len0, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a set of all {@link Service} in the document.
     * @returns {Service[]}
     */
    service() {
        const ret = wasm.coredocument_service(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Add a new {@link Service} to the document.
     *
     * Errors if there already exists a service or verification method with the same id.
     * @param {Service} service
     */
    insertService(service) {
        _assertClass(service, Service);
        const ret = wasm.coredocument_insertService(this.__wbg_ptr, service.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Remove a {@link Service} identified by the given {@link DIDUrl} from the document.
     *
     * Returns `true` if the service was removed.
     * @param {DIDUrl} didUrl
     * @returns {Service | undefined}
     */
    removeService(didUrl) {
        _assertClass(didUrl, DIDUrl);
        const ret = wasm.coredocument_removeService(this.__wbg_ptr, didUrl.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : Service.__wrap(ret[0]);
    }
    /**
     * Returns the first {@link Service} with an `id` property matching the provided `query`,
     * if present.
     * @param {DIDUrl | string} query
     * @returns {Service | undefined}
     */
    resolveService(query) {
        const ret = wasm.coredocument_resolveService(this.__wbg_ptr, query);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : Service.__wrap(ret[0]);
    }
    /**
     * Returns a list of all {@link VerificationMethod} in the DID Document,
     * whose verification relationship matches `scope`.
     *
     * If `scope` is not set, a list over the **embedded** methods is returned.
     * @param {MethodScope | null} [scope]
     * @returns {VerificationMethod[]}
     */
    methods(scope) {
        const ret = wasm.coredocument_methods(this.__wbg_ptr, isLikeNone(scope) ? 0 : addToExternrefTable0(scope));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns an array of all verification relationships.
     * @returns {Array<DIDUrl | VerificationMethod>}
     */
    verificationRelationships() {
        const ret = wasm.coredocument_verificationRelationships(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Adds a new `method` to the document in the given `scope`.
     * @param {VerificationMethod} method
     * @param {MethodScope} scope
     */
    insertMethod(method, scope) {
        _assertClass(method, VerificationMethod);
        _assertClass(scope, MethodScope);
        const ret = wasm.coredocument_insertMethod(this.__wbg_ptr, method.__wbg_ptr, scope.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Removes all references to the specified Verification Method.
     * @param {DIDUrl} did
     * @returns {VerificationMethod | undefined}
     */
    removeMethod(did) {
        _assertClass(did, DIDUrl);
        const ret = wasm.coredocument_removeMethod(this.__wbg_ptr, did.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : VerificationMethod.__wrap(ret[0]);
    }
    /**
     * Returns a copy of the first verification method with an `id` property
     * matching the provided `query` and the verification relationship
     * specified by `scope`, if present.
     * @param {DIDUrl | string} query
     * @param {MethodScope | null} [scope]
     * @returns {VerificationMethod | undefined}
     */
    resolveMethod(query, scope) {
        const ret = wasm.coredocument_resolveMethod(this.__wbg_ptr, query, isLikeNone(scope) ? 0 : addToExternrefTable0(scope));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : VerificationMethod.__wrap(ret[0]);
    }
    /**
     * Attaches the relationship to the given method, if the method exists.
     *
     * Note: The method needs to be in the set of verification methods,
     * so it cannot be an embedded one.
     * @param {DIDUrl} didUrl
     * @param {MethodRelationship} relationship
     * @returns {boolean}
     */
    attachMethodRelationship(didUrl, relationship) {
        _assertClass(didUrl, DIDUrl);
        const ret = wasm.coredocument_attachMethodRelationship(this.__wbg_ptr, didUrl.__wbg_ptr, relationship);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * Detaches the given relationship from the given method, if the method exists.
     * @param {DIDUrl} didUrl
     * @param {MethodRelationship} relationship
     * @returns {boolean}
     */
    detachMethodRelationship(didUrl, relationship) {
        _assertClass(didUrl, DIDUrl);
        const ret = wasm.coredocument_detachMethodRelationship(this.__wbg_ptr, didUrl.__wbg_ptr, relationship);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * Decodes and verifies the provided JWS according to the passed `options` and `signatureVerifier`.
     * If a `signatureVerifier` is provided it will be used when
     * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
     * algorithms will be used.
     *
     * Regardless of which options are passed the following conditions must be met in order for a verification attempt to
     * take place.
     * - The JWS must be encoded according to the JWS compact serialization.
     * - The `kid` value in the protected header must be an identifier of a verification method in this DID document,
     * or set explicitly in the `options`.
     * @param {Jws} jws
     * @param {JwsVerificationOptions} options
     * @param {IJwsVerifier | null} [signatureVerifier]
     * @param {string | null} [detachedPayload]
     * @returns {DecodedJws}
     */
    verifyJws(jws, options, signatureVerifier, detachedPayload) {
        _assertClass(jws, Jws);
        _assertClass(options, JwsVerificationOptions);
        var ptr0 = isLikeNone(detachedPayload) ? 0 : passStringToWasm0(detachedPayload, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.coredocument_verifyJws(this.__wbg_ptr, jws.__wbg_ptr, options.__wbg_ptr, isLikeNone(signatureVerifier) ? 0 : addToExternrefTable0(signatureVerifier), ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DecodedJws.__wrap(ret[0]);
    }
    /**
     * If the document has a {@link RevocationBitmap} service identified by `serviceQuery`,
     * revoke all specified `indices`.
     * @param {DIDUrl | string} serviceQuery
     * @param {number | number[]} indices
     */
    revokeCredentials(serviceQuery, indices) {
        const ret = wasm.coredocument_revokeCredentials(this.__wbg_ptr, serviceQuery, indices);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * If the document has a {@link RevocationBitmap} service identified by `serviceQuery`,
     * unrevoke all specified `indices`.
     * @param {DIDUrl | string} serviceQuery
     * @param {number | number[]} indices
     */
    unrevokeCredentials(serviceQuery, indices) {
        const ret = wasm.coredocument_unrevokeCredentials(this.__wbg_ptr, serviceQuery, indices);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Deep clones the {@link CoreDocument}.
     * @returns {CoreDocument}
     */
    clone() {
        const ret = wasm.coredocument_clone(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDocument.__wrap(ret[0]);
    }
    /**
     * ### Warning
     * This is for internal use only. Do not rely on or call this method.
     * @returns {CoreDocument}
     */
    _shallowCloneInternal() {
        const ret = wasm.coredocument__shallowCloneInternal(this.__wbg_ptr);
        return CoreDocument.__wrap(ret);
    }
    /**
     * ### Warning
     * This is for internal use only. Do not rely on or call this method.
     * @returns {number}
     */
    _strongCountInternal() {
        const ret = wasm.coredocument__strongCountInternal(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * Serializes to a plain JS representation.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.coredocument_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a plain JS representation.
     * @param {any} json
     * @returns {CoreDocument}
     */
    static fromJSON(json) {
        const ret = wasm.coredocument_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDocument.__wrap(ret[0]);
    }
    /**
     * Generate new key material in the given `storage` and insert a new verification method with the corresponding
     * public key material into the DID document.
     *
     * - If no fragment is given the `kid` of the generated JWK is used, if it is set, otherwise an error is returned.
     * - The `keyType` must be compatible with the given `storage`. `Storage`s are expected to export key type constants
     * for that use case.
     *
     * The fragment of the generated method is returned.
     * @param {Storage} storage
     * @param {string} keyType
     * @param {JwsAlgorithm} alg
     * @param {string | null | undefined} fragment
     * @param {MethodScope} scope
     * @returns {Promise<string>}
     */
    generateMethod(storage, keyType, alg, fragment, scope) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(keyType, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(fragment) ? 0 : passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        _assertClass(scope, MethodScope);
        var ptr2 = scope.__destroy_into_raw();
        const ret = wasm.coredocument_generateMethod(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, alg, ptr1, len1, ptr2);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Remove the method identified by the `fragment` from the document and delete the corresponding key material in
     * the `storage`.
     * @param {Storage} storage
     * @param {DIDUrl} id
     * @returns {Promise<void>}
     */
    purgeMethod(storage, id) {
        _assertClass(storage, Storage);
        _assertClass(id, DIDUrl);
        const ret = wasm.coredocument_purgeMethod(this.__wbg_ptr, storage.__wbg_ptr, id.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sign the `payload` according to `options` with the storage backed private key corresponding to the public key
     * material in the verification method identified by the given `fragment.
     *
     * Upon success a string representing a JWS encoded according to the Compact JWS Serialization format is returned.
     * See [RFC7515 section 3.1](https://www.rfc-editor.org/rfc/rfc7515#section-3.1).
     * @param {Storage} storage
     * @param {string} fragment
     * @param {string} payload
     * @param {JwsSignatureOptions} options
     * @returns {Promise<Jws>}
     */
    createJws(storage, fragment, payload, options) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(payload, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(options, JwsSignatureOptions);
        const ret = wasm.coredocument_createJws(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, ptr1, len1, options.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Produces a JWT where the payload is produced from the given `credential`
     * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
     *
     * Unless the `kid` is explicitly set in the options, the `kid` in the protected header is the `id`
     * of the method identified by `fragment` and the JWS signature will be produced by the corresponding
     * private key backed by the `storage` in accordance with the passed `options`.
     *
     * The `custom_claims` can be used to set additional claims on the resulting JWT.
     * @param {Storage} storage
     * @param {string} fragment
     * @param {Credential} credential
     * @param {JwsSignatureOptions} options
     * @param {Record<string, any> | null} [custom_claims]
     * @returns {Promise<Jwt>}
     */
    createCredentialJwt(storage, fragment, credential, options, custom_claims) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(credential, Credential);
        _assertClass(options, JwsSignatureOptions);
        const ret = wasm.coredocument_createCredentialJwt(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, credential.__wbg_ptr, options.__wbg_ptr, isLikeNone(custom_claims) ? 0 : addToExternrefTable0(custom_claims));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Produces a JWT where the payload is produced from the given presentation.
     * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
     *
     * Unless the `kid` is explicitly set in the options, the `kid` in the protected header is the `id`
     * of the method identified by `fragment` and the JWS signature will be produced by the corresponding
     * private key backed by the `storage` in accordance with the passed `options`.
     * @param {Storage} storage
     * @param {string} fragment
     * @param {Presentation} presentation
     * @param {JwsSignatureOptions} signature_options
     * @param {JwtPresentationOptions} presentation_options
     * @returns {Promise<Jwt>}
     */
    createPresentationJwt(storage, fragment, presentation, signature_options, presentation_options) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(presentation, Presentation);
        _assertClass(signature_options, JwsSignatureOptions);
        _assertClass(presentation_options, JwtPresentationOptions);
        const ret = wasm.coredocument_createPresentationJwt(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, presentation.__wbg_ptr, signature_options.__wbg_ptr, presentation_options.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Creates a {@link CoreDocument} from the given {@link DIDJwk}.
     * @param {DIDJwk} did
     * @returns {CoreDocument}
     */
    static expandDIDJwk(did) {
        _assertClass(did, DIDJwk);
        var ptr0 = did.__destroy_into_raw();
        const ret = wasm.coredocument_expandDIDJwk(ptr0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDocument.__wrap(ret[0]);
    }
}
module.exports.CoreDocument = CoreDocument;

const CreateConfigChangeProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_createconfigchangeproposal_free(ptr >>> 0, 1));

class CreateConfigChangeProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(CreateConfigChangeProposal.prototype);
        obj.__wbg_ptr = ptr;
        CreateConfigChangeProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CreateConfigChangeProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_createconfigchangeproposal_free(ptr, 0);
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ret = wasm.createconfigchangeproposal_buildProgrammableTransaction(this.__wbg_ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {ProposalResult<ConfigChange>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.createconfigchangeproposal_apply(ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.CreateConfigChangeProposal = CreateConfigChangeProposal;

const CreateIdentityFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_createidentity_free(ptr >>> 0, 1));

class CreateIdentity {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(CreateIdentity.prototype);
        obj.__wbg_ptr = ptr;
        CreateIdentityFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CreateIdentityFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_createidentity_free(ptr, 0);
    }
    /**
     * @param {IdentityBuilder} builder
     */
    constructor(builder) {
        _assertClass(builder, IdentityBuilder);
        var ptr0 = builder.__destroy_into_raw();
        const ret = wasm.createidentity_new(ptr0);
        this.__wbg_ptr = ret >>> 0;
        CreateIdentityFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ret = wasm.createidentity_buildProgrammableTransaction(this.__wbg_ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {Promise<OnChainIdentity>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.createidentity_apply(ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.CreateIdentity = CreateIdentity;

const CreateSendProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_createsendproposal_free(ptr >>> 0, 1));

class CreateSendProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(CreateSendProposal.prototype);
        obj.__wbg_ptr = ptr;
        CreateSendProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CreateSendProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_createsendproposal_free(ptr, 0);
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ret = wasm.createsendproposal_buildProgrammableTransaction(this.__wbg_ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {ProposalResult<SendProposal>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.createsendproposal_apply(ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.CreateSendProposal = CreateSendProposal;

const CreateUpdateDidProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_createupdatedidproposal_free(ptr >>> 0, 1));

class CreateUpdateDidProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(CreateUpdateDidProposal.prototype);
        obj.__wbg_ptr = ptr;
        CreateUpdateDidProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CreateUpdateDidProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_createupdatedidproposal_free(ptr, 0);
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ret = wasm.createupdatedidproposal_buildProgrammableTransaction(this.__wbg_ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {ProposalResult<UpdateDid>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.createupdatedidproposal_apply(ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.CreateUpdateDidProposal = CreateUpdateDidProposal;

const CredentialFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_credential_free(ptr >>> 0, 1));
/**
 * Represents a set of claims describing an entity.
 */
class Credential {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Credential.prototype);
        obj.__wbg_ptr = ptr;
        CredentialFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CredentialFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_credential_free(ptr, 0);
    }
    /**
     * Returns the base JSON-LD context.
     * @returns {string}
     */
    static BaseContext() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.credential_BaseContext();
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * Returns the base type.
     * @returns {string}
     */
    static BaseType() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.credential_BaseType();
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Constructs a new {@link Credential}.
     * @param {ICredential} values
     */
    constructor(values) {
        const ret = wasm.credential_new(values);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        CredentialFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {IDomainLinkageCredential} values
     * @returns {Credential}
     */
    static createDomainLinkageCredential(values) {
        const ret = wasm.credential_createDomainLinkageCredential(values);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Credential.__wrap(ret[0]);
    }
    /**
     * Returns a copy of the JSON-LD context(s) applicable to the {@link Credential}.
     * @returns {Array<string | Record<string, any>>}
     */
    context() {
        const ret = wasm.credential_context(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the unique `URI` identifying the {@link Credential} .
     * @returns {string | undefined}
     */
    id() {
        const ret = wasm.credential_id(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Returns a copy of the URIs defining the type of the {@link Credential}.
     * @returns {Array<string>}
     */
    type() {
        const ret = wasm.credential_type(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns a copy of the {@link Credential} subject(s).
     * @returns {Array<Subject>}
     */
    credentialSubject() {
        const ret = wasm.credential_credentialSubject(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the issuer of the {@link Credential}.
     * @returns {string | Issuer}
     */
    issuer() {
        const ret = wasm.credential_issuer(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the timestamp of when the {@link Credential} becomes valid.
     * @returns {Timestamp}
     */
    issuanceDate() {
        const ret = wasm.credential_issuanceDate(this.__wbg_ptr);
        return Timestamp.__wrap(ret);
    }
    /**
     * Returns a copy of the timestamp of when the {@link Credential} should no longer be considered valid.
     * @returns {Timestamp | undefined}
     */
    expirationDate() {
        const ret = wasm.credential_expirationDate(this.__wbg_ptr);
        return ret === 0 ? undefined : Timestamp.__wrap(ret);
    }
    /**
     * Returns a copy of the information used to determine the current status of the {@link Credential}.
     * @returns {Array<Status>}
     */
    credentialStatus() {
        const ret = wasm.credential_credentialStatus(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the information used to assist in the enforcement of a specific {@link Credential} structure.
     * @returns {Array<Schema>}
     */
    credentialSchema() {
        const ret = wasm.credential_credentialSchema(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the service(s) used to refresh an expired {@link Credential}.
     * @returns {Array<RefreshService>}
     */
    refreshService() {
        const ret = wasm.credential_refreshService(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the terms-of-use specified by the {@link Credential} issuer.
     * @returns {Array<Policy>}
     */
    termsOfUse() {
        const ret = wasm.credential_termsOfUse(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the human-readable evidence used to support the claims within the {@link Credential}.
     * @returns {Array<Evidence>}
     */
    evidence() {
        const ret = wasm.credential_evidence(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns whether or not the {@link Credential} must only be contained within a  {@link Presentation}
     * with a proof issued from the {@link Credential} subject.
     * @returns {boolean | undefined}
     */
    nonTransferable() {
        const ret = wasm.credential_nonTransferable(this.__wbg_ptr);
        return ret === 0xFFFFFF ? undefined : ret !== 0;
    }
    /**
     * Optional cryptographic proof, unrelated to JWT.
     * @returns {Proof | undefined}
     */
    proof() {
        const ret = wasm.credential_proof(this.__wbg_ptr);
        return ret === 0 ? undefined : Proof.__wrap(ret);
    }
    /**
     * Returns a copy of the miscellaneous properties on the {@link Credential}.
     * @returns {Map<string, any>}
     */
    properties() {
        const ret = wasm.credential_properties(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sets the `proof` property of the {@link Credential}.
     *
     * Note that this proof is not related to JWT.
     * @param {Proof | null} [proof]
     */
    setProof(proof) {
        let ptr0 = 0;
        if (!isLikeNone(proof)) {
            _assertClass(proof, Proof);
            ptr0 = proof.__destroy_into_raw();
        }
        wasm.credential_setProof(this.__wbg_ptr, ptr0);
    }
    /**
     * Serializes the `Credential` as a JWT claims set
     * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
     *
     * The resulting object can be used as the payload of a JWS when issuing the credential.
     * @param {Record<string, any> | null} [custom_claims]
     * @returns {Record<string, any>}
     */
    toJwtClaims(custom_claims) {
        const ret = wasm.credential_toJwtClaims(this.__wbg_ptr, isLikeNone(custom_claims) ? 0 : addToExternrefTable0(custom_claims));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.credential_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Credential}
     */
    static fromJSON(json) {
        const ret = wasm.credential_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Credential.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {Credential}
     */
    clone() {
        const ret = wasm.credential_clone(this.__wbg_ptr);
        return Credential.__wrap(ret);
    }
}
module.exports.Credential = Credential;

const CustomMethodDataFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_custommethoddata_free(ptr >>> 0, 1));
/**
 * A custom verification method data format.
 */
class CustomMethodData {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(CustomMethodData.prototype);
        obj.__wbg_ptr = ptr;
        CustomMethodDataFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CustomMethodDataFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_custommethoddata_free(ptr, 0);
    }
    /**
     * @param {string} name
     * @param {any} data
     */
    constructor(name, data) {
        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.custommethoddata_new(ptr0, len0, data);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        CustomMethodDataFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Deep clones the object.
     * @returns {CustomMethodData}
     */
    clone() {
        const ret = wasm.custommethoddata_clone(this.__wbg_ptr);
        return CustomMethodData.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.custommethoddata_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {CustomMethodData}
     */
    static fromJSON(json) {
        const ret = wasm.custommethoddata_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CustomMethodData.__wrap(ret[0]);
    }
}
module.exports.CustomMethodData = CustomMethodData;

const DIDJwkFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_didjwk_free(ptr >>> 0, 1));
/**
 * `did:jwk` DID.
 */
class DIDJwk {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DIDJwk.prototype);
        obj.__wbg_ptr = ptr;
        DIDJwkFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DIDJwkFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_didjwk_free(ptr, 0);
    }
    /**
     * Creates a new {@link DIDJwk} from a {@link CoreDID}.
     *
     * ### Errors
     * Throws an error if the given did is not a valid `did:jwk` DID.
     * @param {CoreDID | IToCoreDID} did
     */
    constructor(did) {
        const ret = wasm.didjwk_new(did);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        DIDJwkFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Parses a {@link DIDJwk} from the given `input`.
     *
     * ### Errors
     *
     * Throws an error if the input is not a valid {@link DIDJwk}.
     * @param {string} input
     * @returns {DIDJwk}
     */
    static parse(input) {
        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.didjwk_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DIDJwk.__wrap(ret[0]);
    }
    /**
     * Returns the JSON WEB KEY (JWK) encoded inside this `did:jwk`.
     * @returns {Jwk}
     */
    jwk() {
        const ret = wasm.didjwk_jwk(this.__wbg_ptr);
        return Jwk.__wrap(ret);
    }
    /**
     * Returns the {@link CoreDID} scheme.
     *
     * E.g.
     * - `"did:example:12345678" -> "did"`
     * - `"did:iota:smr:12345678" -> "did"`
     * @returns {string}
     */
    scheme() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.didjwk_scheme(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the {@link CoreDID} authority: the method name and method-id.
     *
     * E.g.
     * - `"did:example:12345678" -> "example:12345678"`
     * - `"did:iota:smr:12345678" -> "iota:smr:12345678"`
     * @returns {string}
     */
    authority() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.didjwk_authority(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the {@link CoreDID} method name.
     *
     * E.g.
     * - `"did:example:12345678" -> "example"`
     * - `"did:iota:smr:12345678" -> "iota"`
     * @returns {string}
     */
    method() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.didjwk_method(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the {@link CoreDID} method-specific ID.
     *
     * E.g.
     * - `"did:example:12345678" -> "12345678"`
     * - `"did:iota:smr:12345678" -> "smr:12345678"`
     * @returns {string}
     */
    methodId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.didjwk_methodId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the {@link CoreDID} as a string.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.didjwk_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {CoreDID}
     */
    toCoreDid() {
        const ret = wasm.didjwk_toCoreDid(this.__wbg_ptr);
        return CoreDID.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.didjwk_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {DIDJwk}
     */
    static fromJSON(json) {
        const ret = wasm.didjwk_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DIDJwk.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {DIDJwk}
     */
    clone() {
        const ret = wasm.didjwk_clone(this.__wbg_ptr);
        return DIDJwk.__wrap(ret);
    }
}
module.exports.DIDJwk = DIDJwk;

const DIDUrlFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_didurl_free(ptr >>> 0, 1));
/**
 * A method agnostic DID Url.
 */
class DIDUrl {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DIDUrl.prototype);
        obj.__wbg_ptr = ptr;
        DIDUrlFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DIDUrlFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_didurl_free(ptr, 0);
    }
    /**
     * Parses a {@link DIDUrl} from the input string.
     * @param {string} input
     * @returns {DIDUrl}
     */
    static parse(input) {
        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.didurl_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DIDUrl.__wrap(ret[0]);
    }
    /**
     * Return a copy of the {@link CoreDID} section of the {@link DIDUrl}.
     * @returns {CoreDID}
     */
    did() {
        const ret = wasm.didurl_did(this.__wbg_ptr);
        return CoreDID.__wrap(ret);
    }
    /**
     * Return a copy of the relative DID Url as a string, including only the path, query, and fragment.
     * @returns {string}
     */
    urlStr() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.didurl_urlStr(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the {@link DIDUrl} method fragment, if any. Excludes the leading '#'.
     * @returns {string | undefined}
     */
    fragment() {
        const ret = wasm.didurl_fragment(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets the `fragment` component of the {@link DIDUrl}.
     * @param {string | null} [value]
     */
    setFragment(value) {
        var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.didurl_setFragment(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the {@link DIDUrl} path.
     * @returns {string | undefined}
     */
    path() {
        const ret = wasm.didurl_path(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets the `path` component of the {@link DIDUrl}.
     * @param {string | null} [value]
     */
    setPath(value) {
        var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.didurl_setPath(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the {@link DIDUrl} method query, if any. Excludes the leading '?'.
     * @returns {string | undefined}
     */
    query() {
        const ret = wasm.didurl_query(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets the `query` component of the {@link DIDUrl}.
     * @param {string | null} [value]
     */
    setQuery(value) {
        var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.didurl_setQuery(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Append a string representing a path, query, and/or fragment, returning a new {@link DIDUrl}.
     *
     * Must begin with a valid delimiter character: '/', '?', '#'. Overwrites the existing URL
     * segment and any following segments in order of path, query, then fragment.
     *
     * I.e.
     * - joining a path will clear the query and fragment.
     * - joining a query will clear the fragment.
     * - joining a fragment will only overwrite the fragment.
     * @param {string} segment
     * @returns {DIDUrl}
     */
    join(segment) {
        const ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.didurl_join(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DIDUrl.__wrap(ret[0]);
    }
    /**
     * Returns the {@link DIDUrl} as a string.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.didurl_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.didurl_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {DIDUrl}
     */
    static fromJSON(json) {
        const ret = wasm.didurl_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DIDUrl.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {DIDUrl}
     */
    clone() {
        const ret = wasm.didurl_clone(this.__wbg_ptr);
        return DIDUrl.__wrap(ret);
    }
}
module.exports.DIDUrl = DIDUrl;

const DecodedJptCredentialFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_decodedjptcredential_free(ptr >>> 0, 1));

class DecodedJptCredential {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DecodedJptCredential.prototype);
        obj.__wbg_ptr = ptr;
        DecodedJptCredentialFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DecodedJptCredentialFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_decodedjptcredential_free(ptr, 0);
    }
    /**
     * Deep clones the object.
     * @returns {DecodedJptCredential}
     */
    clone() {
        const ret = wasm.decodedjptcredential_clone(this.__wbg_ptr);
        return DecodedJptCredential.__wrap(ret);
    }
    /**
     * Returns the {@link Credential} embedded into this JPT.
     * @returns {Credential}
     */
    credential() {
        const ret = wasm.decodedjptcredential_credential(this.__wbg_ptr);
        return Credential.__wrap(ret);
    }
    /**
     * Returns the custom claims parsed from the JPT.
     * @returns {Map<string, any>}
     */
    customClaims() {
        const ret = wasm.decodedjptcredential_customClaims(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @returns {JwpIssued}
     */
    decodedJwp() {
        const ret = wasm.decodedjptcredential_decodedJwp(this.__wbg_ptr);
        return JwpIssued.__wrap(ret);
    }
}
module.exports.DecodedJptCredential = DecodedJptCredential;

const DecodedJptPresentationFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_decodedjptpresentation_free(ptr >>> 0, 1));

class DecodedJptPresentation {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DecodedJptPresentation.prototype);
        obj.__wbg_ptr = ptr;
        DecodedJptPresentationFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DecodedJptPresentationFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_decodedjptpresentation_free(ptr, 0);
    }
    /**
     * Deep clones the object.
     * @returns {DecodedJptPresentation}
     */
    clone() {
        const ret = wasm.decodedjptpresentation_clone(this.__wbg_ptr);
        return DecodedJptPresentation.__wrap(ret);
    }
    /**
     * Returns the {@link Credential} embedded into this JPT.
     * @returns {Credential}
     */
    credential() {
        const ret = wasm.decodedjptpresentation_credential(this.__wbg_ptr);
        return Credential.__wrap(ret);
    }
    /**
     * Returns the custom claims parsed from the JPT.
     * @returns {Map<string, any>}
     */
    customClaims() {
        const ret = wasm.decodedjptpresentation_customClaims(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns the `aud` property parsed from the JWT claims.
     * @returns {string | undefined}
     */
    aud() {
        const ret = wasm.decodedjptpresentation_aud(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
}
module.exports.DecodedJptPresentation = DecodedJptPresentation;

const DecodedJwsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_decodedjws_free(ptr >>> 0, 1));
/**
 * A cryptographically verified decoded token from a JWS.
 *
 * Contains the decoded headers and the raw claims.
 */
class DecodedJws {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DecodedJws.prototype);
        obj.__wbg_ptr = ptr;
        DecodedJwsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DecodedJwsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_decodedjws_free(ptr, 0);
    }
    /**
     * Returns a copy of the parsed claims represented as a string.
     *
     * # Errors
     * An error is thrown if the claims cannot be represented as a string.
     *
     * This error can only occur if the Token was decoded from a detached payload.
     * @returns {string}
     */
    claims() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.decodedjws_claims(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * Return a copy of the parsed claims represented as an array of bytes.
     * @returns {Uint8Array}
     */
    claimsBytes() {
        const ret = wasm.decodedjws_claimsBytes(this.__wbg_ptr);
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * Returns a copy of the protected header.
     * @returns {JwsHeader}
     */
    protectedHeader() {
        const ret = wasm.decodedjws_protectedHeader(this.__wbg_ptr);
        return JwsHeader.__wrap(ret);
    }
    /**
     * Deep clones the object.
     * @returns {DecodedJws}
     */
    clone() {
        const ret = wasm.decodedjws_clone(this.__wbg_ptr);
        return DecodedJws.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.decodedjws_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.DecodedJws = DecodedJws;

const DecodedJwtCredentialFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_decodedjwtcredential_free(ptr >>> 0, 1));
/**
 * A cryptographically verified and decoded Credential.
 *
 * Note that having an instance of this type only means the JWS it was constructed from was verified.
 * It does not imply anything about a potentially present proof property on the credential itself.
 */
class DecodedJwtCredential {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DecodedJwtCredential.prototype);
        obj.__wbg_ptr = ptr;
        DecodedJwtCredentialFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DecodedJwtCredentialFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_decodedjwtcredential_free(ptr, 0);
    }
    /**
     * Returns a copy of the credential parsed to the [Verifiable Credentials Data model](https://www.w3.org/TR/vc-data-model/).
     * @returns {Credential}
     */
    credential() {
        const ret = wasm.decodedjwtcredential_credential(this.__wbg_ptr);
        return Credential.__wrap(ret);
    }
    /**
     * Returns a copy of the protected header parsed from the decoded JWS.
     * @returns {JwsHeader}
     */
    protectedHeader() {
        const ret = wasm.decodedjwtcredential_protectedHeader(this.__wbg_ptr);
        return JwsHeader.__wrap(ret);
    }
    /**
     * The custom claims parsed from the JWT.
     * @returns {Record<string, any> | undefined}
     */
    customClaims() {
        const ret = wasm.decodedjwtcredential_customClaims(this.__wbg_ptr);
        return ret;
    }
    /**
     * Consumes the object and returns the decoded credential.
     *
     * ### Warning
     *
     * This destroys the {@link DecodedJwtCredential} object.
     * @returns {Credential}
     */
    intoCredential() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.decodedjwtcredential_intoCredential(ptr);
        return Credential.__wrap(ret);
    }
}
module.exports.DecodedJwtCredential = DecodedJwtCredential;

const DecodedJwtPresentationFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_decodedjwtpresentation_free(ptr >>> 0, 1));
/**
 * A cryptographically verified and decoded presentation.
 *
 * Note that having an instance of this type only means the JWS it was constructed from was verified.
 * It does not imply anything about a potentially present proof property on the presentation itself.
 */
class DecodedJwtPresentation {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DecodedJwtPresentation.prototype);
        obj.__wbg_ptr = ptr;
        DecodedJwtPresentationFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DecodedJwtPresentationFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_decodedjwtpresentation_free(ptr, 0);
    }
    /**
     * @returns {Presentation}
     */
    presentation() {
        const ret = wasm.decodedjwtpresentation_presentation(this.__wbg_ptr);
        return Presentation.__wrap(ret);
    }
    /**
     * Returns a copy of the protected header parsed from the decoded JWS.
     * @returns {JwsHeader}
     */
    protectedHeader() {
        const ret = wasm.decodedjwtpresentation_protectedHeader(this.__wbg_ptr);
        return JwsHeader.__wrap(ret);
    }
    /**
     * Consumes the object and returns the decoded presentation.
     *
     * ### Warning
     * This destroys the {@link DecodedJwtPresentation} object.
     * @returns {Presentation}
     */
    intoPresentation() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.decodedjwtpresentation_intoPresentation(ptr);
        return Presentation.__wrap(ret);
    }
    /**
     * The expiration date parsed from the JWT claims.
     * @returns {Timestamp | undefined}
     */
    expirationDate() {
        const ret = wasm.decodedjwtpresentation_expirationDate(this.__wbg_ptr);
        return ret === 0 ? undefined : Timestamp.__wrap(ret);
    }
    /**
     * The issuance date parsed from the JWT claims.
     * @returns {Timestamp | undefined}
     */
    issuanceDate() {
        const ret = wasm.decodedjwtpresentation_issuanceDate(this.__wbg_ptr);
        return ret === 0 ? undefined : Timestamp.__wrap(ret);
    }
    /**
     * The `aud` property parsed from JWT claims.
     * @returns {string | undefined}
     */
    audience() {
        const ret = wasm.decodedjwtpresentation_audience(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * The custom claims parsed from the JWT.
     * @returns {Record<string, any> | undefined}
     */
    customClaims() {
        const ret = wasm.decodedjwtpresentation_customClaims(this.__wbg_ptr);
        return ret;
    }
}
module.exports.DecodedJwtPresentation = DecodedJwtPresentation;

const DelegateTokenFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_delegatetoken_free(ptr >>> 0, 1));

class DelegateToken {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DelegateToken.prototype);
        obj.__wbg_ptr = ptr;
        DelegateTokenFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DelegateTokenFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_delegatetoken_free(ptr, 0);
    }
    /**
     * @param {ControllerCap} controller_cap
     * @param {string} recipient
     * @param {DelegatePermissions | undefined | null} permissions
     */
    constructor(controller_cap, recipient, permissions) {
        _assertClass(controller_cap, ControllerCap);
        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.delegatetoken_new(controller_cap.__wbg_ptr, ptr0, len0, isLikeNone(permissions) ? 0x100000001 : (permissions) >>> 0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        DelegateTokenFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {IdentityClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        _assertClass(client, IdentityClientReadOnly);
        const ret = wasm.delegatetoken_buildProgrammableTransaction(this.__wbg_ptr, client.__wbg_ptr);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {IdentityClientReadOnly} client
     * @returns {Promise<DelegationToken>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        _assertClass(client, IdentityClientReadOnly);
        const ret = wasm.delegatetoken_apply(ptr, wasm_effects, client.__wbg_ptr);
        return ret;
    }
}
module.exports.DelegateToken = DelegateToken;

const DelegationTokenFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_delegationtoken_free(ptr >>> 0, 1));
/**
 * A token minted by a controller that allows another entity to act in
 * its stead - with full or reduced permissions.
 */
class DelegationToken {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DelegationToken.prototype);
        obj.__wbg_ptr = ptr;
        DelegationTokenFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DelegationTokenFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_delegationtoken_free(ptr, 0);
    }
    /**
     * Returns the ID of this {@link DelegationToken}.
     * @returns {string}
     */
    get id() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.delegationtoken_id(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the ID of the {@link ControllerCap} that minted
     * this {@link DelegationToken}.
     * @returns {string}
     */
    get controller() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.delegationtoken_controller(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the ID of the object this token controls.
     * @returns {string}
     */
    get controllerOf() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.delegationtoken_controllerOf(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the permissions of this token.
     * @returns {DelegatePermissions}
     */
    get permissions() {
        const ret = wasm.delegationtoken_permissions(this.__wbg_ptr);
        return ret >>> 0;
    }
}
module.exports.DelegationToken = DelegationToken;

const DelegationTokenRevocationFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_delegationtokenrevocation_free(ptr >>> 0, 1));
/**
 * Transaction for revoking / unrevoking a {@link DelegationToken}.
 * If no `revoke` parameter is passed, or `true` is passed, this transaction
 * will *revoke* the passed token - *unrevoke* otherwise.
 */
class DelegationTokenRevocation {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DelegationTokenRevocation.prototype);
        obj.__wbg_ptr = ptr;
        DelegationTokenRevocationFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DelegationTokenRevocationFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_delegationtokenrevocation_free(ptr, 0);
    }
    /**
     * @param {OnChainIdentity} identity
     * @param {ControllerCap} controller_cap
     * @param {DelegationToken} delegation_token
     * @param {boolean | null} [revoke]
     */
    constructor(identity, controller_cap, delegation_token, revoke) {
        _assertClass(identity, OnChainIdentity);
        _assertClass(controller_cap, ControllerCap);
        _assertClass(delegation_token, DelegationToken);
        const ret = wasm.delegationtokenrevocation_new(identity.__wbg_ptr, controller_cap.__wbg_ptr, delegation_token.__wbg_ptr, isLikeNone(revoke) ? 0xFFFFFF : revoke ? 1 : 0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        DelegationTokenRevocationFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns whether this transaction will revoke the given token.
     * @returns {boolean}
     */
    isRevocation() {
        const ret = wasm.delegationtokenrevocation_isRevocation(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * Returns the ID of the token handled by this transaction.
     * @returns {string}
     */
    tokenId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.delegationtokenrevocation_tokenId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {IdentityClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        _assertClass(client, IdentityClientReadOnly);
        const ret = wasm.delegationtokenrevocation_buildProgrammableTransaction(this.__wbg_ptr, client.__wbg_ptr);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {IdentityClientReadOnly} client
     * @returns {Promise<void>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        _assertClass(client, IdentityClientReadOnly);
        const ret = wasm.delegationtokenrevocation_apply(ptr, wasm_effects, client.__wbg_ptr);
        return ret;
    }
}
module.exports.DelegationTokenRevocation = DelegationTokenRevocation;

const DeleteDelegationTokenFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_deletedelegationtoken_free(ptr >>> 0, 1));
/**
 * A transaction to delete a given {@link DelegationToken}.
 */
class DeleteDelegationToken {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DeleteDelegationToken.prototype);
        obj.__wbg_ptr = ptr;
        DeleteDelegationTokenFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DeleteDelegationTokenFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_deletedelegationtoken_free(ptr, 0);
    }
    /**
     * @param {OnChainIdentity} identity
     * @param {DelegationToken} delegation_token
     */
    constructor(identity, delegation_token) {
        _assertClass(identity, OnChainIdentity);
        _assertClass(delegation_token, DelegationToken);
        var ptr0 = delegation_token.__destroy_into_raw();
        const ret = wasm.deletedelegationtoken_new(identity.__wbg_ptr, ptr0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        DeleteDelegationTokenFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @returns {string}
     */
    tokenId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.deletedelegationtoken_tokenId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {IdentityClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        _assertClass(client, IdentityClientReadOnly);
        const ret = wasm.deletedelegationtoken_buildProgrammableTransaction(this.__wbg_ptr, client.__wbg_ptr);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {IdentityClientReadOnly} client
     * @returns {Promise<void>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        _assertClass(client, IdentityClientReadOnly);
        const ret = wasm.deletedelegationtoken_apply(ptr, wasm_effects, client.__wbg_ptr);
        return ret;
    }
}
module.exports.DeleteDelegationToken = DeleteDelegationToken;

const DisclosureFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_disclosure_free(ptr >>> 0, 1));
/**
 * Represents an elements constructing a disclosure.
 * Object properties and array elements disclosures are supported.
 *
 * See: https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-disclosures
 */
class Disclosure {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Disclosure.prototype);
        obj.__wbg_ptr = ptr;
        DisclosureFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DisclosureFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_disclosure_free(ptr, 0);
    }
    /**
     * @param {string} salt
     * @param {string | null | undefined} claim_name
     * @param {any} claim_value
     */
    constructor(salt, claim_name, claim_value) {
        const ptr0 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(claim_name) ? 0 : passStringToWasm0(claim_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        const ret = wasm.disclosure_new(ptr0, len0, ptr1, len1, claim_value);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        DisclosureFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Parses a Base64 encoded disclosure into a `Disclosure`.
     *
     * ## Error
     *
     * Returns an `InvalidDisclosure` if input is not a valid disclosure.
     * @param {string} disclosure
     * @returns {Disclosure}
     */
    static parse(disclosure) {
        const ptr0 = passStringToWasm0(disclosure, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.disclosure_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Disclosure.__wrap(ret[0]);
    }
    /**
     * Returns a copy of the base64url-encoded string.
     * @returns {string}
     */
    disclosure() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.disclosure_disclosure(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the base64url-encoded string.
     * @returns {string}
     */
    toEncodedString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.disclosure_toEncodedString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the base64url-encoded string.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.disclosure_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the salt value.
     * @returns {string}
     */
    salt() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.disclosure_salt(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the claim name, optional for array elements.
     * @returns {string | undefined}
     */
    claimName() {
        const ret = wasm.disclosure_claimName(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Returns a copy of the claim Value which can be of any type.
     * @returns {any}
     */
    claimValue() {
        const ret = wasm.disclosure_claimValue(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.disclosure_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Disclosure}
     */
    static fromJSON(json) {
        const ret = wasm.disclosure_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Disclosure.__wrap(ret[0]);
    }
}
module.exports.Disclosure = Disclosure;

const DisclosureV2Finalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_disclosurev2_free(ptr >>> 0, 1));
/**
 * A disclosable value.
 * Both object properties and array elements disclosures are supported.
 *
 * See: https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-disclosures
 */
class DisclosureV2 {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DisclosureV2.prototype);
        obj.__wbg_ptr = ptr;
        DisclosureV2Finalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    static __unwrap(jsValue) {
        if (!(jsValue instanceof DisclosureV2)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    toJSON() {
        return {
            salt: this.salt,
            claimName: this.claimName,
            claimValue: this.claimValue,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DisclosureV2Finalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_disclosurev2_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get salt() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_disclosurev2_salt(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set salt(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_disclosurev2_salt(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string | undefined}
     */
    get claimName() {
        const ret = wasm.__wbg_get_disclosurev2_claimName(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @param {string | null} [arg0]
     */
    set claimName(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_disclosurev2_claimName(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {any}
     */
    get claimValue() {
        const ret = wasm.__wbg_get_disclosurev2_claimValue(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {any} arg0
     */
    set claimValue(arg0) {
        wasm.__wbg_set_disclosurev2_claimValue(this.__wbg_ptr, arg0);
    }
    /**
     * @param {string} s
     * @returns {DisclosureV2}
     */
    static parse(s) {
        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.disclosurev2_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DisclosureV2.__wrap(ret[0]);
    }
    /**
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.disclosurev2_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
}
module.exports.DisclosureV2 = DisclosureV2;

const DomainLinkageConfigurationFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_domainlinkageconfiguration_free(ptr >>> 0, 1));
/**
 * DID Configuration Resource which contains Domain Linkage Credentials.
 * It can be placed in an origin's `.well-known` directory to prove linkage between the origin and a DID.
 * See: <https://identity.foundation/.well-known/resources/did-configuration/#did-configuration-resource>
 *
 * Note:
 * - Only the [JSON Web Token Proof Format](https://identity.foundation/.well-known/resources/did-configuration/#json-web-token-proof-format)
 */
class DomainLinkageConfiguration {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(DomainLinkageConfiguration.prototype);
        obj.__wbg_ptr = ptr;
        DomainLinkageConfigurationFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DomainLinkageConfigurationFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_domainlinkageconfiguration_free(ptr, 0);
    }
    /**
     * Constructs a new {@link DomainLinkageConfiguration}.
     * @param {Array<Jwt>} linkedDids
     */
    constructor(linkedDids) {
        const ret = wasm.domainlinkageconfiguration_new(linkedDids);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        DomainLinkageConfigurationFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * List of the Domain Linkage Credentials.
     * @returns {Array<Jwt>}
     */
    linkedDids() {
        const ret = wasm.domainlinkageconfiguration_linkedDids(this.__wbg_ptr);
        return ret;
    }
    /**
     * List of the issuers of the Domain Linkage Credentials.
     * @returns {Array<CoreDID>}
     */
    issuers() {
        const ret = wasm.domainlinkageconfiguration_issuers(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.domainlinkageconfiguration_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {DomainLinkageConfiguration}
     */
    static fromJSON(json) {
        const ret = wasm.domainlinkageconfiguration_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DomainLinkageConfiguration.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {DomainLinkageConfiguration}
     */
    clone() {
        const ret = wasm.domainlinkageconfiguration_clone(this.__wbg_ptr);
        return DomainLinkageConfiguration.__wrap(ret);
    }
}
module.exports.DomainLinkageConfiguration = DomainLinkageConfiguration;

const DurationFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_duration_free(ptr >>> 0, 1));
/**
 * A span of time.
 */
class Duration {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Duration.prototype);
        obj.__wbg_ptr = ptr;
        DurationFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        DurationFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_duration_free(ptr, 0);
    }
    /**
     * Create a new {@link Duration} with the given number of seconds.
     * @param {number} seconds
     * @returns {Duration}
     */
    static seconds(seconds) {
        const ret = wasm.duration_seconds(seconds);
        return Duration.__wrap(ret);
    }
    /**
     * Create a new {@link Duration} with the given number of minutes.
     * @param {number} minutes
     * @returns {Duration}
     */
    static minutes(minutes) {
        const ret = wasm.duration_minutes(minutes);
        return Duration.__wrap(ret);
    }
    /**
     * Create a new {@link Duration} with the given number of hours.
     * @param {number} hours
     * @returns {Duration}
     */
    static hours(hours) {
        const ret = wasm.duration_hours(hours);
        return Duration.__wrap(ret);
    }
    /**
     * Create a new {@link Duration} with the given number of days.
     * @param {number} days
     * @returns {Duration}
     */
    static days(days) {
        const ret = wasm.duration_days(days);
        return Duration.__wrap(ret);
    }
    /**
     * Create a new {@link Duration} with the given number of weeks.
     * @param {number} weeks
     * @returns {Duration}
     */
    static weeks(weeks) {
        const ret = wasm.duration_weeks(weeks);
        return Duration.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.duration_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Duration}
     */
    static fromJSON(json) {
        const ret = wasm.duration_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Duration.__wrap(ret[0]);
    }
}
module.exports.Duration = Duration;

const EcDSAJwsVerifierFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_ecdsajwsverifier_free(ptr >>> 0, 1));
/**
 * An implementor of `IJwsVerifier` that can handle the
 * `EcDSA` algorithm.
 */
class EcDSAJwsVerifier {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        EcDSAJwsVerifierFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_ecdsajwsverifier_free(ptr, 0);
    }
    /**
     * Constructs an EcDSAJwsVerifier.
     */
    constructor() {
        const ret = wasm.ecdsajwsverifier_new();
        this.__wbg_ptr = ret >>> 0;
        EcDSAJwsVerifierFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Verify a JWS signature secured with the `EcDSA` algorithm.
     * Only the `ES256` and `ES256K` curves are supported for now.
     *
     * # Warning
     *
     * This function does not check the `alg` property in the protected header. Callers are expected to assert this
     * prior to calling the function.
     * @param {JwsAlgorithm} alg
     * @param {Uint8Array} signingInput
     * @param {Uint8Array} decodedSignature
     * @param {Jwk} publicKey
     */
    verify(alg, signingInput, decodedSignature, publicKey) {
        const ptr0 = passArray8ToWasm0(signingInput, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passArray8ToWasm0(decodedSignature, wasm.__wbindgen_malloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(publicKey, Jwk);
        const ret = wasm.ecdsajwsverifier_verify(this.__wbg_ptr, alg, ptr0, len0, ptr1, len1, publicKey.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
}
module.exports.EcDSAJwsVerifier = EcDSAJwsVerifier;

const EdDSAJwsVerifierFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_eddsajwsverifier_free(ptr >>> 0, 1));
/**
 * An implementor of `IJwsVerifier` that can handle the
 * `EdDSA` algorithm.
 */
class EdDSAJwsVerifier {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        EdDSAJwsVerifierFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_eddsajwsverifier_free(ptr, 0);
    }
    /**
     * Constructs an EdDSAJwsVerifier.
     */
    constructor() {
        const ret = wasm.eddsajwsverifier_new();
        this.__wbg_ptr = ret >>> 0;
        EdDSAJwsVerifierFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Verify a JWS signature secured with the `EdDSA` algorithm.
     * Only the `Ed25519` curve is supported for now.
     *
     * This function is useful when one is building an `IJwsVerifier` that extends the default provided by
     * the IOTA Identity Framework.
     *
     * # Warning
     *
     * This function does not check whether `alg = EdDSA` in the protected header. Callers are expected to assert this
     * prior to calling the function.
     * @param {JwsAlgorithm} alg
     * @param {Uint8Array} signingInput
     * @param {Uint8Array} decodedSignature
     * @param {Jwk} publicKey
     */
    verify(alg, signingInput, decodedSignature, publicKey) {
        const ptr0 = passArray8ToWasm0(signingInput, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passArray8ToWasm0(decodedSignature, wasm.__wbindgen_malloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(publicKey, Jwk);
        const ret = wasm.eddsajwsverifier_verify(this.__wbg_ptr, alg, ptr0, len0, ptr1, len1, publicKey.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
}
module.exports.EdDSAJwsVerifier = EdDSAJwsVerifier;

const ExecuteConfigChangeProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_executeconfigchangeproposal_free(ptr >>> 0, 1));

class ExecuteConfigChangeProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ExecuteConfigChangeProposal.prototype);
        obj.__wbg_ptr = ptr;
        ExecuteConfigChangeProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ExecuteConfigChangeProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_executeconfigchangeproposal_free(ptr, 0);
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ret = wasm.executeconfigchangeproposal_buildProgrammableTransaction(this.__wbg_ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {Promise<void>}
     */
    apply(wasm_effects, client) {
        const ret = wasm.executeconfigchangeproposal_apply(this.__wbg_ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.ExecuteConfigChangeProposal = ExecuteConfigChangeProposal;

const ExecuteSendProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_executesendproposal_free(ptr >>> 0, 1));

class ExecuteSendProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ExecuteSendProposal.prototype);
        obj.__wbg_ptr = ptr;
        ExecuteSendProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ExecuteSendProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_executesendproposal_free(ptr, 0);
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.executesendproposal_buildProgrammableTransaction(ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {Promise<void>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.executesendproposal_apply(ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.ExecuteSendProposal = ExecuteSendProposal;

const ExecuteUpdateDidProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_executeupdatedidproposal_free(ptr >>> 0, 1));

class ExecuteUpdateDidProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ExecuteUpdateDidProposal.prototype);
        obj.__wbg_ptr = ptr;
        ExecuteUpdateDidProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ExecuteUpdateDidProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_executeupdatedidproposal_free(ptr, 0);
    }
    /**
     * @param {UpdateDidProposal} proposal
     * @param {OnChainIdentity} identity
     * @param {ControllerToken} controller_token
     * @returns {ExecuteUpdateDidProposal}
     */
    static new(proposal, identity, controller_token) {
        _assertClass(proposal, UpdateDidProposal);
        var ptr0 = proposal.__destroy_into_raw();
        _assertClass(identity, OnChainIdentity);
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.executeupdatedidproposal_new(ptr0, identity.__wbg_ptr, controller_token.__wbg_ptr);
        return ExecuteUpdateDidProposal.__wrap(ret);
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ret = wasm.executeupdatedidproposal_buildProgrammableTransaction(this.__wbg_ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {Promise<void>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.executeupdatedidproposal_apply(ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.ExecuteUpdateDidProposal = ExecuteUpdateDidProposal;

const IdentityFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_identity_free(ptr >>> 0, 1));

class Identity {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Identity.prototype);
        obj.__wbg_ptr = ptr;
        IdentityFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IdentityFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_identity_free(ptr, 0);
    }
    /**
     * TODO: check if we can actually do this like this w/o consuming the container on the 1st try
     * TODO: add support for unmigrated aliases
     * @returns {OnChainIdentity | undefined}
     */
    toFullFledged() {
        const ret = wasm.identity_toFullFledged(this.__wbg_ptr);
        return ret === 0 ? undefined : OnChainIdentity.__wrap(ret);
    }
}
module.exports.Identity = Identity;

const IdentityBuilderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_identitybuilder_free(ptr >>> 0, 1));

class IdentityBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IdentityBuilder.prototype);
        obj.__wbg_ptr = ptr;
        IdentityBuilderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IdentityBuilderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_identitybuilder_free(ptr, 0);
    }
    /**
     * @param {IotaDocument} did_doc
     */
    constructor(did_doc) {
        _assertClass(did_doc, IotaDocument);
        const ret = wasm.identitybuilder_new(did_doc.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        IdentityBuilderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {string} address
     * @param {bigint} voting_power
     * @param {boolean | null} [can_delegate]
     * @returns {IdentityBuilder}
     */
    controller(address, voting_power, can_delegate) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.identitybuilder_controller(ptr, ptr0, len0, voting_power, isLikeNone(can_delegate) ? 0xFFFFFF : can_delegate ? 1 : 0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IdentityBuilder.__wrap(ret[0]);
    }
    /**
     * @param {bigint} threshold
     * @returns {IdentityBuilder}
     */
    threshold(threshold) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.identitybuilder_threshold(ptr, threshold);
        return IdentityBuilder.__wrap(ret);
    }
    /**
     * @param {ControllerAndVotingPower[]} controllers
     * @returns {IdentityBuilder}
     */
    controllers(controllers) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passArrayJsValueToWasm0(controllers, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.identitybuilder_controllers(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IdentityBuilder.__wrap(ret[0]);
    }
    /**
     * @returns {TransactionBuilder<CreateIdentity>}
     */
    finish() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.identitybuilder_finish(ptr);
        return TransactionBuilder.__wrap(ret);
    }
}
module.exports.IdentityBuilder = IdentityBuilder;

const IdentityClientFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_identityclient_free(ptr >>> 0, 1));
/**
 * A client to interact with identities on the IOTA chain.
 *
 * Used for read and write operations. If you just want read capabilities,
 * you can also use {@link IdentityClientReadOnly}, which does not need an account and signing capabilities.
 */
class IdentityClient {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IdentityClient.prototype);
        obj.__wbg_ptr = ptr;
        IdentityClientFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IdentityClientFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_identityclient_free(ptr, 0);
    }
    /**
     * @param {IdentityClientReadOnly} client
     * @param {TransactionSigner} signer
     * @returns {Promise<IdentityClient>}
     */
    static create(client, signer) {
        _assertClass(client, IdentityClientReadOnly);
        var ptr0 = client.__destroy_into_raw();
        const ret = wasm.identityclient_create(ptr0, signer);
        return ret;
    }
    /**
     * @returns {PublicKey}
     */
    senderPublicKey() {
        const ret = wasm.identityclient_senderPublicKey(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @returns {string}
     */
    senderAddress() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.identityclient_senderAddress(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {string}
     */
    network() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.identityclient_network(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {IotaDocument} iota_document
     * @returns {IdentityBuilder}
     */
    createIdentity(iota_document) {
        _assertClass(iota_document, IotaDocument);
        const ret = wasm.identityclient_createIdentity(this.__wbg_ptr, iota_document.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IdentityBuilder.__wrap(ret[0]);
    }
    /**
     * @param {string} object_id
     * @returns {Promise<Identity>}
     */
    getIdentity(object_id) {
        const ptr0 = passStringToWasm0(object_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.identityclient_getIdentity(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @returns {string}
     */
    packageId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.identityclient_packageId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {string[]}
     */
    packageHistory() {
        const ret = wasm.identityclient_packageHistory(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {IotaDID} did
     * @returns {Promise<IotaDocument>}
     */
    resolveDid(did) {
        _assertClass(did, IotaDID);
        const ret = wasm.identityclient_resolveDid(this.__wbg_ptr, did.__wbg_ptr);
        return ret;
    }
    /**
     * @param {IotaDocument} document
     * @param {string} controller
     * @returns {TransactionBuilder<PublishDidDocument>}
     */
    publishDidDocument(document, controller) {
        _assertClass(document, IotaDocument);
        const ptr0 = passStringToWasm0(controller, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.identityclient_publishDidDocument(this.__wbg_ptr, document.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return TransactionBuilder.__wrap(ret[0]);
    }
    /**
     * @param {IotaDocument} document
     * @param {bigint} gas_budget
     * @returns {Promise<IotaDocument>}
     */
    publishDidDocumentUpdate(document, gas_budget) {
        _assertClass(document, IotaDocument);
        const ret = wasm.identityclient_publishDidDocumentUpdate(this.__wbg_ptr, document.__wbg_ptr, gas_budget);
        return ret;
    }
    /**
     * @param {IotaDID} did
     * @param {bigint} gas_budget
     * @returns {Promise<void>}
     */
    deactivateDidOutput(did, gas_budget) {
        _assertClass(did, IotaDID);
        const ret = wasm.identityclient_deactivateDidOutput(this.__wbg_ptr, did.__wbg_ptr, gas_budget);
        return ret;
    }
    /**
     * @returns {IotaClient}
     */
    iotaClient() {
        const ret = wasm.identityclient_iotaClient(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {TransactionSigner}
     */
    signer() {
        const ret = wasm.identityclient_signer(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {IdentityClientReadOnly}
     */
    readOnly() {
        const ret = wasm.identityclient_readOnly(this.__wbg_ptr);
        return IdentityClientReadOnly.__wrap(ret);
    }
}
module.exports.IdentityClient = IdentityClient;

const IdentityClientReadOnlyFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_identityclientreadonly_free(ptr >>> 0, 1));
/**
 * A client to interact with identities on the IOTA chain.
 *
 * Used for read operations, so does not need an account and signing capabilities.
 * If you want to write to the chain, use {@link IdentityClient}.
 */
class IdentityClientReadOnly {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IdentityClientReadOnly.prototype);
        obj.__wbg_ptr = ptr;
        IdentityClientReadOnlyFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IdentityClientReadOnlyFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_identityclientreadonly_free(ptr, 0);
    }
    /**
     * @param {IotaClient} iota_client
     * @returns {Promise<IdentityClientReadOnly>}
     */
    static create(iota_client) {
        const ret = wasm.identityclientreadonly_create(iota_client);
        return ret;
    }
    /**
     * @param {IotaClient} iota_client
     * @param {string} iota_identity_pkg_id
     * @returns {Promise<IdentityClientReadOnly>}
     */
    static createWithPkgId(iota_client, iota_identity_pkg_id) {
        const ptr0 = passStringToWasm0(iota_identity_pkg_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.identityclientreadonly_createWithPkgId(iota_client, ptr0, len0);
        return ret;
    }
    /**
     * @returns {string}
     */
    packageId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.identityclientreadonly_packageId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {string[]}
     */
    packageHistory() {
        const ret = wasm.identityclientreadonly_packageHistory(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @returns {IotaClient}
     */
    iotaClient() {
        const ret = wasm.identityclientreadonly_iotaClient(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {string}
     */
    network() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.identityclientreadonly_network(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {IotaDID} did
     * @returns {Promise<IotaDocument>}
     */
    resolveDid(did) {
        _assertClass(did, IotaDID);
        const ret = wasm.identityclientreadonly_resolveDid(this.__wbg_ptr, did.__wbg_ptr);
        return ret;
    }
    /**
     * @param {string} object_id
     * @returns {Promise<Identity>}
     */
    getIdentity(object_id) {
        const ptr0 = passStringToWasm0(object_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.identityclientreadonly_getIdentity(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
}
module.exports.IdentityClientReadOnly = IdentityClientReadOnly;

const IotaDIDFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_iotadid_free(ptr >>> 0, 1));
/**
 * A DID conforming to the IOTA DID method specification.
 *
 * @typicalname did
 */
class IotaDID {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IotaDID.prototype);
        obj.__wbg_ptr = ptr;
        IotaDIDFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
            METHOD: this.METHOD,
            DEFAULT_NETWORK: this.DEFAULT_NETWORK,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IotaDIDFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_iotadid_free(ptr, 0);
    }
    /**
     * The IOTA DID method name (`"iota"`).
     * @returns {string}
     */
    static get METHOD() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_static_method();
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * The default Tangle network (`"iota"`).
     * @returns {string}
     */
    static get DEFAULT_NETWORK() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_static_default_network();
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Constructs a new {@link IotaDID} from a byte representation of the tag and the given
     * network name.
     *
     * See also {@link IotaDID.placeholder}.
     * @param {Uint8Array} bytes
     * @param {string} network
     */
    constructor(bytes, network) {
        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.iotadid_new(ptr0, len0, ptr1, len1);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        IotaDIDFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Constructs a new {@link IotaDID} from a hex representation of an Alias Id and the given
     * network name.
     * @param {string} objectId
     * @param {string} network
     * @returns {IotaDID}
     */
    static fromAliasId(objectId, network) {
        const ptr0 = passStringToWasm0(objectId, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.iotadid_fromAliasId(ptr0, len0, ptr1, len1);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDID.__wrap(ret[0]);
    }
    /**
     * Creates a new placeholder {@link IotaDID} with the given network name.
     *
     * E.g. `did:iota:smr:0x0000000000000000000000000000000000000000000000000000000000000000`.
     * @param {string} network
     * @returns {IotaDID}
     */
    static placeholder(network) {
        const ptr0 = passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.iotadid_placeholder(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDID.__wrap(ret[0]);
    }
    /**
     * Parses a {@link IotaDID} from the input string.
     * @param {string} input
     * @returns {IotaDID}
     */
    static parse(input) {
        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.iotadid_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDID.__wrap(ret[0]);
    }
    /**
     * Returns the Tangle network name of the {@link IotaDID}.
     * @returns {string}
     */
    network() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_network(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the unique tag of the {@link IotaDID}.
     * @returns {string}
     */
    tag() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_tag(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the DID represented as a {@link CoreDID}.
     * @returns {CoreDID}
     */
    toCoreDid() {
        const ret = wasm.iotadid_toCoreDid(this.__wbg_ptr);
        return CoreDID.__wrap(ret);
    }
    /**
     * Returns the `DID` scheme.
     *
     * E.g.
     * - `"did:example:12345678" -> "did"`
     * - `"did:iota:main:12345678" -> "did"`
     * @returns {string}
     */
    scheme() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_scheme(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the `DID` authority: the method name and method-id.
     *
     * E.g.
     * - `"did:example:12345678" -> "example:12345678"`
     * - `"did:iota:main:12345678" -> "iota:main:12345678"`
     * @returns {string}
     */
    authority() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_authority(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the `DID` method name.
     *
     * E.g.
     * - `"did:example:12345678" -> "example"`
     * - `"did:iota:main:12345678" -> "iota"`
     * @returns {string}
     */
    method() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_method(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the `DID` method-specific ID.
     *
     * E.g.
     * - `"did:example:12345678" -> "12345678"`
     * - `"did:iota:main:12345678" -> "main:12345678"`
     * @returns {string}
     */
    methodId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_methodId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Construct a new {@link DIDUrl} by joining with a relative DID Url string.
     * @param {string} segment
     * @returns {DIDUrl}
     */
    join(segment) {
        const ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.iotadid_join(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DIDUrl.__wrap(ret[0]);
    }
    /**
     * Clones the `DID` into a {@link DIDUrl}.
     * @returns {DIDUrl}
     */
    toUrl() {
        const ret = wasm.iotadid_toUrl(this.__wbg_ptr);
        return DIDUrl.__wrap(ret);
    }
    /**
     * Returns the hex-encoded AliasId with a '0x' prefix, from the DID tag.
     * @returns {string}
     */
    toAliasId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_toAliasId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Converts the `DID` into a {@link DIDUrl}, consuming it.
     * @returns {DIDUrl}
     */
    intoUrl() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.iotadid_intoUrl(ptr);
        return DIDUrl.__wrap(ret);
    }
    /**
     * Returns the `DID` as a string.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.iotadid_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.iotadid_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {IotaDID}
     */
    static fromJSON(json) {
        const ret = wasm.iotadid_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDID.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {IotaDID}
     */
    clone() {
        const ret = wasm.iotadid_clone(this.__wbg_ptr);
        return IotaDID.__wrap(ret);
    }
}
module.exports.IotaDID = IotaDID;

const IotaDocumentFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_iotadocument_free(ptr >>> 0, 1));
/**
 * A DID Document adhering to the IOTA DID method specification.
 *
 * Note: All methods that involve reading from this class may potentially raise an error
 * if the object is being concurrently modified.
 */
class IotaDocument {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IotaDocument.prototype);
        obj.__wbg_ptr = ptr;
        IotaDocumentFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IotaDocumentFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_iotadocument_free(ptr, 0);
    }
    /**
     * Constructs an empty IOTA DID Document with a {@link IotaDID.placeholder} identifier
     * for the given `network`.
     * @param {string} network
     */
    constructor(network) {
        const ptr0 = passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.iotadocument_new(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        IotaDocumentFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Constructs an empty DID Document with the given identifier.
     * @param {IotaDID} id
     * @returns {IotaDocument}
     */
    static newWithId(id) {
        _assertClass(id, IotaDID);
        const ret = wasm.iotadocument_newWithId(id.__wbg_ptr);
        return IotaDocument.__wrap(ret);
    }
    /**
     * Returns a copy of the DID Document `id`.
     * @returns {IotaDID}
     */
    id() {
        const ret = wasm.iotadocument_id(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDID.__wrap(ret[0]);
    }
    /**
     * Returns a copy of the list of document controllers.
     *
     * NOTE: controllers are determined by the `state_controller` unlock condition of the output
     * during resolution and are omitted when publishing.
     * @returns {IotaDID[]}
     */
    controller() {
        const ret = wasm.iotadocument_controller(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sets the controllers of the document.
     *
     * Note: Duplicates will be ignored.
     * Use `null` to remove all controllers.
     * @param {IotaDID[] | null} controller
     */
    setController(controller) {
        const ret = wasm.iotadocument_setController(this.__wbg_ptr, controller);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the document's `alsoKnownAs` set.
     * @returns {Array<string>}
     */
    alsoKnownAs() {
        const ret = wasm.iotadocument_alsoKnownAs(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sets the `alsoKnownAs` property in the DID document.
     * @param {string | string[] | null} urls
     */
    setAlsoKnownAs(urls) {
        const ret = wasm.iotadocument_setAlsoKnownAs(this.__wbg_ptr, urls);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the custom DID Document properties.
     * @returns {Map<string, any>}
     */
    properties() {
        const ret = wasm.iotadocument_properties(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sets a custom property in the DID Document.
     * If the value is set to `null`, the custom property will be removed.
     *
     * ### WARNING
     *
     * This method can overwrite existing properties like `id` and result in an invalid document.
     * @param {string} key
     * @param {any} value
     */
    setPropertyUnchecked(key, value) {
        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.iotadocument_setPropertyUnchecked(this.__wbg_ptr, ptr0, len0, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Return a set of all {@link Service} in the document.
     * @returns {Service[]}
     */
    service() {
        const ret = wasm.iotadocument_service(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Add a new {@link Service} to the document.
     *
     * Returns `true` if the service was added.
     * @param {Service} service
     */
    insertService(service) {
        _assertClass(service, Service);
        const ret = wasm.iotadocument_insertService(this.__wbg_ptr, service.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Remove a {@link Service} identified by the given {@link DIDUrl} from the document.
     *
     * Returns `true` if a service was removed.
     * @param {DIDUrl} did
     * @returns {Service | undefined}
     */
    removeService(did) {
        _assertClass(did, DIDUrl);
        const ret = wasm.iotadocument_removeService(this.__wbg_ptr, did.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : Service.__wrap(ret[0]);
    }
    /**
     * Returns the first {@link Service} with an `id` property matching the provided `query`,
     * if present.
     * @param {DIDUrl | string} query
     * @returns {Service | undefined}
     */
    resolveService(query) {
        const ret = wasm.iotadocument_resolveService(this.__wbg_ptr, query);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : Service.__wrap(ret[0]);
    }
    /**
     * Returns a list of all {@link VerificationMethod} in the DID Document,
     * whose verification relationship matches `scope`.
     *
     * If `scope` is not set, a list over the **embedded** methods is returned.
     * @param {MethodScope | null} [scope]
     * @returns {VerificationMethod[]}
     */
    methods(scope) {
        const ret = wasm.iotadocument_methods(this.__wbg_ptr, isLikeNone(scope) ? 0 : addToExternrefTable0(scope));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Adds a new `method` to the document in the given `scope`.
     * @param {VerificationMethod} method
     * @param {MethodScope} scope
     */
    insertMethod(method, scope) {
        _assertClass(method, VerificationMethod);
        _assertClass(scope, MethodScope);
        const ret = wasm.iotadocument_insertMethod(this.__wbg_ptr, method.__wbg_ptr, scope.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Removes all references to the specified Verification Method.
     * @param {DIDUrl} did
     * @returns {VerificationMethod | undefined}
     */
    removeMethod(did) {
        _assertClass(did, DIDUrl);
        const ret = wasm.iotadocument_removeMethod(this.__wbg_ptr, did.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : VerificationMethod.__wrap(ret[0]);
    }
    /**
     * Returns a copy of the first verification method with an `id` property
     * matching the provided `query` and the verification relationship
     * specified by `scope`, if present.
     * @param {DIDUrl | string} query
     * @param {MethodScope | null} [scope]
     * @returns {VerificationMethod | undefined}
     */
    resolveMethod(query, scope) {
        const ret = wasm.iotadocument_resolveMethod(this.__wbg_ptr, query, isLikeNone(scope) ? 0 : addToExternrefTable0(scope));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : VerificationMethod.__wrap(ret[0]);
    }
    /**
     * Attaches the relationship to the given method, if the method exists.
     *
     * Note: The method needs to be in the set of verification methods,
     * so it cannot be an embedded one.
     * @param {DIDUrl} didUrl
     * @param {MethodRelationship} relationship
     * @returns {boolean}
     */
    attachMethodRelationship(didUrl, relationship) {
        _assertClass(didUrl, DIDUrl);
        const ret = wasm.iotadocument_attachMethodRelationship(this.__wbg_ptr, didUrl.__wbg_ptr, relationship);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * Detaches the given relationship from the given method, if the method exists.
     * @param {DIDUrl} didUrl
     * @param {MethodRelationship} relationship
     * @returns {boolean}
     */
    detachMethodRelationship(didUrl, relationship) {
        _assertClass(didUrl, DIDUrl);
        const ret = wasm.iotadocument_detachMethodRelationship(this.__wbg_ptr, didUrl.__wbg_ptr, relationship);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * Decodes and verifies the provided JWS according to the passed `options` and `signatureVerifier`.
     * If a `signatureVerifier` is provided it will be used when
     * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
     * algorithms will be used.
     *
     * Regardless of which options are passed the following conditions must be met in order for a verification attempt to
     * take place.
     * - The JWS must be encoded according to the JWS compact serialization.
     * - The `kid` value in the protected header must be an identifier of a verification method in this DID document.
     * @param {Jws} jws
     * @param {JwsVerificationOptions} options
     * @param {IJwsVerifier | null} [signatureVerifier]
     * @param {string | null} [detachedPayload]
     * @returns {DecodedJws}
     */
    verifyJws(jws, options, signatureVerifier, detachedPayload) {
        _assertClass(jws, Jws);
        _assertClass(options, JwsVerificationOptions);
        var ptr0 = isLikeNone(detachedPayload) ? 0 : passStringToWasm0(detachedPayload, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.iotadocument_verifyJws(this.__wbg_ptr, jws.__wbg_ptr, options.__wbg_ptr, isLikeNone(signatureVerifier) ? 0 : addToExternrefTable0(signatureVerifier), ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DecodedJws.__wrap(ret[0]);
    }
    /**
     * Serializes the document for inclusion in an identity's metadata
     * with the default {@link StateMetadataEncoding}.
     * @returns {Uint8Array}
     */
    pack() {
        const ret = wasm.iotadocument_pack(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * Serializes the document for inclusion in an identity's metadata.
     * @param {StateMetadataEncoding} encoding
     * @returns {Uint8Array}
     */
    packWithEncoding(encoding) {
        const ret = wasm.iotadocument_packWithEncoding(this.__wbg_ptr, encoding);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * Returns a copy of the metadata associated with this document.
     *
     * NOTE: Copies all the metadata. See also `metadataCreated`, `metadataUpdated`,
     * `metadataPreviousMessageId`, `metadataProof` if only a subset of the metadata required.
     * @returns {IotaDocumentMetadata}
     */
    metadata() {
        const ret = wasm.iotadocument_metadata(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDocumentMetadata.__wrap(ret[0]);
    }
    /**
     * Returns a copy of the timestamp of when the DID document was created.
     * @returns {Timestamp | undefined}
     */
    metadataCreated() {
        const ret = wasm.iotadocument_metadataCreated(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : Timestamp.__wrap(ret[0]);
    }
    /**
     * Sets the timestamp of when the DID document was created.
     * @param {Timestamp | undefined} timestamp
     */
    setMetadataCreated(timestamp) {
        const ret = wasm.iotadocument_setMetadataCreated(this.__wbg_ptr, timestamp);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the timestamp of the last DID document update.
     * @returns {Timestamp | undefined}
     */
    metadataUpdated() {
        const ret = wasm.iotadocument_metadataUpdated(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : Timestamp.__wrap(ret[0]);
    }
    /**
     * Sets the timestamp of the last DID document update.
     * @param {Timestamp | undefined} timestamp
     */
    setMetadataUpdated(timestamp) {
        const ret = wasm.iotadocument_setMetadataUpdated(this.__wbg_ptr, timestamp);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the deactivated status of the DID document.
     * @returns {boolean | undefined}
     */
    metadataDeactivated() {
        const ret = wasm.iotadocument_metadataDeactivated(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0xFFFFFF ? undefined : ret[0] !== 0;
    }
    /**
     * Sets the deactivated status of the DID document.
     * @param {boolean | null} [deactivated]
     */
    setMetadataDeactivated(deactivated) {
        const ret = wasm.iotadocument_setMetadataDeactivated(this.__wbg_ptr, isLikeNone(deactivated) ? 0xFFFFFF : deactivated ? 1 : 0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Sets a custom property in the document metadata.
     * If the value is set to `null`, the custom property will be removed.
     * @param {string} key
     * @param {any} value
     */
    setMetadataPropertyUnchecked(key, value) {
        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.iotadocument_setMetadataPropertyUnchecked(this.__wbg_ptr, ptr0, len0, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * If the document has a {@link RevocationBitmap} service identified by `serviceQuery`,
     * revoke all specified `indices`.
     * @param {DIDUrl | string} serviceQuery
     * @param {number | number[]} indices
     */
    revokeCredentials(serviceQuery, indices) {
        const ret = wasm.iotadocument_revokeCredentials(this.__wbg_ptr, serviceQuery, indices);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * If the document has a {@link RevocationBitmap} service identified by `serviceQuery`,
     * unrevoke all specified `indices`.
     * @param {DIDUrl | string} serviceQuery
     * @param {number | number[]} indices
     */
    unrevokeCredentials(serviceQuery, indices) {
        const ret = wasm.iotadocument_unrevokeCredentials(this.__wbg_ptr, serviceQuery, indices);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a deep clone of the {@link IotaDocument}.
     * @returns {IotaDocument}
     */
    clone() {
        const ret = wasm.iotadocument_clone(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDocument.__wrap(ret[0]);
    }
    /**
     * ### Warning
     * This is for internal use only. Do not rely on or call this method.
     * @returns {IotaDocument}
     */
    _shallowCloneInternal() {
        const ret = wasm.iotadocument__shallowCloneInternal(this.__wbg_ptr);
        return IotaDocument.__wrap(ret);
    }
    /**
     * ### Warning
     * This is for internal use only. Do not rely on or call this method.
     * @returns {number}
     */
    _strongCountInternal() {
        const ret = wasm.iotadocument__strongCountInternal(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * Serializes to a plain JS representation.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.iotadocument_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a plain JS representation.
     * @param {any} json
     * @returns {IotaDocument}
     */
    static fromJSON(json) {
        const ret = wasm.iotadocument_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDocument.__wrap(ret[0]);
    }
    /**
     * Transforms the {@link IotaDocument} to its {@link CoreDocument} representation.
     * @returns {CoreDocument}
     */
    toCoreDocument() {
        const ret = wasm.iotadocument_toCoreDocument(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDocument.__wrap(ret[0]);
    }
    /**
     * Generate new key material in the given `storage` and insert a new verification method with the corresponding
     * public key material into the DID document.
     *
     * - If no fragment is given the `kid` of the generated JWK is used, if it is set, otherwise an error is returned.
     * - The `keyType` must be compatible with the given `storage`. `Storage`s are expected to export key type constants
     * for that use case.
     *
     * The fragment of the generated method is returned.
     * @param {Storage} storage
     * @param {string} keyType
     * @param {JwsAlgorithm} alg
     * @param {string | null | undefined} fragment
     * @param {MethodScope} scope
     * @returns {Promise<string>}
     */
    generateMethod(storage, keyType, alg, fragment, scope) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(keyType, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(fragment) ? 0 : passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        _assertClass(scope, MethodScope);
        var ptr2 = scope.__destroy_into_raw();
        const ret = wasm.iotadocument_generateMethod(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, alg, ptr1, len1, ptr2);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Remove the method identified by the given fragment from the document and delete the corresponding key material in
     * the given `storage`.
     * @param {Storage} storage
     * @param {DIDUrl} id
     * @returns {Promise<void>}
     */
    purgeMethod(storage, id) {
        _assertClass(storage, Storage);
        _assertClass(id, DIDUrl);
        const ret = wasm.iotadocument_purgeMethod(this.__wbg_ptr, storage.__wbg_ptr, id.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sign the `payload` according to `options` with the storage backed private key corresponding to the public key
     * material in the verification method identified by the given `fragment.
     *
     * Upon success a string representing a JWS encoded according to the Compact JWS Serialization format is returned.
     * See [RFC7515 section 3.1](https://www.rfc-editor.org/rfc/rfc7515#section-3.1).
     *
     * @deprecated Use `createJws()` instead.
     * @param {Storage} storage
     * @param {string} fragment
     * @param {string} payload
     * @param {JwsSignatureOptions} options
     * @returns {Promise<Jws>}
     */
    createJwt(storage, fragment, payload, options) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(payload, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(options, JwsSignatureOptions);
        const ret = wasm.iotadocument_createJwt(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, ptr1, len1, options.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Sign the `payload` according to `options` with the storage backed private key corresponding to the public key
     * material in the verification method identified by the given `fragment.
     *
     * Upon success a string representing a JWS encoded according to the Compact JWS Serialization format is returned.
     * See [RFC7515 section 3.1](https://www.rfc-editor.org/rfc/rfc7515#section-3.1).
     * @param {Storage} storage
     * @param {string} fragment
     * @param {string} payload
     * @param {JwsSignatureOptions} options
     * @returns {Promise<Jws>}
     */
    createJws(storage, fragment, payload, options) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(payload, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(options, JwsSignatureOptions);
        const ret = wasm.iotadocument_createJws(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, ptr1, len1, options.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Produces a JWS where the payload is produced from the given `credential`
     * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
     *
     * Unless the `kid` is explicitly set in the options, the `kid` in the protected header is the `id`
     * of the method identified by `fragment` and the JWS signature will be produced by the corresponding
     * private key backed by the `storage` in accordance with the passed `options`.
     *
     * The `custom_claims` can be used to set additional claims on the resulting JWT.
     * @param {Storage} storage
     * @param {string} fragment
     * @param {Credential} credential
     * @param {JwsSignatureOptions} options
     * @param {Record<string, any> | null} [custom_claims]
     * @returns {Promise<Jwt>}
     */
    createCredentialJwt(storage, fragment, credential, options, custom_claims) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(credential, Credential);
        _assertClass(options, JwsSignatureOptions);
        const ret = wasm.iotadocument_createCredentialJwt(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, credential.__wbg_ptr, options.__wbg_ptr, isLikeNone(custom_claims) ? 0 : addToExternrefTable0(custom_claims));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Produces a JWT where the payload is produced from the given presentation.
     * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
     *
     * Unless the `kid` is explicitly set in the options, the `kid` in the protected header is the `id`
     * of the method identified by `fragment` and the JWS signature will be produced by the corresponding
     * private key backed by the `storage` in accordance with the passed `options`.
     * @param {Storage} storage
     * @param {string} fragment
     * @param {Presentation} presentation
     * @param {JwsSignatureOptions} signature_options
     * @param {JwtPresentationOptions} presentation_options
     * @returns {Promise<Jwt>}
     */
    createPresentationJwt(storage, fragment, presentation, signature_options, presentation_options) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(presentation, Presentation);
        _assertClass(signature_options, JwsSignatureOptions);
        _assertClass(presentation_options, JwtPresentationOptions);
        const ret = wasm.iotadocument_createPresentationJwt(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, presentation.__wbg_ptr, signature_options.__wbg_ptr, presentation_options.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Storage} storage
     * @param {ProofAlgorithm} alg
     * @param {string | null | undefined} fragment
     * @param {MethodScope} scope
     * @returns {Promise<string>}
     */
    generateMethodJwp(storage, alg, fragment, scope) {
        _assertClass(storage, Storage);
        var ptr0 = isLikeNone(fragment) ? 0 : passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        _assertClass(scope, MethodScope);
        var ptr1 = scope.__destroy_into_raw();
        const ret = wasm.iotadocument_generateMethodJwp(this.__wbg_ptr, storage.__wbg_ptr, alg, ptr0, len0, ptr1);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Storage} storage
     * @param {string} fragment
     * @param {JptClaims} jpt_claims
     * @param {JwpCredentialOptions} options
     * @returns {Promise<string>}
     */
    createIssuedJwp(storage, fragment, jpt_claims, options) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(options, JwpCredentialOptions);
        var ptr1 = options.__destroy_into_raw();
        const ret = wasm.iotadocument_createIssuedJwp(this.__wbg_ptr, storage.__wbg_ptr, ptr0, len0, jpt_claims, ptr1);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {SelectiveDisclosurePresentation} presentation
     * @param {string} method_id
     * @param {JwpPresentationOptions} options
     * @returns {Promise<string>}
     */
    createPresentedJwp(presentation, method_id, options) {
        _assertClass(presentation, SelectiveDisclosurePresentation);
        var ptr0 = presentation.__destroy_into_raw();
        const ptr1 = passStringToWasm0(method_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(options, JwpPresentationOptions);
        var ptr2 = options.__destroy_into_raw();
        const ret = wasm.iotadocument_createPresentedJwp(this.__wbg_ptr, ptr0, ptr1, len1, ptr2);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Credential} credential
     * @param {Storage} storage
     * @param {string} fragment
     * @param {JwpCredentialOptions} options
     * @param {Map<string, any> | null} [custom_claims]
     * @returns {Promise<Jpt>}
     */
    createCredentialJpt(credential, storage, fragment, options, custom_claims) {
        _assertClass(credential, Credential);
        var ptr0 = credential.__destroy_into_raw();
        _assertClass(storage, Storage);
        const ptr1 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(options, JwpCredentialOptions);
        var ptr2 = options.__destroy_into_raw();
        const ret = wasm.iotadocument_createCredentialJpt(this.__wbg_ptr, ptr0, storage.__wbg_ptr, ptr1, len1, ptr2, isLikeNone(custom_claims) ? 0 : addToExternrefTable0(custom_claims));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {SelectiveDisclosurePresentation} presentation
     * @param {string} method_id
     * @param {JwpPresentationOptions} options
     * @returns {Promise<Jpt>}
     */
    createPresentationJpt(presentation, method_id, options) {
        _assertClass(presentation, SelectiveDisclosurePresentation);
        var ptr0 = presentation.__destroy_into_raw();
        const ptr1 = passStringToWasm0(method_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(options, JwpPresentationOptions);
        var ptr2 = options.__destroy_into_raw();
        const ret = wasm.iotadocument_createPresentationJpt(this.__wbg_ptr, ptr0, ptr1, len1, ptr2);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.IotaDocument = IotaDocument;

const IotaDocumentMetadataFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_iotadocumentmetadata_free(ptr >>> 0, 1));
/**
 * Additional attributes related to an IOTA DID Document.
 */
class IotaDocumentMetadata {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IotaDocumentMetadata.prototype);
        obj.__wbg_ptr = ptr;
        IotaDocumentMetadataFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IotaDocumentMetadataFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_iotadocumentmetadata_free(ptr, 0);
    }
    /**
     * Returns a copy of the timestamp of when the DID document was created.
     * @returns {Timestamp | undefined}
     */
    created() {
        const ret = wasm.iotadocumentmetadata_created(this.__wbg_ptr);
        return ret === 0 ? undefined : Timestamp.__wrap(ret);
    }
    /**
     * Returns a copy of the timestamp of the last DID document update.
     * @returns {Timestamp | undefined}
     */
    updated() {
        const ret = wasm.iotadocumentmetadata_updated(this.__wbg_ptr);
        return ret === 0 ? undefined : Timestamp.__wrap(ret);
    }
    /**
     * Returns a copy of the deactivated status of the DID document.
     * @returns {boolean | undefined}
     */
    deactivated() {
        const ret = wasm.iotadocumentmetadata_deactivated(this.__wbg_ptr);
        return ret === 0xFFFFFF ? undefined : ret !== 0;
    }
    /**
     * Returns a copy of the custom metadata properties.
     * @returns {Map<string, any>}
     */
    properties() {
        const ret = wasm.iotadocumentmetadata_properties(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.iotadocumentmetadata_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {IotaDocumentMetadata}
     */
    static fromJSON(json) {
        const ret = wasm.iotadocumentmetadata_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDocumentMetadata.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {IotaDocumentMetadata}
     */
    clone() {
        const ret = wasm.iotadocumentmetadata_clone(this.__wbg_ptr);
        return IotaDocumentMetadata.__wrap(ret);
    }
}
module.exports.IotaDocumentMetadata = IotaDocumentMetadata;

const IotaTransactionBlockResponseEssenceFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_iotatransactionblockresponseessence_free(ptr >>> 0, 1));

class IotaTransactionBlockResponseEssence {

    toJSON() {
        return {
            effectsExist: this.effectsExist,
            effects: this.effects,
            effectsExecutionStatus: this.effectsExecutionStatus,
            effectsCreated: this.effectsCreated,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IotaTransactionBlockResponseEssenceFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_iotatransactionblockresponseessence_free(ptr, 0);
    }
    /**
     * @returns {boolean}
     */
    get effectsExist() {
        const ret = wasm.__wbg_get_iotatransactionblockresponseessence_effectsExist(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * @param {boolean} arg0
     */
    set effectsExist(arg0) {
        wasm.__wbg_set_iotatransactionblockresponseessence_effectsExist(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {string}
     */
    get effects() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_iotatransactionblockresponseessence_effects(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set effects(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_iotatransactionblockresponseessence_effects(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {ExecutionStatus | undefined}
     */
    get effectsExecutionStatus() {
        const ret = wasm.__wbg_get_iotatransactionblockresponseessence_effectsExecutionStatus(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {ExecutionStatus | null} [arg0]
     */
    set effectsExecutionStatus(arg0) {
        wasm.__wbg_set_iotatransactionblockresponseessence_effectsExecutionStatus(this.__wbg_ptr, isLikeNone(arg0) ? 0 : addToExternrefTable0(arg0));
    }
    /**
     * @returns {OwnedObjectRef[] | undefined}
     */
    get effectsCreated() {
        const ret = wasm.__wbg_get_iotatransactionblockresponseessence_effectsCreated(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        }
        return v1;
    }
    /**
     * @param {OwnedObjectRef[] | null} [arg0]
     */
    set effectsCreated(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_iotatransactionblockresponseessence_effectsCreated(this.__wbg_ptr, ptr0, len0);
    }
}
module.exports.IotaTransactionBlockResponseEssence = IotaTransactionBlockResponseEssence;

const IssuerMetadataFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_issuermetadata_free(ptr >>> 0, 1));

class IssuerMetadata {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IssuerMetadata.prototype);
        obj.__wbg_ptr = ptr;
        IssuerMetadataFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IssuerMetadataFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_issuermetadata_free(ptr, 0);
    }
    /**
     * @param {string} issuer
     * @param {Jwks} jwks
     */
    constructor(issuer, jwks) {
        const ptr0 = passStringToWasm0(issuer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.issuermetadata_new(ptr0, len0, jwks);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        IssuerMetadataFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @returns {string}
     */
    issuer() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.issuermetadata_issuer(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {Jwks}
     */
    jwks() {
        const ret = wasm.issuermetadata_jwks(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Checks the validity of this {@link IssuerMetadata}.
     * {@link IssuerMetadata.issuer} must match `sd_jwt_vc`'s `iss` claim.
     * @param {SdJwtVc} sd_jwt_vc
     */
    validate(sd_jwt_vc) {
        _assertClass(sd_jwt_vc, SdJwtVc);
        const ret = wasm.issuermetadata_validate(this.__wbg_ptr, sd_jwt_vc.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.issuermetadata_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.IssuerMetadata = IssuerMetadata;

const IssuerProtectedHeaderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_issuerprotectedheader_free(ptr >>> 0, 1));

class IssuerProtectedHeader {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IssuerProtectedHeader.prototype);
        obj.__wbg_ptr = ptr;
        IssuerProtectedHeaderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
            typ: this.typ,
            alg: this.alg,
            kid: this.kid,
            cid: this.cid,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IssuerProtectedHeaderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_issuerprotectedheader_free(ptr, 0);
    }
    /**
     * JWP type (JPT).
     * @returns {string | undefined}
     */
    get typ() {
        const ret = wasm.__wbg_get_issuerprotectedheader_typ(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * JWP type (JPT).
     * @param {string | null} [arg0]
     */
    set typ(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_issuerprotectedheader_typ(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Algorithm used for the JWP.
     * @returns {ProofAlgorithm}
     */
    get alg() {
        const ret = wasm.__wbg_get_issuerprotectedheader_alg(this.__wbg_ptr);
        return ret;
    }
    /**
     * Algorithm used for the JWP.
     * @param {ProofAlgorithm} arg0
     */
    set alg(arg0) {
        wasm.__wbg_set_issuerprotectedheader_alg(this.__wbg_ptr, arg0);
    }
    /**
     * ID for the key used for the JWP.
     * @returns {string | undefined}
     */
    get kid() {
        const ret = wasm.__wbg_get_issuerprotectedheader_kid(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * ID for the key used for the JWP.
     * @param {string | null} [arg0]
     */
    set kid(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_issuerprotectedheader_kid(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Not handled for now. Will be used in the future to resolve external claims
     * @returns {string | undefined}
     */
    get cid() {
        const ret = wasm.__wbg_get_issuerprotectedheader_cid(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Not handled for now. Will be used in the future to resolve external claims
     * @param {string | null} [arg0]
     */
    set cid(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_issuerprotectedheader_cid(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string[]}
     */
    claims() {
        const ret = wasm.issuerprotectedheader_claims(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
}
module.exports.IssuerProtectedHeader = IssuerProtectedHeader;

const JptFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jpt_free(ptr >>> 0, 1));
/**
 * A JSON Proof Token (JPT).
 */
class Jpt {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Jpt.prototype);
        obj.__wbg_ptr = ptr;
        JptFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JptFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jpt_free(ptr, 0);
    }
    /**
     * Creates a new {@link Jpt}.
     * @param {string} jpt_string
     */
    constructor(jpt_string) {
        const ptr0 = passStringToWasm0(jpt_string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jpt_new(ptr0, len0);
        this.__wbg_ptr = ret >>> 0;
        JptFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.jpt_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Deep clones the object.
     * @returns {Jpt}
     */
    clone() {
        const ret = wasm.jpt_clone(this.__wbg_ptr);
        return Jpt.__wrap(ret);
    }
}
module.exports.Jpt = Jpt;

const JptCredentialValidationOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jptcredentialvalidationoptions_free(ptr >>> 0, 1));
/**
 * Options to declare validation criteria for {@link Jpt}.
 */
class JptCredentialValidationOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JptCredentialValidationOptions.prototype);
        obj.__wbg_ptr = ptr;
        JptCredentialValidationOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JptCredentialValidationOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jptcredentialvalidationoptions_free(ptr, 0);
    }
    /**
     * Deep clones the object.
     * @returns {JptCredentialValidationOptions}
     */
    clone() {
        const ret = wasm.jptcredentialvalidationoptions_clone(this.__wbg_ptr);
        return JptCredentialValidationOptions.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jptcredentialvalidationoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JptCredentialValidationOptions}
     */
    static fromJSON(json) {
        const ret = wasm.jptcredentialvalidationoptions_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JptCredentialValidationOptions.__wrap(ret[0]);
    }
    /**
     * Creates a new default instance.
     * @param {IJptCredentialValidationOptions | null} [opts]
     */
    constructor(opts) {
        const ret = wasm.jptcredentialvalidationoptions_new(isLikeNone(opts) ? 0 : addToExternrefTable0(opts));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        JptCredentialValidationOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}
module.exports.JptCredentialValidationOptions = JptCredentialValidationOptions;

const JptCredentialValidatorFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jptcredentialvalidator_free(ptr >>> 0, 1));

class JptCredentialValidator {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JptCredentialValidatorFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jptcredentialvalidator_free(ptr, 0);
    }
    /**
     * @param {Jpt} credential_jpt
     * @param {CoreDocument | IToCoreDocument} issuer
     * @param {JptCredentialValidationOptions} options
     * @param {FailFast} fail_fast
     * @returns {DecodedJptCredential}
     */
    static validate(credential_jpt, issuer, options, fail_fast) {
        _assertClass(credential_jpt, Jpt);
        _assertClass(options, JptCredentialValidationOptions);
        const ret = wasm.jptcredentialvalidator_validate(credential_jpt.__wbg_ptr, issuer, options.__wbg_ptr, fail_fast);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DecodedJptCredential.__wrap(ret[0]);
    }
}
module.exports.JptCredentialValidator = JptCredentialValidator;

const JptCredentialValidatorUtilsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jptcredentialvalidatorutils_free(ptr >>> 0, 1));
/**
 * Utility functions for validating JPT credentials.
 */
class JptCredentialValidatorUtils {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JptCredentialValidatorUtilsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jptcredentialvalidatorutils_free(ptr, 0);
    }
    constructor() {
        const ret = wasm.jptcredentialvalidatorutils_new();
        this.__wbg_ptr = ret >>> 0;
        JptCredentialValidatorUtilsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Utility for extracting the issuer field of a {@link Credential} as a DID.
     * # Errors
     * Fails if the issuer field is not a valid DID.
     * @param {Credential} credential
     * @returns {CoreDID}
     */
    static extractIssuer(credential) {
        _assertClass(credential, Credential);
        const ret = wasm.jptcredentialvalidatorutils_extractIssuer(credential.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDID.__wrap(ret[0]);
    }
    /**
     * Utility for extracting the issuer field of a credential in JPT representation as DID.
     * # Errors
     * If the JPT decoding fails or the issuer field is not a valid DID.
     * @param {Jpt} credential
     * @returns {CoreDID}
     */
    static extractIssuerFromIssuedJpt(credential) {
        _assertClass(credential, Jpt);
        const ret = wasm.jptcredentialvalidatorutils_extractIssuerFromIssuedJpt(credential.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDID.__wrap(ret[0]);
    }
    /**
     * @param {Credential} credential
     * @param {Timestamp | null | undefined} validity_timeframe
     * @param {StatusCheck} status_check
     */
    static checkTimeframesWithValidityTimeframe2024(credential, validity_timeframe, status_check) {
        _assertClass(credential, Credential);
        let ptr0 = 0;
        if (!isLikeNone(validity_timeframe)) {
            _assertClass(validity_timeframe, Timestamp);
            ptr0 = validity_timeframe.__destroy_into_raw();
        }
        const ret = wasm.jptcredentialvalidatorutils_checkTimeframesWithValidityTimeframe2024(credential.__wbg_ptr, ptr0, status_check);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Checks whether the credential status has been revoked.
     *
     * Only supports `RevocationTimeframe2024`.
     * @param {Credential} credential
     * @param {CoreDocument | IToCoreDocument} issuer
     * @param {StatusCheck} status_check
     */
    static checkRevocationWithValidityTimeframe2024(credential, issuer, status_check) {
        _assertClass(credential, Credential);
        const ret = wasm.jptcredentialvalidatorutils_checkRevocationWithValidityTimeframe2024(credential.__wbg_ptr, issuer, status_check);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Checks whether the credential status has been revoked or the timeframe interval is INVALID
     *
     * Only supports `RevocationTimeframe2024`.
     * @param {Credential} credential
     * @param {CoreDocument | IToCoreDocument} issuer
     * @param {Timestamp | null | undefined} validity_timeframe
     * @param {StatusCheck} status_check
     */
    static checkTimeframesAndRevocationWithValidityTimeframe2024(credential, issuer, validity_timeframe, status_check) {
        _assertClass(credential, Credential);
        let ptr0 = 0;
        if (!isLikeNone(validity_timeframe)) {
            _assertClass(validity_timeframe, Timestamp);
            ptr0 = validity_timeframe.__destroy_into_raw();
        }
        const ret = wasm.jptcredentialvalidatorutils_checkTimeframesAndRevocationWithValidityTimeframe2024(credential.__wbg_ptr, issuer, ptr0, status_check);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
}
module.exports.JptCredentialValidatorUtils = JptCredentialValidatorUtils;

const JptPresentationValidationOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jptpresentationvalidationoptions_free(ptr >>> 0, 1));
/**
 * Options to declare validation criteria for a {@link Jpt} presentation.
 */
class JptPresentationValidationOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JptPresentationValidationOptions.prototype);
        obj.__wbg_ptr = ptr;
        JptPresentationValidationOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JptPresentationValidationOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jptpresentationvalidationoptions_free(ptr, 0);
    }
    /**
     * Deep clones the object.
     * @returns {JptPresentationValidationOptions}
     */
    clone() {
        const ret = wasm.jptpresentationvalidationoptions_clone(this.__wbg_ptr);
        return JptPresentationValidationOptions.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jptpresentationvalidationoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JptPresentationValidationOptions}
     */
    static fromJSON(json) {
        const ret = wasm.jptpresentationvalidationoptions_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JptPresentationValidationOptions.__wrap(ret[0]);
    }
    /**
     * @param {IJptPresentationValidationOptions | null} [opts]
     */
    constructor(opts) {
        const ret = wasm.jptpresentationvalidationoptions_new(isLikeNone(opts) ? 0 : addToExternrefTable0(opts));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        JptPresentationValidationOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}
module.exports.JptPresentationValidationOptions = JptPresentationValidationOptions;

const JptPresentationValidatorFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jptpresentationvalidator_free(ptr >>> 0, 1));

class JptPresentationValidator {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JptPresentationValidatorFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jptpresentationvalidator_free(ptr, 0);
    }
    /**
     * Decodes and validates a Presented {@link Credential} issued as a JPT (JWP Presented Form). A
     * {@link DecodedJptPresentation} is returned upon success.
     *
     * The following properties are validated according to `options`:
     * - the holder's proof on the JWP,
     * - the expiration date,
     * - the issuance date,
     * - the semantic structure.
     * @param {Jpt} presentation_jpt
     * @param {CoreDocument | IToCoreDocument} issuer
     * @param {JptPresentationValidationOptions} options
     * @param {FailFast} fail_fast
     * @returns {DecodedJptPresentation}
     */
    static validate(presentation_jpt, issuer, options, fail_fast) {
        _assertClass(presentation_jpt, Jpt);
        _assertClass(options, JptPresentationValidationOptions);
        const ret = wasm.jptpresentationvalidator_validate(presentation_jpt.__wbg_ptr, issuer, options.__wbg_ptr, fail_fast);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DecodedJptPresentation.__wrap(ret[0]);
    }
}
module.exports.JptPresentationValidator = JptPresentationValidator;

const JptPresentationValidatorUtilsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jptpresentationvalidatorutils_free(ptr >>> 0, 1));
/**
 * Utility functions for verifying JPT presentations.
 */
class JptPresentationValidatorUtils {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JptPresentationValidatorUtilsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jptpresentationvalidatorutils_free(ptr, 0);
    }
    /**
     * Utility for extracting the issuer field of a credential in JPT representation as DID.
     * # Errors
     * If the JPT decoding fails or the issuer field is not a valid DID.
     * @param {Jpt} presentation
     * @returns {CoreDID}
     */
    static extractIssuerFromPresentedJpt(presentation) {
        _assertClass(presentation, Jpt);
        const ret = wasm.jptpresentationvalidatorutils_extractIssuerFromPresentedJpt(presentation.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDID.__wrap(ret[0]);
    }
    /**
     * Check timeframe interval in credentialStatus with `RevocationTimeframeStatus`.
     * @param {Credential} credential
     * @param {Timestamp | null | undefined} validity_timeframe
     * @param {StatusCheck} status_check
     */
    static checkTimeframesWithValidityTimeframe2024(credential, validity_timeframe, status_check) {
        _assertClass(credential, Credential);
        let ptr0 = 0;
        if (!isLikeNone(validity_timeframe)) {
            _assertClass(validity_timeframe, Timestamp);
            ptr0 = validity_timeframe.__destroy_into_raw();
        }
        const ret = wasm.jptpresentationvalidatorutils_checkTimeframesWithValidityTimeframe2024(credential.__wbg_ptr, ptr0, status_check);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
}
module.exports.JptPresentationValidatorUtils = JptPresentationValidatorUtils;

const JwkFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwk_free(ptr >>> 0, 1));
/**
 * JSON Web Key.
 *
 * [More Info](https://tools.ietf.org/html/rfc7517#section-4)
 */
class Jwk {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Jwk.prototype);
        obj.__wbg_ptr = ptr;
        JwkFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwkFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwk_free(ptr, 0);
    }
    /**
     * @param {IJwkParams} jwk
     */
    constructor(jwk) {
        const ret = wasm.jwk_new(jwk);
        this.__wbg_ptr = ret >>> 0;
        JwkFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns the value for the key type parameter (kty).
     * @returns {JwkType}
     */
    kty() {
        const ret = wasm.jwk_kty(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the value for the use property (use).
     * @returns {JwkUse | undefined}
     */
    use() {
        const ret = wasm.jwk_use(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Array<JwkOperation>}
     */
    keyOps() {
        const ret = wasm.jwk_keyOps(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the value for the algorithm property (alg).
     * @returns {JwsAlgorithm | undefined}
     */
    alg() {
        const ret = wasm.jwk_alg(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the value of the key ID property (kid).
     * @returns {string | undefined}
     */
    kid() {
        const ret = wasm.jwk_kid(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the key ID property (kid).
     * @param {string} kid
     */
    setKid(kid) {
        const ptr0 = passStringToWasm0(kid, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwk_setKid(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Returns the value of the X.509 URL property (x5u).
     * @returns {string | undefined}
     */
    x5u() {
        const ret = wasm.jwk_x5u(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Returns the value of the X.509 certificate chain property (x5c).
     * @returns {Array<string>}
     */
    x5c() {
        const ret = wasm.jwk_x5c(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the value of the X.509 certificate SHA-1 thumbprint property (x5t).
     * @returns {string | undefined}
     */
    x5t() {
        const ret = wasm.jwk_x5t(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Returns the value of the X.509 certificate SHA-256 thumbprint property (x5t#S256).
     * @returns {string | undefined}
     */
    x5t256() {
        const ret = wasm.jwk_x5t256(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * If this JWK is of kty EC, returns those parameters.
     * @returns {JwkParamsEc | undefined}
     */
    paramsEc() {
        const ret = wasm.jwk_paramsEc(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * If this JWK is of kty OKP, returns those parameters.
     * @returns {JwkParamsOkp | undefined}
     */
    paramsOkp() {
        const ret = wasm.jwk_paramsOkp(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * If this JWK is of kty OCT, returns those parameters.
     * @returns {JwkParamsOct | undefined}
     */
    paramsOct() {
        const ret = wasm.jwk_paramsOct(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * If this JWK is of kty RSA, returns those parameters.
     * @returns {JwkParamsRsa | undefined}
     */
    paramsRsa() {
        const ret = wasm.jwk_paramsRsa(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Creates a Thumbprint of the JSON Web Key according to [RFC7638](https://tools.ietf.org/html/rfc7638).
     *
     * `SHA2-256` is used as the hash function *H*.
     *
     * The thumbprint is returned as a base64url-encoded string.
     * @returns {string}
     */
    thumbprintSha256B64() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.jwk_thumbprintSha256B64(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a clone of the {@link Jwk} with _all_ private key components unset.
     * Nothing is returned when `kty = oct` as this key type is not considered public by this library.
     * @returns {Jwk | undefined}
     */
    toPublic() {
        const ret = wasm.jwk_toPublic(this.__wbg_ptr);
        return ret === 0 ? undefined : Jwk.__wrap(ret);
    }
    /**
     * Returns `true` if _all_ private key components of the key are unset, `false` otherwise.
     * @returns {boolean}
     */
    isPublic() {
        const ret = wasm.jwk_isPublic(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * Returns `true` if _all_ private key components of the key are set, `false` otherwise.
     * @returns {boolean}
     */
    isPrivate() {
        const ret = wasm.jwk_isPrivate(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwk_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Jwk}
     */
    static fromJSON(json) {
        const ret = wasm.jwk_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Jwk.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {Jwk}
     */
    clone() {
        const ret = wasm.jwk_clone(this.__wbg_ptr);
        return Jwk.__wrap(ret);
    }
}
module.exports.Jwk = Jwk;

const JwkGenOutputFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwkgenoutput_free(ptr >>> 0, 1));
/**
 * The result of a key generation in `JwkStorage`.
 */
class JwkGenOutput {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwkGenOutput.prototype);
        obj.__wbg_ptr = ptr;
        JwkGenOutputFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwkGenOutputFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwkgenoutput_free(ptr, 0);
    }
    /**
     * @param {string} key_id
     * @param {Jwk} jwk
     */
    constructor(key_id, jwk) {
        const ptr0 = passStringToWasm0(key_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(jwk, Jwk);
        const ret = wasm.jwkgenoutput_new(ptr0, len0, jwk.__wbg_ptr);
        this.__wbg_ptr = ret >>> 0;
        JwkGenOutputFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns the generated public {@link Jwk}.
     * @returns {Jwk}
     */
    jwk() {
        const ret = wasm.jwkgenoutput_jwk(this.__wbg_ptr);
        return Jwk.__wrap(ret);
    }
    /**
     * Returns the key id of the generated {@link Jwk}.
     * @returns {string}
     */
    keyId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.jwkgenoutput_keyId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwkgenoutput_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JwkGenOutput}
     */
    static fromJSON(json) {
        const ret = wasm.jwkgenoutput_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwkGenOutput.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {JwkGenOutput}
     */
    clone() {
        const ret = wasm.jwkgenoutput_clone(this.__wbg_ptr);
        return JwkGenOutput.__wrap(ret);
    }
}
module.exports.JwkGenOutput = JwkGenOutput;

const JwkKeytoolStoreFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwkkeytoolstore_free(ptr >>> 0, 1));
/**
 * Implementation of {@link JwkStorage} for {@link KeytoolStorage}.
 */
class JwkKeytoolStore {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwkKeytoolStoreFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwkkeytoolstore_free(ptr, 0);
    }
    /**
     * @param {KeytoolStorage} keytool
     */
    constructor(keytool) {
        _assertClass(keytool, KeytoolStorage);
        const ret = wasm.jwkkeytoolstore_new(keytool.__wbg_ptr);
        this.__wbg_ptr = ret >>> 0;
        JwkKeytoolStoreFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {string} key_type
     * @param {string} algorithm
     * @returns {Promise<JwkGenOutput>}
     */
    generate(key_type, algorithm) {
        const ptr0 = passStringToWasm0(key_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(algorithm, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.jwkkeytoolstore_generate(this.__wbg_ptr, ptr0, len0, ptr1, len1);
        return ret;
    }
    /**
     * @param {Jwk} jwk
     * @returns {Promise<string>}
     */
    insert(jwk) {
        _assertClass(jwk, Jwk);
        var ptr0 = jwk.__destroy_into_raw();
        const ret = wasm.jwkkeytoolstore_insert(this.__wbg_ptr, ptr0);
        return ret;
    }
    /**
     * @param {string} key_id
     * @param {Uint8Array} data
     * @param {Jwk} public_key
     * @returns {Promise<Uint8Array>}
     */
    sign(key_id, data, public_key) {
        const ptr0 = passStringToWasm0(key_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(public_key, Jwk);
        const ret = wasm.jwkkeytoolstore_sign(this.__wbg_ptr, ptr0, len0, ptr1, len1, public_key.__wbg_ptr);
        return ret;
    }
    /**
     * @param {string} key_id
     * @returns {Promise<void>}
     */
    delete(key_id) {
        const ptr0 = passStringToWasm0(key_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jwkkeytoolstore_delete(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {string} key_id
     * @returns {Promise<boolean>}
     */
    exists(key_id) {
        const ptr0 = passStringToWasm0(key_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jwkkeytoolstore_exists(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
}
module.exports.JwkKeytoolStore = JwkKeytoolStore;

const JwkStorageFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwkstorage_free(ptr >>> 0, 1));

class JwkStorage {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwkStorageFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwkstorage_free(ptr, 0);
    }
    /**
     * Generates a new BBS+ keypair.
     * @param {ProofAlgorithm} alg
     * @returns {Promise<JwkGenOutput>}
     */
    generateBBS(alg) {
        const ret = wasm.jwkstorage_generateBBS(this.__wbg_ptr, alg);
        return ret;
    }
    /**
     * @param {string} key_id
     * @param {Uint8Array[]} data
     * @param {Jwk} public_key
     * @param {Uint8Array | null} [header]
     * @returns {Promise<Uint8Array>}
     */
    signBBS(key_id, data, public_key, header) {
        const ptr0 = passStringToWasm0(key_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passArrayJsValueToWasm0(data, wasm.__wbindgen_malloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(public_key, Jwk);
        var ptr2 = public_key.__destroy_into_raw();
        var ptr3 = isLikeNone(header) ? 0 : passArray8ToWasm0(header, wasm.__wbindgen_malloc);
        var len3 = WASM_VECTOR_LEN;
        const ret = wasm.jwkstorage_signBBS(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, ptr3, len3);
        return ret;
    }
    /**
     * @param {string} key_id
     * @param {Jwk} public_key
     * @param {Uint8Array} signature
     * @param {ProofUpdateCtx} ctx
     * @returns {Promise<Uint8Array>}
     */
    updateBBSSignature(key_id, public_key, signature, ctx) {
        const ptr0 = passStringToWasm0(key_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(public_key, Jwk);
        const ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(ctx, ProofUpdateCtx);
        var ptr2 = ctx.__destroy_into_raw();
        const ret = wasm.jwkstorage_updateBBSSignature(this.__wbg_ptr, ptr0, len0, public_key.__wbg_ptr, ptr1, len1, ptr2);
        return ret;
    }
}
module.exports.JwkStorage = JwkStorage;

const JwpCredentialOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwpcredentialoptions_free(ptr >>> 0, 1));

class JwpCredentialOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwpCredentialOptions.prototype);
        obj.__wbg_ptr = ptr;
        JwpCredentialOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
            kid: this.kid,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwpCredentialOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwpcredentialoptions_free(ptr, 0);
    }
    /**
     * @returns {string | undefined}
     */
    get kid() {
        const ret = wasm.__wbg_get_jwpcredentialoptions_kid(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @param {string | null} [arg0]
     */
    set kid(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_jwpcredentialoptions_kid(this.__wbg_ptr, ptr0, len0);
    }
    constructor() {
        const ret = wasm.jwpcredentialoptions_new();
        this.__wbg_ptr = ret >>> 0;
        JwpCredentialOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {any} value
     * @returns {JwpCredentialOptions}
     */
    static fromJSON(value) {
        const ret = wasm.jwpcredentialoptions_fromJSON(value);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwpCredentialOptions.__wrap(ret[0]);
    }
    /**
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwpcredentialoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.JwpCredentialOptions = JwpCredentialOptions;

const JwpIssuedFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwpissued_free(ptr >>> 0, 1));

class JwpIssued {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwpIssued.prototype);
        obj.__wbg_ptr = ptr;
        JwpIssuedFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwpIssuedFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwpissued_free(ptr, 0);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwpissued_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JwpIssued}
     */
    static fromJSON(json) {
        const ret = wasm.jwpissued_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwpIssued.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {JwpIssued}
     */
    clone() {
        const ret = wasm.jwpissued_clone(this.__wbg_ptr);
        return JwpIssued.__wrap(ret);
    }
    /**
     * @param {SerializationType} serialization
     * @returns {string}
     */
    encode(serialization) {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.jwpissued_encode(this.__wbg_ptr, serialization);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @param {Uint8Array} proof
     */
    setProof(proof) {
        const ptr0 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwpissued_setProof(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {Uint8Array}
     */
    getProof() {
        const ret = wasm.jwpissued_getProof(this.__wbg_ptr);
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * @returns {Payloads}
     */
    getPayloads() {
        const ret = wasm.jwpissued_getPayloads(this.__wbg_ptr);
        return Payloads.__wrap(ret);
    }
    /**
     * @param {Payloads} payloads
     */
    setPayloads(payloads) {
        _assertClass(payloads, Payloads);
        var ptr0 = payloads.__destroy_into_raw();
        wasm.jwpissued_setPayloads(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {IssuerProtectedHeader}
     */
    getIssuerProtectedHeader() {
        const ret = wasm.jwpissued_getIssuerProtectedHeader(this.__wbg_ptr);
        return IssuerProtectedHeader.__wrap(ret);
    }
}
module.exports.JwpIssued = JwpIssued;

const JwpPresentationOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwppresentationoptions_free(ptr >>> 0, 1));
/**
 * Options to be set in the JWT claims of a verifiable presentation.
 */
class JwpPresentationOptions {

    toJSON() {
        return {
            audience: this.audience,
            nonce: this.nonce,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwpPresentationOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwppresentationoptions_free(ptr, 0);
    }
    /**
     * Sets the audience for presentation (`aud` property in JWP Presentation Header).
     * @returns {string | undefined}
     */
    get audience() {
        const ret = wasm.__wbg_get_jwppresentationoptions_audience(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets the audience for presentation (`aud` property in JWP Presentation Header).
     * @param {string | null} [arg0]
     */
    set audience(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_jwppresentationoptions_audience(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * The nonce to be placed in the Presentation Protected Header.
     * @returns {string | undefined}
     */
    get nonce() {
        const ret = wasm.__wbg_get_jwppresentationoptions_nonce(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * The nonce to be placed in the Presentation Protected Header.
     * @param {string | null} [arg0]
     */
    set nonce(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_jwppresentationoptions_nonce(this.__wbg_ptr, ptr0, len0);
    }
    constructor() {
        const ret = wasm.jwppresentationoptions_new();
        this.__wbg_ptr = ret >>> 0;
        JwpPresentationOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}
module.exports.JwpPresentationOptions = JwpPresentationOptions;

const JwpVerificationOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwpverificationoptions_free(ptr >>> 0, 1));
/**
 * Holds additional options for verifying a JWP
 */
class JwpVerificationOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwpVerificationOptions.prototype);
        obj.__wbg_ptr = ptr;
        JwpVerificationOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwpVerificationOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwpverificationoptions_free(ptr, 0);
    }
    /**
     * Deep clones the object.
     * @returns {JwpVerificationOptions}
     */
    clone() {
        const ret = wasm.jwpverificationoptions_clone(this.__wbg_ptr);
        return JwpVerificationOptions.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwpverificationoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JwpVerificationOptions}
     */
    static fromJSON(json) {
        const ret = wasm.jwpverificationoptions_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwpVerificationOptions.__wrap(ret[0]);
    }
    /**
     * @param {IJwpVerificationOptions | null} [opts]
     * @returns {JwpVerificationOptions}
     */
    static new(opts) {
        const ret = wasm.jwpverificationoptions_new(isLikeNone(opts) ? 0 : addToExternrefTable0(opts));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwpVerificationOptions.__wrap(ret[0]);
    }
}
module.exports.JwpVerificationOptions = JwpVerificationOptions;

const JwsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jws_free(ptr >>> 0, 1));
/**
 * A wrapper around a JSON Web Signature (JWS).
 */
class Jws {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Jws.prototype);
        obj.__wbg_ptr = ptr;
        JwsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jws_free(ptr, 0);
    }
    /**
     * Creates a new {@link Jws} from the given string.
     * @param {string} jws_string
     */
    constructor(jws_string) {
        const ptr0 = passStringToWasm0(jws_string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jws_constructor(ptr0, len0);
        this.__wbg_ptr = ret >>> 0;
        JwsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns a clone of the JWS string.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.jws_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
}
module.exports.Jws = Jws;

const JwsHeaderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwsheader_free(ptr >>> 0, 1));

class JwsHeader {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwsHeader.prototype);
        obj.__wbg_ptr = ptr;
        JwsHeaderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwsHeaderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwsheader_free(ptr, 0);
    }
    /**
     * Create a new empty {@link JwsHeader}.
     */
    constructor() {
        const ret = wasm.jwsheader_new();
        this.__wbg_ptr = ret >>> 0;
        JwsHeaderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns the value for the algorithm claim (alg).
     * @returns {JwsAlgorithm | undefined}
     */
    alg() {
        const ret = wasm.jwsheader_alg(this.__wbg_ptr);
        return ret;
    }
    /**
     * Sets a value for the algorithm claim (alg).
     * @param {JwsAlgorithm} value
     */
    setAlg(value) {
        const ret = wasm.jwsheader_setAlg(this.__wbg_ptr, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns the value of the base64url-encode payload claim (b64).
     * @returns {boolean | undefined}
     */
    b64() {
        const ret = wasm.jwsheader_b64(this.__wbg_ptr);
        return ret === 0xFFFFFF ? undefined : ret !== 0;
    }
    /**
     * Sets a value for the base64url-encode payload claim (b64).
     * @param {boolean} value
     */
    setB64(value) {
        wasm.jwsheader_setB64(this.__wbg_ptr, value);
    }
    /**
     * Additional header parameters.
     * @returns {Record<string, any> | undefined}
     */
    custom() {
        const ret = wasm.jwsheader_custom(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {string} claim
     * @returns {boolean}
     */
    has(claim) {
        const ptr0 = passStringToWasm0(claim, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jwsheader_has(this.__wbg_ptr, ptr0, len0);
        return ret !== 0;
    }
    /**
     * Returns `true` if none of the fields are set in both `self` and `other`.
     * @param {JwsHeader} other
     * @returns {boolean}
     */
    isDisjoint(other) {
        _assertClass(other, JwsHeader);
        const ret = wasm.jwsheader_isDisjoint(this.__wbg_ptr, other.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * Returns the value of the JWK Set URL claim (jku).
     * @returns {string | undefined}
     */
    jku() {
        const ret = wasm.jwsheader_jku(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the JWK Set URL claim (jku).
     * @param {string} value
     */
    setJku(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jwsheader_setJku(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns the value of the JWK claim (jwk).
     * @returns {Jwk | undefined}
     */
    jwk() {
        const ret = wasm.jwsheader_jwk(this.__wbg_ptr);
        return ret === 0 ? undefined : Jwk.__wrap(ret);
    }
    /**
     * Sets a value for the JWK claim (jwk).
     * @param {Jwk} value
     */
    setJwk(value) {
        _assertClass(value, Jwk);
        wasm.jwsheader_setJwk(this.__wbg_ptr, value.__wbg_ptr);
    }
    /**
     * Returns the value of the key ID claim (kid).
     * @returns {string | undefined}
     */
    kid() {
        const ret = wasm.jwsheader_kid(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the key ID claim (kid).
     * @param {string} value
     */
    setKid(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwsheader_setKid(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Returns the value of the X.509 URL claim (x5u).
     * @returns {string | undefined}
     */
    x5u() {
        const ret = wasm.jwsheader_x5u(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the X.509 URL claim (x5u).
     * @param {string} value
     */
    setX5u(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jwsheader_setX5u(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns the value of the X.509 certificate chain claim (x5c).
     * @returns {Array<string>}
     */
    x5c() {
        const ret = wasm.jwsheader_x5c(this.__wbg_ptr);
        return ret;
    }
    /**
     * Sets values for the X.509 certificate chain claim (x5c).
     * @param {Array<string>} value
     */
    setX5c(value) {
        const ret = wasm.jwsheader_setX5c(this.__wbg_ptr, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns the value of the X.509 certificate SHA-1 thumbprint claim (x5t).
     * @returns {string | undefined}
     */
    x5t() {
        const ret = wasm.jwsheader_x5t(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the X.509 certificate SHA-1 thumbprint claim (x5t).
     * @param {string} value
     */
    setX5t(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwsheader_setX5t(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Returns the value of the X.509 certificate SHA-256 thumbprint claim
     * (x5t#S256).
     * @returns {string | undefined}
     */
    x5tS256() {
        const ret = wasm.jwsheader_x5tS256(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the X.509 certificate SHA-256 thumbprint claim
     * (x5t#S256).
     * @param {string} value
     */
    setX5tS256(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwsheader_setX5tS256(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Returns the value of the token type claim (typ).
     * @returns {string | undefined}
     */
    typ() {
        const ret = wasm.jwsheader_typ(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the token type claim (typ).
     * @param {string} value
     */
    setTyp(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwsheader_setTyp(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Returns the value of the content type claim (cty).
     * @returns {string | undefined}
     */
    cty() {
        const ret = wasm.jwsheader_cty(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the content type claim (cty).
     * @param {string} value
     */
    setCty(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwsheader_setCty(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Returns the value of the critical claim (crit).
     * @returns {Array<string>}
     */
    crit() {
        const ret = wasm.jwsheader_crit(this.__wbg_ptr);
        return ret;
    }
    /**
     * Sets values for the critical claim (crit).
     * @param {Array<string>} value
     */
    setCrit(value) {
        const ret = wasm.jwsheader_setCrit(this.__wbg_ptr, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns the value of the url claim (url).
     * @returns {string | undefined}
     */
    url() {
        const ret = wasm.jwsheader_url(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the url claim (url).
     * @param {string} value
     */
    setUrl(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jwsheader_setUrl(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns the value of the nonce claim (nonce).
     * @returns {string | undefined}
     */
    nonce() {
        const ret = wasm.jwsheader_nonce(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Sets a value for the nonce claim (nonce).
     * @param {string} value
     */
    setNonce(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwsheader_setNonce(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwsheader_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JwsHeader}
     */
    static fromJSON(json) {
        const ret = wasm.jwsheader_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwsHeader.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {JwsHeader}
     */
    clone() {
        const ret = wasm.jwsheader_clone(this.__wbg_ptr);
        return JwsHeader.__wrap(ret);
    }
}
module.exports.JwsHeader = JwsHeader;

const JwsSignatureOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwssignatureoptions_free(ptr >>> 0, 1));
/**
 * Options for creating a JSON Web Signature.
 */
class JwsSignatureOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwsSignatureOptions.prototype);
        obj.__wbg_ptr = ptr;
        JwsSignatureOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwsSignatureOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwssignatureoptions_free(ptr, 0);
    }
    /**
     * @param {IJwsSignatureOptions | null} [options]
     */
    constructor(options) {
        const ret = wasm.jwssignatureoptions_new(isLikeNone(options) ? 0 : addToExternrefTable0(options));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        JwsSignatureOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Replace the value of the `attachJwk` field.
     * @param {boolean} value
     */
    setAttachJwk(value) {
        wasm.jwssignatureoptions_setAttachJwk(this.__wbg_ptr, value);
    }
    /**
     * Replace the value of the `b64` field.
     * @param {boolean} value
     */
    setB64(value) {
        wasm.jwssignatureoptions_setB64(this.__wbg_ptr, value);
    }
    /**
     * Replace the value of the `typ` field.
     * @param {string} value
     */
    setTyp(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwssignatureoptions_setTyp(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Replace the value of the `cty` field.
     * @param {string} value
     */
    setCty(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwssignatureoptions_setCty(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Replace the value of the `url` field.
     * @param {string} value
     */
    serUrl(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jwssignatureoptions_serUrl(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Replace the value of the `nonce` field.
     * @param {string} value
     */
    setNonce(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwssignatureoptions_setNonce(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Replace the value of the `kid` field.
     * @param {string} value
     */
    setKid(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwssignatureoptions_setKid(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Replace the value of the `detached_payload` field.
     * @param {boolean} value
     */
    setDetachedPayload(value) {
        wasm.jwssignatureoptions_setDetachedPayload(this.__wbg_ptr, value);
    }
    /**
     * Add additional header parameters.
     * @param {Record<string, any>} value
     */
    setCustomHeaderParameters(value) {
        const ret = wasm.jwssignatureoptions_setCustomHeaderParameters(this.__wbg_ptr, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwssignatureoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JwsSignatureOptions}
     */
    static fromJSON(json) {
        const ret = wasm.jwssignatureoptions_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwsSignatureOptions.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {JwsSignatureOptions}
     */
    clone() {
        const ret = wasm.jwssignatureoptions_clone(this.__wbg_ptr);
        return JwsSignatureOptions.__wrap(ret);
    }
}
module.exports.JwsSignatureOptions = JwsSignatureOptions;

const JwsVerificationOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwsverificationoptions_free(ptr >>> 0, 1));
/**
 * Holds additional options for verifying a JWS with {@link CoreDocument.verifyJws}.
 */
class JwsVerificationOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwsVerificationOptions.prototype);
        obj.__wbg_ptr = ptr;
        JwsVerificationOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwsVerificationOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwsverificationoptions_free(ptr, 0);
    }
    /**
     * Creates a new {@link JwsVerificationOptions} from the given fields.
     * @param {IJwsVerificationOptions | null} [options]
     */
    constructor(options) {
        const ret = wasm.jwsverificationoptions_new(isLikeNone(options) ? 0 : addToExternrefTable0(options));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        JwsVerificationOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Set the expected value for the `nonce` parameter of the protected header.
     * @param {string} value
     */
    setNonce(value) {
        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.jwsverificationoptions_setNonce(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Set the scope of the verification methods that may be used to verify the given JWS.
     * @param {MethodScope} value
     */
    setMethodScope(value) {
        _assertClass(value, MethodScope);
        wasm.jwsverificationoptions_setMethodScope(this.__wbg_ptr, value.__wbg_ptr);
    }
    /**
     * Set the DID URl of the method, whose JWK should be used to verify the JWS.
     * @param {DIDUrl} value
     */
    setMethodId(value) {
        _assertClass(value, DIDUrl);
        wasm.jwsverificationoptions_setMethodId(this.__wbg_ptr, value.__wbg_ptr);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwsverificationoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JwsVerificationOptions}
     */
    static fromJSON(json) {
        const ret = wasm.jwsverificationoptions_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwsVerificationOptions.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {JwsVerificationOptions}
     */
    clone() {
        const ret = wasm.jwsverificationoptions_clone(this.__wbg_ptr);
        return JwsVerificationOptions.__wrap(ret);
    }
}
module.exports.JwsVerificationOptions = JwsVerificationOptions;

const JwtFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwt_free(ptr >>> 0, 1));
/**
 * A wrapper around a JSON Web Token (JWK).
 */
class Jwt {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Jwt.prototype);
        obj.__wbg_ptr = ptr;
        JwtFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwtFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwt_free(ptr, 0);
    }
    /**
     * Creates a new {@link Jwt} from the given string.
     * @param {string} jwt_string
     */
    constructor(jwt_string) {
        const ptr0 = passStringToWasm0(jwt_string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jwt_constructor(ptr0, len0);
        this.__wbg_ptr = ret >>> 0;
        JwtFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns a clone of the JWT string.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.jwt_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwt_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Jwt}
     */
    static fromJSON(json) {
        const ret = wasm.jwt_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Jwt.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {Jwt}
     */
    clone() {
        const ret = wasm.jwt_clone(this.__wbg_ptr);
        return Jwt.__wrap(ret);
    }
}
module.exports.Jwt = Jwt;

const JwtCredentialValidationOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwtcredentialvalidationoptions_free(ptr >>> 0, 1));
/**
 * Options to declare validation criteria when validating credentials.
 */
class JwtCredentialValidationOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwtCredentialValidationOptions.prototype);
        obj.__wbg_ptr = ptr;
        JwtCredentialValidationOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwtCredentialValidationOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwtcredentialvalidationoptions_free(ptr, 0);
    }
    /**
     * @param {IJwtCredentialValidationOptions | null} [options]
     */
    constructor(options) {
        const ret = wasm.jwtcredentialvalidationoptions_new(isLikeNone(options) ? 0 : addToExternrefTable0(options));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        JwtCredentialValidationOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwtcredentialvalidationoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JwtCredentialValidationOptions}
     */
    static fromJSON(json) {
        const ret = wasm.jwtcredentialvalidationoptions_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwtCredentialValidationOptions.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {JwtCredentialValidationOptions}
     */
    clone() {
        const ret = wasm.jwtcredentialvalidationoptions_clone(this.__wbg_ptr);
        return JwtCredentialValidationOptions.__wrap(ret);
    }
}
module.exports.JwtCredentialValidationOptions = JwtCredentialValidationOptions;

const JwtCredentialValidatorFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwtcredentialvalidator_free(ptr >>> 0, 1));
/**
 * A type for decoding and validating {@link Credential}.
 */
class JwtCredentialValidator {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwtCredentialValidatorFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwtcredentialvalidator_free(ptr, 0);
    }
    /**
     * Creates a new {@link JwtCredentialValidator}. If a `signatureVerifier` is provided it will be used when
     * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
     * algorithms will be used.
     * @param {IJwsVerifier | null} [signatureVerifier]
     */
    constructor(signatureVerifier) {
        const ret = wasm.jwtcredentialvalidator_new(isLikeNone(signatureVerifier) ? 0 : addToExternrefTable0(signatureVerifier));
        this.__wbg_ptr = ret >>> 0;
        JwtCredentialValidatorFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Decodes and validates a {@link Credential} issued as a JWS. A {@link DecodedJwtCredential} is returned upon
     * success.
     *
     * The following properties are validated according to `options`:
     * - the issuer's signature on the JWS,
     * - the expiration date,
     * - the issuance date,
     * - the semantic structure.
     *
     * # Warning
     * The lack of an error returned from this method is in of itself not enough to conclude that the credential can be
     * trusted. This section contains more information on additional checks that should be carried out before and after
     * calling this method.
     *
     * ## The state of the issuer's DID Document
     * The caller must ensure that `issuer` represents an up-to-date DID Document.
     *
     * ## Properties that are not validated
     *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:
     * `proof`, `credentialStatus`, `type`, `credentialSchema`, `refreshService` **and more**.
     * These should be manually checked after validation, according to your requirements.
     *
     * # Errors
     * An error is returned whenever a validated condition is not satisfied.
     * @param {Jwt} credential_jwt
     * @param {CoreDocument | IToCoreDocument} issuer
     * @param {JwtCredentialValidationOptions} options
     * @param {FailFast} fail_fast
     * @returns {DecodedJwtCredential}
     */
    validate(credential_jwt, issuer, options, fail_fast) {
        _assertClass(credential_jwt, Jwt);
        _assertClass(options, JwtCredentialValidationOptions);
        const ret = wasm.jwtcredentialvalidator_validate(this.__wbg_ptr, credential_jwt.__wbg_ptr, issuer, options.__wbg_ptr, fail_fast);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DecodedJwtCredential.__wrap(ret[0]);
    }
    /**
     * Decode and verify the JWS signature of a {@link Credential} issued as a JWT using the DID Document of a trusted
     * issuer.
     *
     * A {@link DecodedJwtCredential} is returned upon success.
     *
     * # Warning
     * The caller must ensure that the DID Documents of the trusted issuers are up-to-date.
     *
     * ## Proofs
     *  Only the JWS signature is verified. If the {@link Credential} contains a `proof` property this will not be
     * verified by this method.
     *
     * # Errors
     * This method immediately returns an error if
     * the credential issuer' url cannot be parsed to a DID belonging to one of the trusted issuers. Otherwise an attempt
     * to verify the credential's signature will be made and an error is returned upon failure.
     * @param {Jwt} credential
     * @param {Array<CoreDocument | IToCoreDocument>} trustedIssuers
     * @param {JwsVerificationOptions} options
     * @returns {DecodedJwtCredential}
     */
    verifySignature(credential, trustedIssuers, options) {
        _assertClass(credential, Jwt);
        _assertClass(options, JwsVerificationOptions);
        const ret = wasm.jwtcredentialvalidator_verifySignature(this.__wbg_ptr, credential.__wbg_ptr, trustedIssuers, options.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DecodedJwtCredential.__wrap(ret[0]);
    }
    /**
     * Validate that the credential expires on or after the specified timestamp.
     * @param {Credential} credential
     * @param {Timestamp} timestamp
     */
    static checkExpiresOnOrAfter(credential, timestamp) {
        _assertClass(credential, Credential);
        _assertClass(timestamp, Timestamp);
        const ret = wasm.jwtcredentialvalidator_checkExpiresOnOrAfter(credential.__wbg_ptr, timestamp.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Validate that the credential is issued on or before the specified timestamp.
     * @param {Credential} credential
     * @param {Timestamp} timestamp
     */
    static checkIssuedOnOrBefore(credential, timestamp) {
        _assertClass(credential, Credential);
        _assertClass(timestamp, Timestamp);
        const ret = wasm.jwtcredentialvalidator_checkIssuedOnOrBefore(credential.__wbg_ptr, timestamp.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Validate that the relationship between the `holder` and the credential subjects is in accordance with
     * `relationship`. The `holder` parameter is expected to be the URL of the holder.
     * @param {Credential} credential
     * @param {string} holder
     * @param {SubjectHolderRelationship} relationship
     */
    static checkSubjectHolderRelationship(credential, holder, relationship) {
        _assertClass(credential, Credential);
        const ptr0 = passStringToWasm0(holder, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.jwtcredentialvalidator_checkSubjectHolderRelationship(credential.__wbg_ptr, ptr0, len0, relationship);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Checks whether the credential status has been revoked.
     *
     * Only supports `RevocationBitmap2022`.
     * @param {Credential} credential
     * @param {Array<CoreDocument | IToCoreDocument>} trustedIssuers
     * @param {StatusCheck} statusCheck
     */
    static checkStatus(credential, trustedIssuers, statusCheck) {
        _assertClass(credential, Credential);
        const ret = wasm.jwtcredentialvalidator_checkStatus(credential.__wbg_ptr, trustedIssuers, statusCheck);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Checks whether the credential status has been revoked using `StatusList2021`.
     * @param {Credential} credential
     * @param {StatusList2021Credential} status_list
     * @param {StatusCheck} status_check
     */
    static checkStatusWithStatusList2021(credential, status_list, status_check) {
        _assertClass(credential, Credential);
        _assertClass(status_list, StatusList2021Credential);
        const ret = wasm.jwtcredentialvalidator_checkStatusWithStatusList2021(credential.__wbg_ptr, status_list.__wbg_ptr, status_check);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Utility for extracting the issuer field of a {@link Credential} as a DID.
     *
     * ### Errors
     *
     * Fails if the issuer field is not a valid DID.
     * @param {Credential} credential
     * @returns {CoreDID}
     */
    static extractIssuer(credential) {
        _assertClass(credential, Credential);
        const ret = wasm.jwtcredentialvalidator_extractIssuer(credential.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDID.__wrap(ret[0]);
    }
    /**
     * Utility for extracting the issuer field of a credential in JWT representation as DID.
     *
     * # Errors
     *
     * If the JWT decoding fails or the issuer field is not a valid DID.
     * @param {Jwt} credential
     * @returns {CoreDID}
     */
    static extractIssuerFromJwt(credential) {
        _assertClass(credential, Jwt);
        const ret = wasm.jwtcredentialvalidator_extractIssuerFromJwt(credential.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDID.__wrap(ret[0]);
    }
}
module.exports.JwtCredentialValidator = JwtCredentialValidator;

const JwtDomainLinkageValidatorFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwtdomainlinkagevalidator_free(ptr >>> 0, 1));
/**
 * A validator for a Domain Linkage Configuration and Credentials.
 */
class JwtDomainLinkageValidator {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwtDomainLinkageValidatorFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwtdomainlinkagevalidator_free(ptr, 0);
    }
    /**
     * Creates a new {@link JwtDomainLinkageValidator}. If a `signatureVerifier` is provided it will be used when
     * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
     * algorithms will be used.
     * @param {IJwsVerifier | null} [signatureVerifier]
     */
    constructor(signatureVerifier) {
        const ret = wasm.jwtdomainlinkagevalidator_new(isLikeNone(signatureVerifier) ? 0 : addToExternrefTable0(signatureVerifier));
        this.__wbg_ptr = ret >>> 0;
        JwtDomainLinkageValidatorFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Validates the linkage between a domain and a DID.
     * {@link DomainLinkageConfiguration} is validated according to [DID Configuration Resource Verification](https://identity.foundation/.well-known/resources/did-configuration/#did-configuration-resource-verification).
     *
     * Linkage is valid if no error is thrown.
     *
     * # Note:
     * - Only the [JSON Web Token Proof Format](https://identity.foundation/.well-known/resources/did-configuration/#json-web-token-proof-format)
     *   is supported.
     * - Only the Credential issued by `issuer` is verified.
     *
     * # Errors
     *
     *  - Semantic structure of `configuration` is invalid.
     *  - `configuration` includes multiple credentials issued by `issuer`.
     *  - Validation of the matched Domain Linkage Credential fails.
     * @param {CoreDocument | IToCoreDocument} issuer
     * @param {DomainLinkageConfiguration} configuration
     * @param {string} domain
     * @param {JwtCredentialValidationOptions} options
     */
    validateLinkage(issuer, configuration, domain, options) {
        _assertClass(configuration, DomainLinkageConfiguration);
        const ptr0 = passStringToWasm0(domain, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(options, JwtCredentialValidationOptions);
        const ret = wasm.jwtdomainlinkagevalidator_validateLinkage(this.__wbg_ptr, issuer, configuration.__wbg_ptr, ptr0, len0, options.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Validates a [Domain Linkage Credential](https://identity.foundation/.well-known/resources/did-configuration/#domain-linkage-credential).
     *
     * Error will be thrown in case the validation fails.
     * @param {CoreDocument | IToCoreDocument} issuer
     * @param {Jwt} credentialJwt
     * @param {string} domain
     * @param {JwtCredentialValidationOptions} options
     */
    validateCredential(issuer, credentialJwt, domain, options) {
        _assertClass(credentialJwt, Jwt);
        const ptr0 = passStringToWasm0(domain, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(options, JwtCredentialValidationOptions);
        const ret = wasm.jwtdomainlinkagevalidator_validateCredential(this.__wbg_ptr, issuer, credentialJwt.__wbg_ptr, ptr0, len0, options.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
}
module.exports.JwtDomainLinkageValidator = JwtDomainLinkageValidator;

const JwtPresentationOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwtpresentationoptions_free(ptr >>> 0, 1));

class JwtPresentationOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwtPresentationOptions.prototype);
        obj.__wbg_ptr = ptr;
        JwtPresentationOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwtPresentationOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwtpresentationoptions_free(ptr, 0);
    }
    /**
     * Creates a new {@link JwtPresentationOptions} from the given fields.
     *
     * Throws an error if any of the options are invalid.
     * @param {IJwtPresentationOptions | null} [options]
     */
    constructor(options) {
        const ret = wasm.jwtpresentationoptions_new(isLikeNone(options) ? 0 : addToExternrefTable0(options));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        JwtPresentationOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwtpresentationoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JwtPresentationOptions}
     */
    static fromJSON(json) {
        const ret = wasm.jwtpresentationoptions_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwtPresentationOptions.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {JwtPresentationOptions}
     */
    clone() {
        const ret = wasm.jwtpresentationoptions_clone(this.__wbg_ptr);
        return JwtPresentationOptions.__wrap(ret);
    }
}
module.exports.JwtPresentationOptions = JwtPresentationOptions;

const JwtPresentationValidationOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwtpresentationvalidationoptions_free(ptr >>> 0, 1));
/**
 * Options to declare validation criteria when validating presentation.
 */
class JwtPresentationValidationOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(JwtPresentationValidationOptions.prototype);
        obj.__wbg_ptr = ptr;
        JwtPresentationValidationOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwtPresentationValidationOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwtpresentationvalidationoptions_free(ptr, 0);
    }
    /**
     * Creates a new {@link JwtPresentationValidationOptions} from the given fields.
     *
     * Throws an error if any of the options are invalid.
     * @param {IJwtPresentationValidationOptions | null} [options]
     */
    constructor(options) {
        const ret = wasm.jwtpresentationvalidationoptions_new(isLikeNone(options) ? 0 : addToExternrefTable0(options));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        JwtPresentationValidationOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.jwtpresentationvalidationoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {JwtPresentationValidationOptions}
     */
    static fromJSON(json) {
        const ret = wasm.jwtpresentationvalidationoptions_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return JwtPresentationValidationOptions.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {JwtPresentationValidationOptions}
     */
    clone() {
        const ret = wasm.jwtpresentationvalidationoptions_clone(this.__wbg_ptr);
        return JwtPresentationValidationOptions.__wrap(ret);
    }
}
module.exports.JwtPresentationValidationOptions = JwtPresentationValidationOptions;

const JwtPresentationValidatorFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_jwtpresentationvalidator_free(ptr >>> 0, 1));

class JwtPresentationValidator {

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        JwtPresentationValidatorFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_jwtpresentationvalidator_free(ptr, 0);
    }
    /**
     * Creates a new {@link JwtPresentationValidator}. If a `signatureVerifier` is provided it will be used when
     * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
     * algorithms will be used.
     * @param {IJwsVerifier | null} [signatureVerifier]
     */
    constructor(signatureVerifier) {
        const ret = wasm.jwtpresentationvalidator_new(isLikeNone(signatureVerifier) ? 0 : addToExternrefTable0(signatureVerifier));
        this.__wbg_ptr = ret >>> 0;
        JwtPresentationValidatorFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Validates a {@link Presentation} encoded as a {@link Jwt}.
     *
     * The following properties are validated according to `options`:
     * - the JWT can be decoded into a semantically valid presentation.
     * - the expiration and issuance date contained in the JWT claims.
     * - the holder's signature.
     *
     * Validation is done with respect to the properties set in `options`.
     *
     * # Warning
     *
     * * This method does NOT validate the constituent credentials and therefore also not the relationship between the
     * credentials' subjects and the presentation holder. This can be done with {@link JwtCredentialValidationOptions}.
     * * The lack of an error returned from this method is in of itself not enough to conclude that the presentation can
     * be trusted. This section contains more information on additional checks that should be carried out before and
     * after calling this method.
     *
     * ## The state of the supplied DID Documents.
     *
     * The caller must ensure that the DID Documents in `holder` are up-to-date.
     *
     * # Errors
     *
     * An error is returned whenever a validated condition is not satisfied or when decoding fails.
     * @param {Jwt} presentationJwt
     * @param {CoreDocument | IToCoreDocument} holder
     * @param {JwtPresentationValidationOptions} validation_options
     * @returns {DecodedJwtPresentation}
     */
    validate(presentationJwt, holder, validation_options) {
        _assertClass(presentationJwt, Jwt);
        _assertClass(validation_options, JwtPresentationValidationOptions);
        const ret = wasm.jwtpresentationvalidator_validate(this.__wbg_ptr, presentationJwt.__wbg_ptr, holder, validation_options.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DecodedJwtPresentation.__wrap(ret[0]);
    }
    /**
     * Validates the semantic structure of the {@link Presentation}.
     * @param {Presentation} presentation
     */
    static checkStructure(presentation) {
        _assertClass(presentation, Presentation);
        const ret = wasm.jwtpresentationvalidator_checkStructure(presentation.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Attempt to extract the holder of the presentation.
     *
     * # Errors:
     * * If deserialization/decoding of the presentation fails.
     * * If the holder can't be parsed as DIDs.
     * @param {Jwt} presentation
     * @returns {CoreDID}
     */
    static extractHolder(presentation) {
        _assertClass(presentation, Jwt);
        const ret = wasm.jwtpresentationvalidator_extractHolder(presentation.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CoreDID.__wrap(ret[0]);
    }
}
module.exports.JwtPresentationValidator = JwtPresentationValidator;

const KeyBindingJWTValidationOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_keybindingjwtvalidationoptions_free(ptr >>> 0, 1));
/**
 * Options to declare validation criteria when validating credentials.
 */
class KeyBindingJWTValidationOptions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(KeyBindingJWTValidationOptions.prototype);
        obj.__wbg_ptr = ptr;
        KeyBindingJWTValidationOptionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        KeyBindingJWTValidationOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keybindingjwtvalidationoptions_free(ptr, 0);
    }
    /**
     * @param {IKeyBindingJWTValidationOptions | null} [options]
     */
    constructor(options) {
        const ret = wasm.keybindingjwtvalidationoptions_new(isLikeNone(options) ? 0 : addToExternrefTable0(options));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        KeyBindingJWTValidationOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.keybindingjwtvalidationoptions_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {KeyBindingJWTValidationOptions}
     */
    static fromJSON(json) {
        const ret = wasm.keybindingjwtvalidationoptions_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return KeyBindingJWTValidationOptions.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {KeyBindingJWTValidationOptions}
     */
    clone() {
        const ret = wasm.keybindingjwtvalidationoptions_clone(this.__wbg_ptr);
        return KeyBindingJWTValidationOptions.__wrap(ret);
    }
}
module.exports.KeyBindingJWTValidationOptions = KeyBindingJWTValidationOptions;

const KeyBindingJwtFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_keybindingjwt_free(ptr >>> 0, 1));

class KeyBindingJwt {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(KeyBindingJwt.prototype);
        obj.__wbg_ptr = ptr;
        KeyBindingJwtFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        KeyBindingJwtFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keybindingjwt_free(ptr, 0);
    }
    /**
     * @param {string} s
     * @returns {KeyBindingJwt}
     */
    static parse(s) {
        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.keybindingjwt_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return KeyBindingJwt.__wrap(ret[0]);
    }
    /**
     * @returns {KeyBindingJwtClaimsV2}
     */
    claims() {
        const ret = wasm.keybindingjwt_claims(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.keybindingjwt_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.keybindingjwt_toJSON(this.__wbg_ptr);
        return ret;
    }
}
module.exports.KeyBindingJwt = KeyBindingJwt;

const KeyBindingJwtBuilderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_keybindingjwtbuilder_free(ptr >>> 0, 1));

class KeyBindingJwtBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(KeyBindingJwtBuilder.prototype);
        obj.__wbg_ptr = ptr;
        KeyBindingJwtBuilderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        KeyBindingJwtBuilderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keybindingjwtbuilder_free(ptr, 0);
    }
    constructor() {
        const ret = wasm.keybindingjwtbuilder_new();
        this.__wbg_ptr = ret >>> 0;
        KeyBindingJwtBuilderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {object} obj
     * @returns {KeyBindingJwtBuilder}
     */
    static fromObject(obj) {
        const ret = wasm.keybindingjwtbuilder_fromObject(obj);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return KeyBindingJwtBuilder.__wrap(ret[0]);
    }
    /**
     * @param {object} header
     * @returns {KeyBindingJwtBuilder}
     */
    header(header) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.keybindingjwtbuilder_header(ptr, header);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return KeyBindingJwtBuilder.__wrap(ret[0]);
    }
    /**
     * @param {Timestamp} iat
     * @returns {KeyBindingJwtBuilder}
     */
    iat(iat) {
        const ptr = this.__destroy_into_raw();
        _assertClass(iat, Timestamp);
        var ptr0 = iat.__destroy_into_raw();
        const ret = wasm.keybindingjwtbuilder_iat(ptr, ptr0);
        return KeyBindingJwtBuilder.__wrap(ret);
    }
    /**
     * @param {string} aud
     * @returns {KeyBindingJwtBuilder}
     */
    aud(aud) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(aud, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.keybindingjwtbuilder_aud(ptr, ptr0, len0);
        return KeyBindingJwtBuilder.__wrap(ret);
    }
    /**
     * @param {string} nonce
     * @returns {KeyBindingJwtBuilder}
     */
    nonce(nonce) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.keybindingjwtbuilder_nonce(ptr, ptr0, len0);
        return KeyBindingJwtBuilder.__wrap(ret);
    }
    /**
     * @param {string} name
     * @param {any} value
     * @returns {KeyBindingJwtBuilder}
     */
    insertProperty(name, value) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.keybindingjwtbuilder_insertProperty(ptr, ptr0, len0, value);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return KeyBindingJwtBuilder.__wrap(ret[0]);
    }
    /**
     * @param {SdJwtV2} sd_jwt
     * @param {string} alg
     * @param {JwsSigner} signer
     * @returns {Promise<KeyBindingJwt>}
     */
    finish(sd_jwt, alg, signer) {
        const ptr = this.__destroy_into_raw();
        _assertClass(sd_jwt, SdJwtV2);
        const ptr0 = passStringToWasm0(alg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.keybindingjwtbuilder_finish(ptr, sd_jwt.__wbg_ptr, ptr0, len0, signer);
        return ret;
    }
}
module.exports.KeyBindingJwtBuilder = KeyBindingJwtBuilder;

const KeyBindingJwtClaimsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_keybindingjwtclaims_free(ptr >>> 0, 1));
/**
 * Claims set for key binding JWT.
 */
class KeyBindingJwtClaims {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(KeyBindingJwtClaims.prototype);
        obj.__wbg_ptr = ptr;
        KeyBindingJwtClaimsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        KeyBindingJwtClaimsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keybindingjwtclaims_free(ptr, 0);
    }
    /**
     * Creates a new [`KeyBindingJwtClaims`].
     * When `issued_at` is left as None, it will automatically default to the current time.
     *
     * # Error
     * When `issued_at` is set to `None` and the system returns time earlier than `SystemTime::UNIX_EPOCH`.
     * @param {string} jwt
     * @param {Array<string>} disclosures
     * @param {string} nonce
     * @param {string} aud
     * @param {Timestamp | null} [issued_at]
     * @param {Record<string, any> | null} [custom_properties]
     */
    constructor(jwt, disclosures, nonce, aud, issued_at, custom_properties) {
        const ptr0 = passStringToWasm0(jwt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passStringToWasm0(aud, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len2 = WASM_VECTOR_LEN;
        let ptr3 = 0;
        if (!isLikeNone(issued_at)) {
            _assertClass(issued_at, Timestamp);
            ptr3 = issued_at.__destroy_into_raw();
        }
        const ret = wasm.keybindingjwtclaims_new(ptr0, len0, disclosures, ptr1, len1, ptr2, len2, ptr3, isLikeNone(custom_properties) ? 0 : addToExternrefTable0(custom_properties));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        KeyBindingJwtClaimsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns a string representation of the claims.
     * @returns {string}
     */
    toString() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.keybindingjwtclaims_toString(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * Returns a copy of the issued at `iat` property.
     * @returns {bigint}
     */
    iat() {
        const ret = wasm.keybindingjwtclaims_iat(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns a copy of the audience `aud` property.
     * @returns {string}
     */
    aud() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.keybindingjwtclaims_aud(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the `nonce` property.
     * @returns {string}
     */
    nonce() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.keybindingjwtclaims_nonce(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the `sd_hash` property.
     * @returns {string}
     */
    sdHash() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.keybindingjwtclaims_sdHash(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the custom properties.
     * @returns {Record<string, any>}
     */
    customProperties() {
        const ret = wasm.keybindingjwtclaims_customProperties(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns the value of the `typ` property of the JWT header according to
     * https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-key-binding-jwt
     * @returns {string}
     */
    static keyBindingJwtHeaderTyp() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.keybindingjwtclaims_keyBindingJwtHeaderTyp();
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.keybindingjwtclaims_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {KeyBindingJwtClaims}
     */
    static fromJSON(json) {
        const ret = wasm.keybindingjwtclaims_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return KeyBindingJwtClaims.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {KeyBindingJwtClaims}
     */
    clone() {
        const ret = wasm.keybindingjwtclaims_clone(this.__wbg_ptr);
        return KeyBindingJwtClaims.__wrap(ret);
    }
}
module.exports.KeyBindingJwtClaims = KeyBindingJwtClaims;

const KeyIdKeytoolStoreFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_keyidkeytoolstore_free(ptr >>> 0, 1));
/**
 * Implementation of interface {@link KeyIdStorage} for {@link KeytoolStorage}.
 */
class KeyIdKeytoolStore {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        KeyIdKeytoolStoreFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keyidkeytoolstore_free(ptr, 0);
    }
    /**
     * @param {KeytoolStorage} keytool
     */
    constructor(keytool) {
        _assertClass(keytool, KeytoolStorage);
        const ret = wasm.keyidkeytoolstore_new(keytool.__wbg_ptr);
        this.__wbg_ptr = ret >>> 0;
        KeyIdKeytoolStoreFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {MethodDigest} method_digest
     * @param {string} key_id
     * @returns {Promise<void>}
     */
    insertKeyId(method_digest, key_id) {
        _assertClass(method_digest, MethodDigest);
        var ptr0 = method_digest.__destroy_into_raw();
        const ptr1 = passStringToWasm0(key_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.keyidkeytoolstore_insertKeyId(this.__wbg_ptr, ptr0, ptr1, len1);
        return ret;
    }
    /**
     * @param {MethodDigest} method_digest
     * @returns {Promise<string>}
     */
    getKeyId(method_digest) {
        _assertClass(method_digest, MethodDigest);
        const ret = wasm.keyidkeytoolstore_getKeyId(this.__wbg_ptr, method_digest.__wbg_ptr);
        return ret;
    }
    /**
     * @param {MethodDigest} method_digest
     * @returns {Promise<void>}
     */
    deleteKeyId(method_digest) {
        _assertClass(method_digest, MethodDigest);
        const ret = wasm.keyidkeytoolstore_deleteKeyId(this.__wbg_ptr, method_digest.__wbg_ptr);
        return ret;
    }
}
module.exports.KeyIdKeytoolStore = KeyIdKeytoolStore;

const KeytoolSignerFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_keytoolsigner_free(ptr >>> 0, 1));
/**
 * An implementation of the Signer interface that relies on
 * IOTA Keytool.
 */
class KeytoolSigner {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(KeytoolSigner.prototype);
        obj.__wbg_ptr = ptr;
        KeytoolSignerFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        KeytoolSignerFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keytoolsigner_free(ptr, 0);
    }
    /**
     * Returns a new {@link KeytoolSigner}. The optional parameters respectively
     * allow to set the signing address and the `iota` binary to use. Defaults
     * to use the current active address and the binary found in $PATH.
     * @param {string | null} [address]
     * @param {string | null} [iota_bin_location]
     */
    constructor(address, iota_bin_location) {
        var ptr0 = isLikeNone(address) ? 0 : passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(iota_bin_location) ? 0 : passStringToWasm0(iota_bin_location, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        const ret = wasm.keytoolsigner_new(ptr0, len0, ptr1, len1);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        KeytoolSignerFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns the signing address.
     * @returns {string}
     */
    address() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.keytoolsigner_address(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {string}
     */
    keyId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.keytoolsigner_keyId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {Promise<PublicKey>}
     */
    publicKey() {
        const ret = wasm.keytoolsigner_publicKey(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Uint8Array} tx_data_bcs
     * @returns {Promise<string>}
     */
    sign(tx_data_bcs) {
        const ptr0 = passArray8ToWasm0(tx_data_bcs, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.keytoolsigner_sign(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @returns {Promise<Uint8Array>}
     */
    iotaPublicKeyBytes() {
        const ret = wasm.keytoolsigner_iotaPublicKeyBytes(this.__wbg_ptr);
        return ret;
    }
}
module.exports.KeytoolSigner = KeytoolSigner;

const KeytoolStorageFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_keytoolstorage_free(ptr >>> 0, 1));
/**
 * IOTA Keytool CLI wrapper.
 */
class KeytoolStorage {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        KeytoolStorageFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keytoolstorage_free(ptr, 0);
    }
    /**
     * Creates a new {@link KeytoolStorage} that wraps the given iota binary.
     * Attempts to use the one in PATH if none is provided.
     * @param {string | null} [iota_bin]
     */
    constructor(iota_bin) {
        var ptr0 = isLikeNone(iota_bin) ? 0 : passStringToWasm0(iota_bin, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.keytoolstorage_new(ptr0, len0);
        this.__wbg_ptr = ret >>> 0;
        KeytoolStorageFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns a {@link KeytoolSigner} that will use the provided `address`
     * to sign transactions. If no address is provided the current active
     * one will be used.
     * @param {string | null} [address]
     * @returns {KeytoolSigner}
     */
    signer(address) {
        var ptr0 = isLikeNone(address) ? 0 : passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.keytoolstorage_signer(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return KeytoolSigner.__wrap(ret[0]);
    }
    /**
     * Creates a new key of type `key_scheme`.
     * Returns the tuple ([`PublicKey`](https://docs.iota.org/ts-sdk/api/cryptography/classes/PublicKey), alias).
     * @param {'ed25519' | 'secp256r1' | 'secp256k1'} key_scheme
     * @returns {[PublicKey, string]}
     */
    generateKey(key_scheme) {
        const ptr0 = passStringToWasm0(key_scheme, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.keytoolstorage_generateKey(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Inserts a Bech32-encoded private key in the keystore.
     * The key must use the prefix `iotaprivkey`.
     *
     * Returns the key's alias.
     * @param {string} bech32_secret_key
     * @returns {string}
     */
    insertKey(bech32_secret_key) {
        let deferred3_0;
        let deferred3_1;
        try {
            const ptr0 = passStringToWasm0(bech32_secret_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            const len0 = WASM_VECTOR_LEN;
            const ret = wasm.keytoolstorage_insertKey(this.__wbg_ptr, ptr0, len0);
            var ptr2 = ret[0];
            var len2 = ret[1];
            if (ret[3]) {
                ptr2 = 0; len2 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred3_0 = ptr2;
            deferred3_1 = len2;
            return getStringFromWasm0(ptr2, len2);
        } finally {
            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);
        }
    }
    /**
     * Signs `data` with `address`'s secret key.
     * @param {string} address
     * @param {Uint8Array} data
     * @returns {Uint8Array}
     */
    signRaw(address, data) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.keytoolstorage_signRaw(this.__wbg_ptr, ptr0, len0, ptr1, len1);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        var v3 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v3;
    }
    /**
     * Updates an alias from `old_alias` to `new_alias`
     * If no value for `new_alias` is provided, a randomly generated one will be used.
     * @param {string} old_alias
     * @param {string | null} [new_alias]
     */
    updateAlias(old_alias, new_alias) {
        const ptr0 = passStringToWasm0(old_alias, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(new_alias) ? 0 : passStringToWasm0(new_alias, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        const ret = wasm.keytoolstorage_updateAlias(this.__wbg_ptr, ptr0, len0, ptr1, len1);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns the [`PublicKey`](https://docs.iota.org/ts-sdk/api/cryptography/classes/PublicKey) for the given address together with its alias.
     * @param {string} address
     * @returns {[PublicKey, string]}
     */
    getKey(address) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.keytoolstorage_getKey(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns the [`PublicKey`](https://docs.iota.org/ts-sdk/api/cryptography/classes/PublicKey) that has the given alias.
     * @param {string} alias
     * @returns {PublicKey}
     */
    getKeyByAlias(alias) {
        const ptr0 = passStringToWasm0(alias, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.keytoolstorage_getKeyByAlias(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.KeytoolStorage = KeytoolStorage;

const LinkedDomainServiceFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_linkeddomainservice_free(ptr >>> 0, 1));
/**
 * A service wrapper for a
 * [Linked Domain Service Endpoint](https://identity.foundation/.well-known/resources/did-configuration/#linked-domain-service-endpoint).
 */
class LinkedDomainService {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(LinkedDomainService.prototype);
        obj.__wbg_ptr = ptr;
        LinkedDomainServiceFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        LinkedDomainServiceFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_linkeddomainservice_free(ptr, 0);
    }
    /**
     * Constructs a new {@link LinkedDomainService} that wraps a spec compliant [Linked Domain Service Endpoint](https://identity.foundation/.well-known/resources/did-configuration/#linked-domain-service-endpoint).
     *
     * Domain URLs must include the `https` scheme in order to pass the domain linkage validation.
     * @param {ILinkedDomainService} options
     */
    constructor(options) {
        const ret = wasm.linkeddomainservice_new(options);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        LinkedDomainServiceFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns the domains contained in the Linked Domain Service.
     * @returns {Array<string>}
     */
    domains() {
        const ret = wasm.linkeddomainservice_domains(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the inner service which can be added to a DID Document.
     * @returns {Service}
     */
    toService() {
        const ret = wasm.linkeddomainservice_toService(this.__wbg_ptr);
        return Service.__wrap(ret);
    }
    /**
     * Creates a new {@link LinkedDomainService} from a {@link Service}.
     *
     * # Error
     *
     * Errors if `service` is not a valid Linked Domain Service.
     * @param {Service} service
     * @returns {LinkedDomainService}
     */
    static fromService(service) {
        _assertClass(service, Service);
        const ret = wasm.linkeddomainservice_fromService(service.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return LinkedDomainService.__wrap(ret[0]);
    }
    /**
     * Returns `true` if a {@link Service} is a valid Linked Domain Service.
     * @param {Service} service
     * @returns {boolean}
     */
    static isValid(service) {
        _assertClass(service, Service);
        const ret = wasm.linkeddomainservice_isValid(service.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * Deep clones the object.
     * @returns {LinkedDomainService}
     */
    clone() {
        const ret = wasm.linkeddomainservice_clone(this.__wbg_ptr);
        return LinkedDomainService.__wrap(ret);
    }
}
module.exports.LinkedDomainService = LinkedDomainService;

const LinkedVerifiablePresentationServiceFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_linkedverifiablepresentationservice_free(ptr >>> 0, 1));
/**
 * A service wrapper for a [Linked Verifiable Presentation Service Endpoint](https://identity.foundation/linked-vp/#linked-verifiable-presentation-service-endpoint).
 */
class LinkedVerifiablePresentationService {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(LinkedVerifiablePresentationService.prototype);
        obj.__wbg_ptr = ptr;
        LinkedVerifiablePresentationServiceFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        LinkedVerifiablePresentationServiceFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_linkedverifiablepresentationservice_free(ptr, 0);
    }
    /**
     * Constructs a new {@link LinkedVerifiablePresentationService} that wraps a spec compliant [Linked Verifiable Presentation Service Endpoint](https://identity.foundation/linked-vp/#linked-verifiable-presentation-service-endpoint).
     * @param {ILinkedVerifiablePresentationService} options
     */
    constructor(options) {
        const ret = wasm.linkedverifiablepresentationservice_new(options);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        LinkedVerifiablePresentationServiceFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns the domains contained in the Linked Verifiable Presentation Service.
     * @returns {Array<string>}
     */
    verifiablePresentationUrls() {
        const ret = wasm.linkedverifiablepresentationservice_verifiablePresentationUrls(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the inner service which can be added to a DID Document.
     * @returns {Service}
     */
    toService() {
        const ret = wasm.linkedverifiablepresentationservice_toService(this.__wbg_ptr);
        return Service.__wrap(ret);
    }
    /**
     * Creates a new {@link LinkedVerifiablePresentationService} from a {@link Service}.
     *
     * # Error
     *
     * Errors if `service` is not a valid Linked Verifiable Presentation Service.
     * @param {Service} service
     * @returns {LinkedVerifiablePresentationService}
     */
    static fromService(service) {
        _assertClass(service, Service);
        const ret = wasm.linkedverifiablepresentationservice_fromService(service.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return LinkedVerifiablePresentationService.__wrap(ret[0]);
    }
    /**
     * Returns `true` if a {@link Service} is a valid Linked Verifiable Presentation Service.
     * @param {Service} service
     * @returns {boolean}
     */
    static isValid(service) {
        _assertClass(service, Service);
        const ret = wasm.linkedverifiablepresentationservice_isValid(service.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * Deep clones the object.
     * @returns {LinkedVerifiablePresentationService}
     */
    clone() {
        const ret = wasm.linkedverifiablepresentationservice_clone(this.__wbg_ptr);
        return LinkedVerifiablePresentationService.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.linkedverifiablepresentationservice_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {LinkedVerifiablePresentationService}
     */
    static fromJSON(json) {
        const ret = wasm.linkedverifiablepresentationservice_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return LinkedVerifiablePresentationService.__wrap(ret[0]);
    }
}
module.exports.LinkedVerifiablePresentationService = LinkedVerifiablePresentationService;

const MethodDataFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_methoddata_free(ptr >>> 0, 1));
/**
 * Supported verification method data formats.
 */
class MethodData {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(MethodData.prototype);
        obj.__wbg_ptr = ptr;
        MethodDataFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        MethodDataFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_methoddata_free(ptr, 0);
    }
    /**
     * Creates a new {@link MethodData} variant with Base58-BTC encoded content.
     * @param {Uint8Array} data
     * @returns {MethodData}
     */
    static newBase58(data) {
        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.methoddata_newBase58(ptr0, len0);
        return MethodData.__wrap(ret);
    }
    /**
     * Creates a new {@link MethodData} variant with Multibase-encoded content.
     * @param {Uint8Array} data
     * @returns {MethodData}
     */
    static newMultibase(data) {
        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.methoddata_newMultibase(ptr0, len0);
        return MethodData.__wrap(ret);
    }
    /**
     * Creates a new {@link MethodData} variant consisting of the given `key`.
     *
     * ### Errors
     * An error is thrown if the given `key` contains any private components.
     * @param {Jwk} key
     * @returns {MethodData}
     */
    static newJwk(key) {
        _assertClass(key, Jwk);
        const ret = wasm.methoddata_newJwk(key.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return MethodData.__wrap(ret[0]);
    }
    /**
     * Creates a new custom {@link MethodData}.
     * @param {string} name
     * @param {any} data
     * @returns {MethodData}
     */
    static newCustom(name, data) {
        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.methoddata_newCustom(ptr0, len0, data);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return MethodData.__wrap(ret[0]);
    }
    /**
     * Returns the wrapped custom method data format is `Custom`.
     * @returns {CustomMethodData}
     */
    tryCustom() {
        const ret = wasm.methoddata_tryCustom(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return CustomMethodData.__wrap(ret[0]);
    }
    /**
     * Returns a `Uint8Array` containing the decoded bytes of the {@link MethodData}.
     *
     * This is generally a public key identified by a {@link MethodData} value.
     *
     * ### Errors
     * Decoding can fail if {@link MethodData} has invalid content or cannot be
     * represented as a vector of bytes.
     * @returns {Uint8Array}
     */
    tryDecode() {
        const ret = wasm.methoddata_tryDecode(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * Returns the wrapped {@link Jwk} if the format is `PublicKeyJwk`.
     * @returns {Jwk}
     */
    tryPublicKeyJwk() {
        const ret = wasm.methoddata_tryPublicKeyJwk(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Jwk.__wrap(ret[0]);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.methoddata_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {MethodData}
     */
    static fromJSON(json) {
        const ret = wasm.methoddata_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return MethodData.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {MethodData}
     */
    clone() {
        const ret = wasm.methoddata_clone(this.__wbg_ptr);
        return MethodData.__wrap(ret);
    }
}
module.exports.MethodData = MethodData;

const MethodDigestFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_methoddigest_free(ptr >>> 0, 1));
/**
 * Unique identifier of a {@link VerificationMethod}.
 *
 * NOTE:
 * This class does not have a JSON representation,
 * use the methods `pack` and `unpack` instead.
 */
class MethodDigest {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(MethodDigest.prototype);
        obj.__wbg_ptr = ptr;
        MethodDigestFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        MethodDigestFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_methoddigest_free(ptr, 0);
    }
    /**
     * @param {VerificationMethod} verification_method
     */
    constructor(verification_method) {
        _assertClass(verification_method, VerificationMethod);
        const ret = wasm.methoddigest_new(verification_method.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        MethodDigestFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Packs {@link MethodDigest} into bytes.
     * @returns {Uint8Array}
     */
    pack() {
        const ret = wasm.methoddigest_pack(this.__wbg_ptr);
        return ret;
    }
    /**
     * Unpacks bytes into {@link MethodDigest}.
     * @param {Uint8Array} bytes
     * @returns {MethodDigest}
     */
    static unpack(bytes) {
        const ret = wasm.methoddigest_unpack(bytes);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return MethodDigest.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {MethodDigest}
     */
    clone() {
        const ret = wasm.methoddigest_clone(this.__wbg_ptr);
        return MethodDigest.__wrap(ret);
    }
}
module.exports.MethodDigest = MethodDigest;

const MethodScopeFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_methodscope_free(ptr >>> 0, 1));
/**
 * Supported verification method types.
 */
class MethodScope {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(MethodScope.prototype);
        obj.__wbg_ptr = ptr;
        MethodScopeFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        MethodScopeFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_methodscope_free(ptr, 0);
    }
    /**
     * @returns {MethodScope}
     */
    static VerificationMethod() {
        const ret = wasm.methodscope_VerificationMethod();
        return MethodScope.__wrap(ret);
    }
    /**
     * @returns {MethodScope}
     */
    static Authentication() {
        const ret = wasm.methodscope_Authentication();
        return MethodScope.__wrap(ret);
    }
    /**
     * @returns {MethodScope}
     */
    static AssertionMethod() {
        const ret = wasm.methodscope_AssertionMethod();
        return MethodScope.__wrap(ret);
    }
    /**
     * @returns {MethodScope}
     */
    static KeyAgreement() {
        const ret = wasm.methodscope_KeyAgreement();
        return MethodScope.__wrap(ret);
    }
    /**
     * @returns {MethodScope}
     */
    static CapabilityDelegation() {
        const ret = wasm.methodscope_CapabilityDelegation();
        return MethodScope.__wrap(ret);
    }
    /**
     * @returns {MethodScope}
     */
    static CapabilityInvocation() {
        const ret = wasm.methodscope_CapabilityInvocation();
        return MethodScope.__wrap(ret);
    }
    /**
     * Returns the {@link MethodScope} as a string.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.methodscope_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.methodscope_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {MethodScope}
     */
    static fromJSON(json) {
        const ret = wasm.methodscope_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return MethodScope.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {MethodScope}
     */
    clone() {
        const ret = wasm.methodscope_clone(this.__wbg_ptr);
        return MethodScope.__wrap(ret);
    }
}
module.exports.MethodScope = MethodScope;

const MethodTypeFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_methodtype_free(ptr >>> 0, 1));
/**
 * Supported verification method types.
 */
class MethodType {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(MethodType.prototype);
        obj.__wbg_ptr = ptr;
        MethodTypeFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        MethodTypeFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_methodtype_free(ptr, 0);
    }
    /**
     * @returns {MethodType}
     */
    static Ed25519VerificationKey2018() {
        const ret = wasm.methodtype_Ed25519VerificationKey2018();
        return MethodType.__wrap(ret);
    }
    /**
     * @returns {MethodType}
     */
    static X25519KeyAgreementKey2019() {
        const ret = wasm.methodtype_X25519KeyAgreementKey2019();
        return MethodType.__wrap(ret);
    }
    /**
     * @deprecated Use {@link JsonWebKey2020} instead.
     */
    static JsonWebKey() {
        const ret = wasm.methodtype_JsonWebKey();
        return MethodType.__wrap(ret);
    }
    /**
     * A verification method for use with JWT verification as prescribed by the {@link Jwk}
     * in the `publicKeyJwk` entry.
     * @returns {MethodType}
     */
    static JsonWebKey2020() {
        const ret = wasm.methodtype_JsonWebKey2020();
        return MethodType.__wrap(ret);
    }
    /**
     * A custom method.
     * @param {string} type_
     * @returns {MethodType}
     */
    static custom(type_) {
        const ptr0 = passStringToWasm0(type_, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.methodtype_custom(ptr0, len0);
        return MethodType.__wrap(ret);
    }
    /**
     * Returns the {@link MethodType} as a string.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.methodtype_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.methodtype_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {MethodType}
     */
    static fromJSON(json) {
        const ret = wasm.methodtype_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return MethodType.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {MethodType}
     */
    clone() {
        const ret = wasm.methodtype_clone(this.__wbg_ptr);
        return MethodType.__wrap(ret);
    }
}
module.exports.MethodType = MethodType;

const OnChainIdentityFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_onchainidentity_free(ptr >>> 0, 1));

class OnChainIdentity {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(OnChainIdentity.prototype);
        obj.__wbg_ptr = ptr;
        OnChainIdentityFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        OnChainIdentityFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_onchainidentity_free(ptr, 0);
    }
    /**
     * @param {string} id
     * @param {CoreClientReadOnly} client
     * @returns {Promise<OnChainIdentity>}
     */
    static getById(id, client) {
        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.onchainidentity_getById(ptr0, len0, client);
        return ret;
    }
    /**
     * @returns {string}
     */
    id() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.onchainidentity_id(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @returns {IotaDocument}
     */
    didDocument() {
        const ret = wasm.onchainidentity_didDocument(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return IotaDocument.__wrap(ret[0]);
    }
    /**
     * Returns whether the {@link IotaDocument} contained in this {@link OnChainIdentity} has been deleted.
     * Once a DID Document is deleted, it cannot be reactivated.
     *
     * When calling {@link OnChainIdentity.did_document} on an Identity whose DID Document
     * had been deleted, an *empty* and *deactivated* {@link IotaDocument} will be returned.
     * @returns {boolean}
     */
    hasDeletedDid() {
        const ret = wasm.onchainidentity_hasDeletedDid(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * @returns {boolean}
     */
    isShared() {
        const ret = wasm.onchainidentity_isShared(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * @param {IdentityClient} client
     * @returns {Promise<ControllerToken | undefined>}
     */
    getControllerToken(client) {
        _assertClass(client, IdentityClient);
        const ret = wasm.onchainidentity_getControllerToken(this.__wbg_ptr, client.__wbg_ptr);
        return ret;
    }
    /**
     * @param {string} address
     * @param {IdentityClient} client
     * @returns {Promise<ControllerToken | undefined>}
     */
    getControllerTokenForAddress(address, client) {
        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(client, IdentityClient);
        const ret = wasm.onchainidentity_getControllerTokenForAddress(this.__wbg_ptr, ptr0, len0, client.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {any}
     */
    proposals() {
        const ret = wasm.onchainidentity_proposals(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {IotaDocument} updated_doc
     * @param {ControllerToken} controller_token
     * @param {bigint | null} [expiration_epoch]
     * @returns {TransactionBuilder<CreateProposal<UpdateDid>>}
     */
    updateDidDocument(updated_doc, controller_token, expiration_epoch) {
        _assertClass(updated_doc, IotaDocument);
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.onchainidentity_updateDidDocument(this.__wbg_ptr, updated_doc.__wbg_ptr, controller_token.__wbg_ptr, !isLikeNone(expiration_epoch), isLikeNone(expiration_epoch) ? BigInt(0) : expiration_epoch);
        return TransactionBuilder.__wrap(ret);
    }
    /**
     * @param {ControllerToken} controller_token
     * @param {bigint | null} [expiration_epoch]
     * @returns {TransactionBuilder<CreateProposal<UpdateDid>>}
     */
    deactivateDid(controller_token, expiration_epoch) {
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.onchainidentity_deactivateDid(this.__wbg_ptr, controller_token.__wbg_ptr, !isLikeNone(expiration_epoch), isLikeNone(expiration_epoch) ? BigInt(0) : expiration_epoch);
        return TransactionBuilder.__wrap(ret);
    }
    /**
     * @param {ControllerToken} controller_token
     * @param {bigint | null} [expiration_epoch]
     * @returns {TransactionBuilder<CreateProposal<UpdateDid>>}
     */
    deleteDid(controller_token, expiration_epoch) {
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.onchainidentity_deleteDid(this.__wbg_ptr, controller_token.__wbg_ptr, !isLikeNone(expiration_epoch), isLikeNone(expiration_epoch) ? BigInt(0) : expiration_epoch);
        return TransactionBuilder.__wrap(ret);
    }
    /**
     * @param {ControllerToken} controller_token
     * @param {ConfigChange} config
     * @param {bigint | null} [expiration_epoch]
     * @returns {TransactionBuilder<CreateProposal<ConfigChange>>}
     */
    updateConfig(controller_token, config, expiration_epoch) {
        _assertClass(controller_token, ControllerToken);
        _assertClass(config, ConfigChange);
        var ptr0 = config.__destroy_into_raw();
        const ret = wasm.onchainidentity_updateConfig(this.__wbg_ptr, controller_token.__wbg_ptr, ptr0, !isLikeNone(expiration_epoch), isLikeNone(expiration_epoch) ? BigInt(0) : expiration_epoch);
        return TransactionBuilder.__wrap(ret);
    }
    /**
     * @param {ControllerToken} controller_token
     * @param {([string, string])[]} transfer_map
     * @param {bigint | null} [expiration_epoch]
     * @returns {TransactionBuilder<CreateProposal<SendAction>>}
     */
    sendAssets(controller_token, transfer_map, expiration_epoch) {
        _assertClass(controller_token, ControllerToken);
        const ptr0 = passArrayJsValueToWasm0(transfer_map, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.onchainidentity_sendAssets(this.__wbg_ptr, controller_token.__wbg_ptr, ptr0, len0, !isLikeNone(expiration_epoch), isLikeNone(expiration_epoch) ? BigInt(0) : expiration_epoch);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return TransactionBuilder.__wrap(ret[0]);
    }
    /**
     * @param {ControllerCap} controller_cap
     * @param {DelegationToken} delegation_token
     * @returns {TransactionBuilder<DelegationTokenRevocation>}
     */
    revokeDelegationToken(controller_cap, delegation_token) {
        _assertClass(controller_cap, ControllerCap);
        _assertClass(delegation_token, DelegationToken);
        const ret = wasm.onchainidentity_revokeDelegationToken(this.__wbg_ptr, controller_cap.__wbg_ptr, delegation_token.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DelegationTokenRevocation.__wrap(ret[0]);
    }
    /**
     * @param {ControllerCap} controller_cap
     * @param {DelegationToken} delegation_token
     * @returns {TransactionBuilder<DelegationTokenRevocation>}
     */
    unrevokeDelegationToken(controller_cap, delegation_token) {
        _assertClass(controller_cap, ControllerCap);
        _assertClass(delegation_token, DelegationToken);
        const ret = wasm.onchainidentity_unrevokeDelegationToken(this.__wbg_ptr, controller_cap.__wbg_ptr, delegation_token.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DelegationTokenRevocation.__wrap(ret[0]);
    }
    /**
     * @param {DelegationToken} delegation_token
     * @returns {TransactionBuilder<DeleteDelegationToken>}
     */
    deleteDelegationToken(delegation_token) {
        _assertClass(delegation_token, DelegationToken);
        var ptr0 = delegation_token.__destroy_into_raw();
        const ret = wasm.onchainidentity_deleteDelegationToken(this.__wbg_ptr, ptr0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DeleteDelegationToken.__wrap(ret[0]);
    }
}
module.exports.OnChainIdentity = OnChainIdentity;

const PayloadEntryFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_payloadentry_free(ptr >>> 0, 1));

class PayloadEntry {

    static __unwrap(jsValue) {
        if (!(jsValue instanceof PayloadEntry)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PayloadEntryFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_payloadentry_free(ptr, 0);
    }
    /**
     * @returns {PayloadType}
     */
    get 1() {
        const ret = wasm.__wbg_get_payloadentry_1(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PayloadType} arg0
     */
    set 1(arg0) {
        wasm.__wbg_set_payloadentry_1(this.__wbg_ptr, arg0);
    }
    /**
     * @param {any} value
     */
    set value(value) {
        wasm.payloadentry_set_value(this.__wbg_ptr, value);
    }
    /**
     * @returns {any}
     */
    get value() {
        const ret = wasm.payloadentry_value(this.__wbg_ptr);
        return ret;
    }
}
module.exports.PayloadEntry = PayloadEntry;

const PayloadsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_payloads_free(ptr >>> 0, 1));

class Payloads {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Payloads.prototype);
        obj.__wbg_ptr = ptr;
        PayloadsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PayloadsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_payloads_free(ptr, 0);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.payloads_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Payloads}
     */
    static fromJSON(json) {
        const ret = wasm.payloads_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Payloads.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {Payloads}
     */
    clone() {
        const ret = wasm.payloads_clone(this.__wbg_ptr);
        return Payloads.__wrap(ret);
    }
    /**
     * @param {PayloadEntry[]} entries
     */
    constructor(entries) {
        const ptr0 = passArrayJsValueToWasm0(entries, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.payloads_new(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        PayloadsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {any[]} values
     * @returns {Payloads}
     */
    static newFromValues(values) {
        const ptr0 = passArrayJsValueToWasm0(values, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.payloads_newFromValues(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Payloads.__wrap(ret[0]);
    }
    /**
     * @returns {any[]}
     */
    getValues() {
        const ret = wasm.payloads_getValues(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @returns {Uint32Array}
     */
    getUndisclosedIndexes() {
        const ret = wasm.payloads_getUndisclosedIndexes(this.__wbg_ptr);
        var v1 = getArrayU32FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @returns {Uint32Array}
     */
    getDisclosedIndexes() {
        const ret = wasm.payloads_getDisclosedIndexes(this.__wbg_ptr);
        var v1 = getArrayU32FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @returns {any[]}
     */
    getUndisclosedPayloads() {
        const ret = wasm.payloads_getUndisclosedPayloads(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @returns {Payloads}
     */
    getDisclosedPayloads() {
        const ret = wasm.payloads_getDisclosedPayloads(this.__wbg_ptr);
        return Payloads.__wrap(ret);
    }
    /**
     * @param {number} index
     */
    setUndisclosed(index) {
        wasm.payloads_setUndisclosed(this.__wbg_ptr, index);
    }
    /**
     * @param {number} index
     * @param {any} value
     * @returns {any}
     */
    replacePayloadAtIndex(index, value) {
        const ret = wasm.payloads_replacePayloadAtIndex(this.__wbg_ptr, index, value);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.Payloads = Payloads;

const PresentationFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_presentation_free(ptr >>> 0, 1));
/**
 * Represents a bundle of one or more {@link Credential}s.
 */
class Presentation {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Presentation.prototype);
        obj.__wbg_ptr = ptr;
        PresentationFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PresentationFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_presentation_free(ptr, 0);
    }
    /**
     * Returns the base JSON-LD context.
     * @returns {string}
     */
    static BaseContext() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.presentation_BaseContext();
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * Returns the base type.
     * @returns {string}
     */
    static BaseType() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.presentation_BaseType();
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Constructs a new presentation.
     * @param {IPresentation} values
     */
    constructor(values) {
        const ret = wasm.presentation_new(values);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        PresentationFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns a copy of the JSON-LD context(s) applicable to the presentation.
     * @returns {Array<string | Record<string, any>>}
     */
    context() {
        const ret = wasm.presentation_context(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the unique `URI` identifying the presentation.
     * @returns {string | undefined}
     */
    id() {
        const ret = wasm.presentation_id(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Returns a copy of the URIs defining the type of the presentation.
     * @returns {Array<string>}
     */
    type() {
        const ret = wasm.presentation_type(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the JWT credentials expressing the claims of the presentation.
     * @returns {Array<UnknownCredential>}
     */
    verifiableCredential() {
        const ret = wasm.presentation_verifiableCredential(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns a copy of the URI of the entity that generated the presentation.
     * @returns {string}
     */
    holder() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.presentation_holder(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns a copy of the service(s) used to refresh an expired {@link Credential} in the presentation.
     * @returns {Array<RefreshService>}
     */
    refreshService() {
        const ret = wasm.presentation_refreshService(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a copy of the terms-of-use specified by the presentation holder
     * @returns {Array<Policy>}
     */
    termsOfUse() {
        const ret = wasm.presentation_termsOfUse(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Optional cryptographic proof, unrelated to JWT.
     * @returns {Proof | undefined}
     */
    proof() {
        const ret = wasm.presentation_proof(this.__wbg_ptr);
        return ret === 0 ? undefined : Proof.__wrap(ret);
    }
    /**
     * Sets the proof property of the {@link Presentation}.
     *
     * Note that this proof is not related to JWT.
     * @param {Proof | null} [proof]
     */
    setProof(proof) {
        let ptr0 = 0;
        if (!isLikeNone(proof)) {
            _assertClass(proof, Proof);
            ptr0 = proof.__destroy_into_raw();
        }
        wasm.presentation_setProof(this.__wbg_ptr, ptr0);
    }
    /**
     * Returns a copy of the miscellaneous properties on the presentation.
     * @returns {Map<string, any>}
     */
    properties() {
        const ret = wasm.presentation_properties(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.presentation_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Presentation}
     */
    static fromJSON(json) {
        const ret = wasm.presentation_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Presentation.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {Presentation}
     */
    clone() {
        const ret = wasm.presentation_clone(this.__wbg_ptr);
        return Presentation.__wrap(ret);
    }
}
module.exports.Presentation = Presentation;

const PresentationProtectedHeaderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_presentationprotectedheader_free(ptr >>> 0, 1));

class PresentationProtectedHeader {

    toJSON() {
        return {
            alg: this.alg,
            kid: this.kid,
            aud: this.aud,
            nonce: this.nonce,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PresentationProtectedHeaderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_presentationprotectedheader_free(ptr, 0);
    }
    /**
     * @returns {PresentationProofAlgorithm}
     */
    get alg() {
        const ret = wasm.__wbg_get_presentationprotectedheader_alg(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PresentationProofAlgorithm} arg0
     */
    set alg(arg0) {
        wasm.__wbg_set_presentationprotectedheader_alg(this.__wbg_ptr, arg0);
    }
    /**
     * ID for the key used for the JWP.
     * @returns {string | undefined}
     */
    get kid() {
        const ret = wasm.__wbg_get_presentationprotectedheader_kid(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * ID for the key used for the JWP.
     * @param {string | null} [arg0]
     */
    set kid(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_jwppresentationoptions_audience(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Who have received the JPT.
     * @returns {string | undefined}
     */
    get aud() {
        const ret = wasm.__wbg_get_presentationprotectedheader_aud(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Who have received the JPT.
     * @param {string | null} [arg0]
     */
    set aud(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_jwppresentationoptions_nonce(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * For replay attacks.
     * @returns {string | undefined}
     */
    get nonce() {
        const ret = wasm.__wbg_get_presentationprotectedheader_nonce(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * For replay attacks.
     * @param {string | null} [arg0]
     */
    set nonce(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_claimdisplay_description(this.__wbg_ptr, ptr0, len0);
    }
}
module.exports.PresentationProtectedHeader = PresentationProtectedHeader;

const ProofFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_proof_free(ptr >>> 0, 1));
/**
 * Represents a cryptographic proof that can be used to validate verifiable credentials and
 * presentations.
 *
 * This representation does not inherently implement any standard; instead, it
 * can be utilized to implement standards or user-defined proofs. The presence of the
 * `type` field is necessary to accommodate different types of cryptographic proofs.
 *
 * Note that this proof is not related to JWT and can be used in combination or as an alternative
 * to it.
 */
class Proof {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Proof.prototype);
        obj.__wbg_ptr = ptr;
        ProofFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ProofFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_proof_free(ptr, 0);
    }
    /**
     * @param {string} type_
     * @param {any} properties
     */
    constructor(type_, properties) {
        const ptr0 = passStringToWasm0(type_, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.proof_constructor(ptr0, len0, properties);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        ProofFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns the type of proof.
     * @returns {string}
     */
    type() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.proof_type(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the properties of the proof.
     * @returns {any}
     */
    properties() {
        const ret = wasm.proof_properties(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.proof_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Proof}
     */
    static fromJSON(json) {
        const ret = wasm.proof_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Proof.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {Proof}
     */
    clone() {
        const ret = wasm.proof_clone(this.__wbg_ptr);
        return Proof.__wrap(ret);
    }
}
module.exports.Proof = Proof;

const ProofUpdateCtxFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_proofupdatectx_free(ptr >>> 0, 1));

class ProofUpdateCtx {

    toJSON() {
        return {
            old_start_validity_timeframe: this.old_start_validity_timeframe,
            new_start_validity_timeframe: this.new_start_validity_timeframe,
            old_end_validity_timeframe: this.old_end_validity_timeframe,
            new_end_validity_timeframe: this.new_end_validity_timeframe,
            index_start_validity_timeframe: this.index_start_validity_timeframe,
            index_end_validity_timeframe: this.index_end_validity_timeframe,
            number_of_signed_messages: this.number_of_signed_messages,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ProofUpdateCtxFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_proofupdatectx_free(ptr, 0);
    }
    /**
     * Old `startValidityTimeframe` value
     * @returns {Uint8Array}
     */
    get old_start_validity_timeframe() {
        const ret = wasm.__wbg_get_proofupdatectx_old_start_validity_timeframe(this.__wbg_ptr);
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * Old `startValidityTimeframe` value
     * @param {Uint8Array} arg0
     */
    set old_start_validity_timeframe(arg0) {
        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_claimdisplay_lang(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * New `startValidityTimeframe` value to be signed
     * @returns {Uint8Array}
     */
    get new_start_validity_timeframe() {
        const ret = wasm.__wbg_get_proofupdatectx_new_start_validity_timeframe(this.__wbg_ptr);
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * New `startValidityTimeframe` value to be signed
     * @param {Uint8Array} arg0
     */
    set new_start_validity_timeframe(arg0) {
        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_claimdisplay_label(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Old `endValidityTimeframe` value
     * @returns {Uint8Array}
     */
    get old_end_validity_timeframe() {
        const ret = wasm.__wbg_get_proofupdatectx_old_end_validity_timeframe(this.__wbg_ptr);
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * Old `endValidityTimeframe` value
     * @param {Uint8Array} arg0
     */
    set old_end_validity_timeframe(arg0) {
        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_proofupdatectx_old_end_validity_timeframe(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * New `endValidityTimeframe` value to be signed
     * @returns {Uint8Array}
     */
    get new_end_validity_timeframe() {
        const ret = wasm.__wbg_get_proofupdatectx_new_end_validity_timeframe(this.__wbg_ptr);
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * New `endValidityTimeframe` value to be signed
     * @param {Uint8Array} arg0
     */
    set new_end_validity_timeframe(arg0) {
        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_proofupdatectx_new_end_validity_timeframe(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * Index of `startValidityTimeframe` claim inside the array of Claims
     * @returns {number}
     */
    get index_start_validity_timeframe() {
        const ret = wasm.__wbg_get_proofupdatectx_index_start_validity_timeframe(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * Index of `startValidityTimeframe` claim inside the array of Claims
     * @param {number} arg0
     */
    set index_start_validity_timeframe(arg0) {
        wasm.__wbg_set_proofupdatectx_index_start_validity_timeframe(this.__wbg_ptr, arg0);
    }
    /**
     * Index of `endValidityTimeframe` claim inside the array of Claims
     * @returns {number}
     */
    get index_end_validity_timeframe() {
        const ret = wasm.__wbg_get_proofupdatectx_index_end_validity_timeframe(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * Index of `endValidityTimeframe` claim inside the array of Claims
     * @param {number} arg0
     */
    set index_end_validity_timeframe(arg0) {
        wasm.__wbg_set_proofupdatectx_index_end_validity_timeframe(this.__wbg_ptr, arg0);
    }
    /**
     * Number of signed messages, number of payloads in a JWP
     * @returns {number}
     */
    get number_of_signed_messages() {
        const ret = wasm.__wbg_get_proofupdatectx_number_of_signed_messages(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * Number of signed messages, number of payloads in a JWP
     * @param {number} arg0
     */
    set number_of_signed_messages(arg0) {
        wasm.__wbg_set_proofupdatectx_number_of_signed_messages(this.__wbg_ptr, arg0);
    }
}
module.exports.ProofUpdateCtx = ProofUpdateCtx;

const PublishDidDocumentFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_publishdiddocument_free(ptr >>> 0, 1));

class PublishDidDocument {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(PublishDidDocument.prototype);
        obj.__wbg_ptr = ptr;
        PublishDidDocumentFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PublishDidDocumentFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_publishdiddocument_free(ptr, 0);
    }
    /**
     * @param {IotaDocument} did_document
     * @param {string} controller
     */
    constructor(did_document, controller) {
        _assertClass(did_document, IotaDocument);
        const ptr0 = passStringToWasm0(controller, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.publishdiddocument_new(did_document.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        PublishDidDocumentFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {Promise<Uint8Array>}
     */
    buildProgrammableTransaction(client) {
        const ret = wasm.publishdiddocument_buildProgrammableTransaction(this.__wbg_ptr, client);
        return ret;
    }
    /**
     * @param {TransactionEffects} wasm_effects
     * @param {CoreClientReadOnly} client
     * @returns {Promise<IotaDocument>}
     */
    apply(wasm_effects, client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.publishdiddocument_apply(ptr, wasm_effects, client);
        return ret;
    }
}
module.exports.PublishDidDocument = PublishDidDocument;

const ResolverFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_resolver_free(ptr >>> 0, 1));
/**
 * Convenience type for resolving DID documents from different DID methods.
 *
 * Also provides methods for resolving DID Documents associated with
 * verifiable {@link Credential}s and {@link Presentation}s.
 *
 * # Configuration
 *
 * The resolver will only be able to resolve DID documents for methods it has been configured for in the constructor.
 */
class Resolver {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ResolverFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_resolver_free(ptr, 0);
    }
    /**
     * Constructs a new {@link Resolver}.
     *
     * # Errors
     * If both a `client` is given and the `handlers` map contains the "iota" key the construction process
     * will throw an error because the handler for the "iota" method then becomes ambiguous.
     * @param {ResolverConfig} config
     */
    constructor(config) {
        const ret = wasm.resolver_new(config);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        ResolverFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Fetches the DID Document of the given DID.
     *
     * ### Errors
     *
     * Errors if the resolver has not been configured to handle the method
     * corresponding to the given DID or the resolution process itself fails.
     * @param {string} did
     * @returns {Promise<CoreDocument | IToCoreDocument>}
     */
    resolve(did) {
        const ptr0 = passStringToWasm0(did, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.resolver_resolve(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Concurrently fetches the DID Documents of the multiple given DIDs.
     *
     * # Errors
     * * If the resolver has not been configured to handle the method of any of the given DIDs.
     * * If the resolution process of any DID fails.
     *
     * ## Note
     * * The order of the documents in the returned array matches that in `dids`.
     * * If `dids` contains duplicates, these will be resolved only once and the resolved document
     * is copied into the returned array to match the order of `dids`.
     * @param {Array<string>} dids
     * @returns {Promise<Array<CoreDocument | IToCoreDocument>>}
     */
    resolveMultiple(dids) {
        const ret = wasm.resolver_resolveMultiple(this.__wbg_ptr, dids);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.Resolver = Resolver;

const RevocationBitmapFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_revocationbitmap_free(ptr >>> 0, 1));
/**
 * A compressed bitmap for managing credential revocation.
 */
class RevocationBitmap {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(RevocationBitmap.prototype);
        obj.__wbg_ptr = ptr;
        RevocationBitmapFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        RevocationBitmapFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_revocationbitmap_free(ptr, 0);
    }
    /**
     * Creates a new {@link RevocationBitmap} instance.
     */
    constructor() {
        const ret = wasm.revocationbitmap_new();
        this.__wbg_ptr = ret >>> 0;
        RevocationBitmapFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * The name of the service type.
     * @returns {string}
     */
    static type() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.revocationbitmap_type();
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns `true` if the credential at the given `index` is revoked.
     * @param {number} index
     * @returns {boolean}
     */
    isRevoked(index) {
        const ret = wasm.revocationbitmap_isRevoked(this.__wbg_ptr, index);
        return ret !== 0;
    }
    /**
     * Mark the given index as revoked.
     *
     * Returns true if the index was absent from the set.
     * @param {number} index
     * @returns {boolean}
     */
    revoke(index) {
        const ret = wasm.revocationbitmap_revoke(this.__wbg_ptr, index);
        return ret !== 0;
    }
    /**
     * Mark the index as not revoked.
     *
     * Returns true if the index was present in the set.
     * @param {number} index
     * @returns {boolean}
     */
    unrevoke(index) {
        const ret = wasm.revocationbitmap_unrevoke(this.__wbg_ptr, index);
        return ret !== 0;
    }
    /**
     * Returns the number of revoked credentials.
     * @returns {number}
     */
    len() {
        const ret = wasm.revocationbitmap_len(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] >>> 0;
    }
    /**
     * Return a `Service` with:
     * - the service's id set to `serviceId`,
     * - of type `RevocationBitmap2022`,
     * - and with the bitmap embedded in a data url in the service's endpoint.
     * @param {DIDUrl} serviceId
     * @returns {Service}
     */
    toService(serviceId) {
        _assertClass(serviceId, DIDUrl);
        const ret = wasm.revocationbitmap_toService(this.__wbg_ptr, serviceId.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Service.__wrap(ret[0]);
    }
    /**
     * Try to construct a {@link RevocationBitmap} from a service
     * if it is a valid Revocation Bitmap Service.
     * @param {Service} service
     * @returns {RevocationBitmap}
     */
    static fromEndpoint(service) {
        _assertClass(service, Service);
        const ret = wasm.revocationbitmap_fromEndpoint(service.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return RevocationBitmap.__wrap(ret[0]);
    }
}
module.exports.RevocationBitmap = RevocationBitmap;

const RevocationTimeframeStatusFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_revocationtimeframestatus_free(ptr >>> 0, 1));
/**
 * Information used to determine the current status of a {@link Credential}.
 */
class RevocationTimeframeStatus {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(RevocationTimeframeStatus.prototype);
        obj.__wbg_ptr = ptr;
        RevocationTimeframeStatusFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        RevocationTimeframeStatusFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_revocationtimeframestatus_free(ptr, 0);
    }
    /**
     * Deep clones the object.
     * @returns {RevocationTimeframeStatus}
     */
    clone() {
        const ret = wasm.revocationtimeframestatus_clone(this.__wbg_ptr);
        return RevocationTimeframeStatus.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.revocationtimeframestatus_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {RevocationTimeframeStatus}
     */
    static fromJSON(json) {
        const ret = wasm.revocationtimeframestatus_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return RevocationTimeframeStatus.__wrap(ret[0]);
    }
    /**
     * Creates a new `RevocationTimeframeStatus`.
     * @param {string} id
     * @param {number} index
     * @param {Duration} duration
     * @param {Timestamp | null} [start_validity]
     */
    constructor(id, index, duration, start_validity) {
        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(duration, Duration);
        var ptr1 = duration.__destroy_into_raw();
        let ptr2 = 0;
        if (!isLikeNone(start_validity)) {
            _assertClass(start_validity, Timestamp);
            ptr2 = start_validity.__destroy_into_raw();
        }
        const ret = wasm.revocationtimeframestatus_new(ptr0, len0, index, ptr1, ptr2);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        RevocationTimeframeStatusFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Get startValidityTimeframe value.
     * @returns {Timestamp}
     */
    startValidityTimeframe() {
        const ret = wasm.revocationtimeframestatus_startValidityTimeframe(this.__wbg_ptr);
        return Timestamp.__wrap(ret);
    }
    /**
     * Get endValidityTimeframe value.
     * @returns {Timestamp}
     */
    endValidityTimeframe() {
        const ret = wasm.revocationtimeframestatus_endValidityTimeframe(this.__wbg_ptr);
        return Timestamp.__wrap(ret);
    }
    /**
     * Return the URL for the `RevocationBitmapStatus`.
     * @returns {string}
     */
    id() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.revocationtimeframestatus_id(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Return the index of the credential in the issuer's revocation bitmap
     * @returns {number | undefined}
     */
    index() {
        const ret = wasm.revocationtimeframestatus_index(this.__wbg_ptr);
        return ret === 0x100000001 ? undefined : ret;
    }
}
module.exports.RevocationTimeframeStatus = RevocationTimeframeStatus;

const SdJwtFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwt_free(ptr >>> 0, 1));
/**
 * Representation of an SD-JWT of the format
 * `<Issuer-signed JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>~<optional KB-JWT>`.
 */
class SdJwt {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SdJwt.prototype);
        obj.__wbg_ptr = ptr;
        SdJwtFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwt_free(ptr, 0);
    }
    /**
     * Creates a new `SdJwt` from its components.
     * @param {string} jwt
     * @param {Array<string>} disclosures
     * @param {string | null} [key_binding_jwt]
     */
    constructor(jwt, disclosures, key_binding_jwt) {
        const ptr0 = passStringToWasm0(jwt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(key_binding_jwt) ? 0 : passStringToWasm0(key_binding_jwt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwt_new(ptr0, len0, disclosures, ptr1, len1);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        SdJwtFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Serializes the components into the final SD-JWT.
     * @returns {string}
     */
    presentation() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.sdjwt_presentation(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Parses an SD-JWT into its components as [`SdJwt`].
     *
     * ## Error
     * Returns `DeserializationError` if parsing fails.
     * @param {string} sd_jwt
     * @returns {SdJwt}
     */
    static parse(sd_jwt) {
        const ptr0 = passStringToWasm0(sd_jwt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwt_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwt.__wrap(ret[0]);
    }
    /**
     * Serializes the components into the final SD-JWT.
     * @returns {string}
     */
    toString() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.sdjwt_toString(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * The JWT part.
     * @returns {string}
     */
    jwt() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.sdjwt_jwt(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * The disclosures part.
     * @returns {Array<string>}
     */
    disclosures() {
        const ret = wasm.sdjwt_disclosures(this.__wbg_ptr);
        return ret;
    }
    /**
     * The optional key binding JWT.
     * @returns {string | undefined}
     */
    keyBindingJwt() {
        const ret = wasm.sdjwt_keyBindingJwt(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * Deep clones the object.
     * @returns {SdJwt}
     */
    clone() {
        const ret = wasm.sdjwt_clone(this.__wbg_ptr);
        return SdJwt.__wrap(ret);
    }
}
module.exports.SdJwt = SdJwt;

const SdJwtBuilderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwtbuilder_free(ptr >>> 0, 1));

class SdJwtBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SdJwtBuilder.prototype);
        obj.__wbg_ptr = ptr;
        SdJwtBuilderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtBuilderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwtbuilder_free(ptr, 0);
    }
    /**
     * Creates a new {@link SdJwtVcBuilder} using `object` JSON representation and a given
     * hasher `hasher`.
     * @param {object} object
     * @param {Hasher} hasher
     * @param {number | null} [salt_size]
     */
    constructor(object, hasher, salt_size) {
        const ret = wasm.sdjwtbuilder_new(object, hasher, isLikeNone(salt_size) ? 0x100000001 : (salt_size) >>> 0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        SdJwtBuilderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Substitutes a value with the digest of its disclosure.
     *
     * ## Notes
     * - `path` indicates the pointer to the value that will be concealed using the syntax of [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
     * @param {string} path
     * @returns {SdJwtBuilder}
     */
    makeConcealable(path) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtbuilder_makeConcealable(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtBuilder.__wrap(ret[0]);
    }
    /**
     * Sets the JWT header.
     * ## Notes
     * - if {@link SdJwtVcBuilder.header} is not called, the default header is used: ```json { "typ": "sd-jwt", "alg":
     *   "<algorithm used in SdJwtBuilder.finish>" } ```
     * - `alg` is always replaced with the value passed to {@link SdJwtVcBuilder.finish}.
     * @param {object} header
     * @returns {SdJwtBuilder}
     */
    header(header) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtbuilder_header(ptr, header);
        return SdJwtBuilder.__wrap(ret);
    }
    /**
     * Adds a new claim to the underlying object.
     * @param {string} key
     * @param {any} value
     * @returns {SdJwtBuilder}
     */
    insertClaim(key, value) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtbuilder_insertClaim(ptr, ptr0, len0, value);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtBuilder.__wrap(ret[0]);
    }
    /**
     * Adds a decoy digest to the specified path.
     *
     * `path` indicates the pointer to the value that will be concealed using the syntax of
     * [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
     *
     * Use `path` = "" to add decoys to the top level.
     * @param {string} path
     * @param {number} number_of_decoys
     * @returns {SdJwtBuilder}
     */
    addDecoys(path, number_of_decoys) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtbuilder_addDecoys(ptr, ptr0, len0, number_of_decoys);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtBuilder.__wrap(ret[0]);
    }
    /**
     * Require a proof of possession of a given key from the holder.
     *
     * This operation adds a JWT confirmation (`cnf`) claim as specified in
     * [RFC8300](https://www.rfc-editor.org/rfc/rfc7800.html#section-3).
     * @param {RequiredKeyBinding} key_bind
     * @returns {SdJwtBuilder}
     */
    requireKeyBinding(key_bind) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtbuilder_requireKeyBinding(ptr, key_bind);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtBuilder.__wrap(ret[0]);
    }
    /**
     * Creates an {@link SdJwtVc} with the provided data.
     * @param {JwsSigner} signer
     * @param {string} alg
     * @returns {Promise<SdJwtV2>}
     */
    finish(signer, alg) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(alg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtbuilder_finish(ptr, signer, ptr0, len0);
        return ret;
    }
}
module.exports.SdJwtBuilder = SdJwtBuilder;

const SdJwtCredentialValidatorFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwtcredentialvalidator_free(ptr >>> 0, 1));
/**
 * A type for decoding and validating {@link Credential}.
 */
class SdJwtCredentialValidator {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtCredentialValidatorFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwtcredentialvalidator_free(ptr, 0);
    }
    /**
     * Creates a new `SdJwtCredentialValidator`. If a `signatureVerifier` is provided it will be used when
     * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
     * algorithms will be used.
     * @param {IJwsVerifier | null} [signatureVerifier]
     */
    constructor(signatureVerifier) {
        const ret = wasm.sdjwtcredentialvalidator_new(isLikeNone(signatureVerifier) ? 0 : addToExternrefTable0(signatureVerifier));
        this.__wbg_ptr = ret >>> 0;
        SdJwtCredentialValidatorFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Decodes and validates a `Credential` issued as an SD-JWT. A `DecodedJwtCredential` is returned upon success.
     * The credential is constructed by replacing disclosures following the
     * [`Selective Disclosure for JWTs (SD-JWT)`](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html) standard.
     *
     * The following properties are validated according to `options`:
     * - the issuer's signature on the JWS,
     * - the expiration date,
     * - the issuance date,
     * - the semantic structure.
     *
     * # Warning
     * * The key binding JWT is not validated. If needed, it must be validated separately using
     * `SdJwtValidator::validate_key_binding_jwt`.
     * * The lack of an error returned from this method is in of itself not enough to conclude that the credential can be
     * trusted. This section contains more information on additional checks that should be carried out before and after
     * calling this method.
     *
     * ## The state of the issuer's DID Document
     * The caller must ensure that `issuer` represents an up-to-date DID Document.
     *
     * ## Properties that are not validated
     *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:
     * `proof`, `credentialStatus`, `type`, `credentialSchema`, `refreshService` **and more**.
     * These should be manually checked after validation, according to your requirements.
     *
     * # Errors
     * An error is returned whenever a validated condition is not satisfied.
     * @param {SdJwt} sd_jwt
     * @param {CoreDocument | IToCoreDocument} issuer
     * @param {JwtCredentialValidationOptions} options
     * @param {FailFast} fail_fast
     * @returns {DecodedJwtCredential}
     */
    validateCredential(sd_jwt, issuer, options, fail_fast) {
        _assertClass(sd_jwt, SdJwt);
        _assertClass(options, JwtCredentialValidationOptions);
        const ret = wasm.sdjwtcredentialvalidator_validateCredential(this.__wbg_ptr, sd_jwt.__wbg_ptr, issuer, options.__wbg_ptr, fail_fast);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DecodedJwtCredential.__wrap(ret[0]);
    }
    /**
     * Decode and verify the JWS signature of a `Credential` issued as an SD-JWT using the DID Document of a trusted
     * issuer and replaces the disclosures.
     *
     * A `DecodedJwtCredential` is returned upon success.
     *
     * # Warning
     * The caller must ensure that the DID Documents of the trusted issuers are up-to-date.
     *
     * ## Proofs
     *  Only the JWS signature is verified. If the `Credential` contains a `proof` property this will not be verified
     * by this method.
     *
     * # Errors
     * * If the issuer' URL cannot be parsed.
     * * If Signature verification fails.
     * * If SD decoding fails.
     * @param {SdJwt} credential
     * @param {Array<CoreDocument | IToCoreDocument>} trustedIssuers
     * @param {JwsVerificationOptions} options
     * @returns {DecodedJwtCredential}
     */
    verifySignature(credential, trustedIssuers, options) {
        _assertClass(credential, SdJwt);
        _assertClass(options, JwsVerificationOptions);
        const ret = wasm.sdjwtcredentialvalidator_verifySignature(this.__wbg_ptr, credential.__wbg_ptr, trustedIssuers, options.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return DecodedJwtCredential.__wrap(ret[0]);
    }
    /**
     * Validates a Key Binding JWT (KB-JWT) according to `https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-key-binding-jwt`.
     * The Validation process includes:
     *   * Signature validation using public key materials defined in the `holder` document.
     *   * `typ` value in KB-JWT header.
     *   * `sd_hash` claim value in the KB-JWT claim.
     *   * Optional `nonce`, `aud` and issuance date validation.
     * @param {SdJwt} sdJwt
     * @param {CoreDocument | IToCoreDocument} holder
     * @param {KeyBindingJWTValidationOptions} options
     * @returns {KeyBindingJwtClaims}
     */
    validateKeyBindingJwt(sdJwt, holder, options) {
        _assertClass(sdJwt, SdJwt);
        _assertClass(options, KeyBindingJWTValidationOptions);
        const ret = wasm.sdjwtcredentialvalidator_validateKeyBindingJwt(this.__wbg_ptr, sdJwt.__wbg_ptr, holder, options.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return KeyBindingJwtClaims.__wrap(ret[0]);
    }
}
module.exports.SdJwtCredentialValidator = SdJwtCredentialValidator;

const SdJwtPresentationBuilderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwtpresentationbuilder_free(ptr >>> 0, 1));

class SdJwtPresentationBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SdJwtPresentationBuilder.prototype);
        obj.__wbg_ptr = ptr;
        SdJwtPresentationBuilderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtPresentationBuilderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwtpresentationbuilder_free(ptr, 0);
    }
    /**
     * @param {SdJwtV2} sd_jwt
     * @param {Hasher} hasher
     */
    constructor(sd_jwt, hasher) {
        _assertClass(sd_jwt, SdJwtV2);
        var ptr0 = sd_jwt.__destroy_into_raw();
        const ret = wasm.sdjwtpresentationbuilder_new(ptr0, hasher);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        SdJwtPresentationBuilderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Removes the disclosure for the property at `path`, concealing it.
     *
     * ## Notes
     * - When concealing a claim more than one disclosure may be removed: the disclosure for the claim itself and the
     *   disclosures for any concealable sub-claim.
     * @param {string} path
     * @returns {SdJwtPresentationBuilder}
     */
    conceal(path) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtpresentationbuilder_conceal(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtPresentationBuilder.__wrap(ret[0]);
    }
    /**
     * Adds a {@link KeyBindingJwt} to this {@link SdJwt}'s presentation.
     * @param {KeyBindingJwt} kb_jwt
     * @returns {SdJwtPresentationBuilder}
     */
    attachKeyBindingJwt(kb_jwt) {
        const ptr = this.__destroy_into_raw();
        _assertClass(kb_jwt, KeyBindingJwt);
        var ptr0 = kb_jwt.__destroy_into_raw();
        const ret = wasm.sdjwtpresentationbuilder_attachKeyBindingJwt(ptr, ptr0);
        return SdJwtPresentationBuilder.__wrap(ret);
    }
    /**
     * Returns the resulting {@link SdJwt} together with all removed disclosures.
     * ## Errors
     * - Fails with `Error::MissingKeyBindingJwt` if this {@link SdJwt} requires a key binding but none was provided.
     * @returns {SdJwtPresentationResult}
     */
    finish() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtpresentationbuilder_finish(ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtPresentationResult.__wrap(ret[0]);
    }
}
module.exports.SdJwtPresentationBuilder = SdJwtPresentationBuilder;

const SdJwtPresentationResultFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwtpresentationresult_free(ptr >>> 0, 1));

class SdJwtPresentationResult {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SdJwtPresentationResult.prototype);
        obj.__wbg_ptr = ptr;
        SdJwtPresentationResultFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
            sdJwt: this.sdJwt,
            disclosures: this.disclosures,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtPresentationResultFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwtpresentationresult_free(ptr, 0);
    }
    /**
     * @returns {SdJwtV2}
     */
    get sdJwt() {
        const ret = wasm.__wbg_get_sdjwtpresentationresult_sdJwt(this.__wbg_ptr);
        return SdJwtV2.__wrap(ret);
    }
    /**
     * @param {SdJwtV2} arg0
     */
    set sdJwt(arg0) {
        _assertClass(arg0, SdJwtV2);
        var ptr0 = arg0.__destroy_into_raw();
        wasm.__wbg_set_sdjwtpresentationresult_sdJwt(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {DisclosureV2[]}
     */
    get disclosures() {
        const ret = wasm.__wbg_get_sdjwtpresentationresult_disclosures(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {DisclosureV2[]} arg0
     */
    set disclosures(arg0) {
        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_sdjwtpresentationresult_disclosures(this.__wbg_ptr, ptr0, len0);
    }
}
module.exports.SdJwtPresentationResult = SdJwtPresentationResult;

const SdJwtV2Finalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwtv2_free(ptr >>> 0, 1));

class SdJwtV2 {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SdJwtV2.prototype);
        obj.__wbg_ptr = ptr;
        SdJwtV2Finalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtV2Finalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwtv2_free(ptr, 0);
    }
    /**
     * @param {string} s
     * @returns {SdJwtV2}
     */
    static parse(s) {
        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtv2_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtV2.__wrap(ret[0]);
    }
    /**
     * @returns {any}
     */
    header() {
        const ret = wasm.sdjwtv2_header(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {SdJwtClaims}
     */
    claims() {
        const ret = wasm.sdjwtv2_claims(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @returns {string[]}
     */
    disclosures() {
        const ret = wasm.sdjwtv2_disclosures(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @returns {RequiredKeyBinding | undefined}
     */
    requiredKeyBind() {
        const ret = wasm.sdjwtv2_requiredKeyBind(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the JSON object obtained by replacing all disclosures into their
     * corresponding JWT concealable claims.
     * @returns {any}
     */
    intoDisclosedObject() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtv2_intoDisclosedObject(ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Serializes the components into the final SD-JWT.
     * @returns {string}
     */
    presentation() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.sdjwtv2_presentation(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.sdjwtv2_toJSON(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {any}
     */
    toString() {
        const ret = wasm.sdjwtv2_toString(this.__wbg_ptr);
        return ret;
    }
}
module.exports.SdJwtV2 = SdJwtV2;

const SdJwtVcFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwtvc_free(ptr >>> 0, 1));

class SdJwtVc {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SdJwtVc.prototype);
        obj.__wbg_ptr = ptr;
        SdJwtVcFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtVcFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwtvc_free(ptr, 0);
    }
    /**
     * Deep clones the object.
     * @returns {SdJwtVc}
     */
    clone() {
        const ret = wasm.sdjwtvc_clone(this.__wbg_ptr);
        return SdJwtVc.__wrap(ret);
    }
    /**
     * Parses a `string` into an {@link SdJwtVc}.
     * @param {string} s
     * @returns {SdJwtVc}
     */
    static parse(s) {
        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtvc_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVc.__wrap(ret[0]);
    }
    /**
     * @returns {SdJwtVcClaims}
     */
    claims() {
        const ret = wasm.sdjwtvc_claims(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @returns {SdJwtV2}
     */
    asSdJwt() {
        const ret = wasm.sdjwtvc_asSdJwt(this.__wbg_ptr);
        return SdJwtV2.__wrap(ret);
    }
    /**
     * @param {IResolver<string, Uint8Array>} resolver
     * @returns {Promise<Jwk>}
     */
    issuerJwk(resolver) {
        const ret = wasm.sdjwtvc_issuerJwk(this.__wbg_ptr, resolver);
        return ret;
    }
    /**
     * @param {IResolver<string, Uint8Array>} resolver
     * @returns {Promise<IssuerMetadata | undefined>}
     */
    issuerMetadata(resolver) {
        const ret = wasm.sdjwtvc_issuerMetadata(this.__wbg_ptr, resolver);
        return ret;
    }
    /**
     * @param {IResolver<string, Uint8Array>} resolver
     * @returns {Promise<TypeMetadata>}
     */
    typeMetadata(resolver) {
        const ret = wasm.sdjwtvc_typeMetadata(this.__wbg_ptr, resolver);
        return ret;
    }
    /**
     * Verifies this {@link SdJwtVc} JWT's signature.
     * @param {Jwk} jwk
     * @param {IJwsVerifier | null} [jws_verifier]
     */
    verifySignature(jwk, jws_verifier) {
        _assertClass(jwk, Jwk);
        const ret = wasm.sdjwtvc_verifySignature(this.__wbg_ptr, jwk.__wbg_ptr, isLikeNone(jws_verifier) ? 0 : addToExternrefTable0(jws_verifier));
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Checks the disclosability of this {@link SdJwtVc}'s claims against a list of {@link ClaimMetadata}.
     * ## Notes
     * This check should be performed by the token's holder in order to assert the issuer's compliance with
     * the credential's type.
     * @param {ClaimMetadata[]} claims_metadata
     */
    validateClaimDisclosability(claims_metadata) {
        const ptr0 = passArrayJsValueToWasm0(claims_metadata, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtvc_validateClaimDisclosability(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Check whether this {@link SdJwtVc} is valid.
     *
     * This method checks:
     * - JWS signature
     * - credential's type
     * - claims' disclosability
     * @param {IResolver<string, Uint8Array>} resolver
     * @param {Hasher} hasher
     * @param {IJwsVerifier | null} [jws_verifier]
     * @returns {Promise<void>}
     */
    validate(resolver, hasher, jws_verifier) {
        const ret = wasm.sdjwtvc_validate(this.__wbg_ptr, resolver, hasher, isLikeNone(jws_verifier) ? 0 : addToExternrefTable0(jws_verifier));
        return ret;
    }
    /**
     * Verify the signature of this {@link SdJwtVc}'s {@link KeyBindingJwt}.
     * @param {Jwk} jwk
     * @param {IJwsVerifier | null} [jws_verifier]
     */
    verifyKeyBinding(jwk, jws_verifier) {
        _assertClass(jwk, Jwk);
        const ret = wasm.sdjwtvc_verifyKeyBinding(this.__wbg_ptr, jwk.__wbg_ptr, isLikeNone(jws_verifier) ? 0 : addToExternrefTable0(jws_verifier));
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {Jwk} jwk
     * @param {Hasher} hasher
     * @param {KeyBindingJWTValidationOptions} options
     * @param {IJwsVerifier | null} [jws_verifier]
     */
    validateKeyBinding(jwk, hasher, options, jws_verifier) {
        _assertClass(jwk, Jwk);
        _assertClass(options, KeyBindingJWTValidationOptions);
        const ret = wasm.sdjwtvc_validateKeyBinding(this.__wbg_ptr, jwk.__wbg_ptr, hasher, options.__wbg_ptr, isLikeNone(jws_verifier) ? 0 : addToExternrefTable0(jws_verifier));
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @returns {SdJwtV2}
     */
    intoSdJwt() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtvc_intoSdJwt(ptr);
        return SdJwtV2.__wrap(ret);
    }
    /**
     * @param {Hasher} hasher
     * @returns {object}
     */
    intoDisclosedObject(hasher) {
        const ret = wasm.sdjwtvc_intoDisclosedObject(this.__wbg_ptr, hasher);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Hasher} hasher
     * @returns {SdJwtVcPresentationBuilder}
     */
    intoPresentation(hasher) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtvc_intoPresentation(ptr, hasher);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVcPresentationBuilder.__wrap(ret[0]);
    }
    /**
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.sdjwtvc_toJSON(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {any}
     */
    toString() {
        const ret = wasm.sdjwtvc_toString(this.__wbg_ptr);
        return ret;
    }
}
module.exports.SdJwtVc = SdJwtVc;

const SdJwtVcBuilderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwtvcbuilder_free(ptr >>> 0, 1));

class SdJwtVcBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SdJwtVcBuilder.prototype);
        obj.__wbg_ptr = ptr;
        SdJwtVcBuilderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtVcBuilderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwtvcbuilder_free(ptr, 0);
    }
    /**
     * Creates a new {@link SdJwtVcBuilder} using `object` JSON representation and a given
     * hasher `hasher`.
     * @param {object} object
     * @param {Hasher} hasher
     */
    constructor(object, hasher) {
        const ret = wasm.sdjwtvcbuilder_new(object, hasher);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        SdJwtVcBuilderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Creates a new [`SdJwtVcBuilder`] starting from a {@link Credential} that is converted to a JWT claim set.
     * @param {Credential} credential
     * @param {Hasher} hasher
     * @returns {SdJwtVcBuilder}
     */
    static fromCredential(credential, hasher) {
        _assertClass(credential, Credential);
        var ptr0 = credential.__destroy_into_raw();
        const ret = wasm.sdjwtvcbuilder_fromCredential(ptr0, hasher);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVcBuilder.__wrap(ret[0]);
    }
    /**
     * Substitutes a value with the digest of its disclosure.
     *
     * ## Notes
     * - `path` indicates the pointer to the value that will be concealed using the syntax of [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
     * @param {string} path
     * @returns {SdJwtVcBuilder}
     */
    makeConcealable(path) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtvcbuilder_makeConcealable(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVcBuilder.__wrap(ret[0]);
    }
    /**
     * Sets the JWT header.
     * ## Notes
     * - if {@link SdJwtVcBuilder.header} is not called, the default header is used: ```json { "typ": "sd-jwt", "alg":
     *   "<algorithm used in SdJwtBuilder.finish>" } ```
     * - `alg` is always replaced with the value passed to {@link SdJwtVcBuilder.finish}.
     * @param {object} header
     * @returns {SdJwtVcBuilder}
     */
    header(header) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtvcbuilder_header(ptr, header);
        return SdJwtVcBuilder.__wrap(ret);
    }
    /**
     * Adds a decoy digest to the specified path.
     *
     * `path` indicates the pointer to the value that will be concealed using the syntax of
     * [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
     *
     * Use `path` = "" to add decoys to the top level.
     * @param {string} path
     * @param {number} number_of_decoys
     * @returns {SdJwtVcBuilder}
     */
    addDecoys(path, number_of_decoys) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtvcbuilder_addDecoys(ptr, ptr0, len0, number_of_decoys);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVcBuilder.__wrap(ret[0]);
    }
    /**
     * Require a proof of possession of a given key from the holder.
     *
     * This operation adds a JWT confirmation (`cnf`) claim as specified in
     * [RFC8300](https://www.rfc-editor.org/rfc/rfc7800.html#section-3).
     * @param {RequiredKeyBinding} key_bind
     * @returns {SdJwtVcBuilder}
     */
    requireKeyBinding(key_bind) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtvcbuilder_requireKeyBinding(ptr, key_bind);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVcBuilder.__wrap(ret[0]);
    }
    /**
     * Inserts an `iss` claim. See {@link SdJwtVcClaim.iss}.
     * @param {string} issuer
     * @returns {SdJwtVcBuilder}
     */
    iss(issuer) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(issuer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtvcbuilder_iss(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVcBuilder.__wrap(ret[0]);
    }
    /**
     * Inserts a `nbf` claim. See {@link SdJwtVcClaims.nbf}.
     * @param {Timestamp} nbf
     * @returns {SdJwtVcBuilder}
     */
    nbf(nbf) {
        const ptr = this.__destroy_into_raw();
        _assertClass(nbf, Timestamp);
        var ptr0 = nbf.__destroy_into_raw();
        const ret = wasm.sdjwtvcbuilder_nbf(ptr, ptr0);
        return SdJwtVcBuilder.__wrap(ret);
    }
    /**
     * Inserts a `exp` claim. See {@link SdJwtVcClaims.exp}.
     * @param {Timestamp} exp
     * @returns {SdJwtVcBuilder}
     */
    exp(exp) {
        const ptr = this.__destroy_into_raw();
        _assertClass(exp, Timestamp);
        var ptr0 = exp.__destroy_into_raw();
        const ret = wasm.sdjwtvcbuilder_exp(ptr, ptr0);
        return SdJwtVcBuilder.__wrap(ret);
    }
    /**
     * Inserts a `iat` claim. See {@link SdJwtVcClaims.iat}.
     * @param {Timestamp} iat
     * @returns {SdJwtVcBuilder}
     */
    iat(iat) {
        const ptr = this.__destroy_into_raw();
        _assertClass(iat, Timestamp);
        var ptr0 = iat.__destroy_into_raw();
        const ret = wasm.sdjwtvcbuilder_iat(ptr, ptr0);
        return SdJwtVcBuilder.__wrap(ret);
    }
    /**
     * Inserts a `vct` claim. See {@link SdJwtVcClaims.vct}.
     * @param {string} vct
     * @returns {SdJwtVcBuilder}
     */
    vct(vct) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(vct, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtvcbuilder_vct(ptr, ptr0, len0);
        return SdJwtVcBuilder.__wrap(ret);
    }
    /**
     * Inserts a `sub` claim. See {@link SdJwtVcClaims.sub}.
     * @param {string} sub
     * @returns {SdJwtVcBuilder}
     */
    sub(sub) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(sub, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtvcbuilder_sub(ptr, ptr0, len0);
        return SdJwtVcBuilder.__wrap(ret);
    }
    /**
     * Inserts a `status` claim. See {@link SdJwtVcClaims.status}.
     * @param {any} status
     * @returns {SdJwtVcBuilder}
     */
    status(status) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtvcbuilder_status(ptr, status);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVcBuilder.__wrap(ret[0]);
    }
    /**
     * Creates an {@link SdJwtVc} with the provided data.
     * @param {JwsSigner} signer
     * @param {string} alg
     * @returns {Promise<SdJwtVc>}
     */
    finish(signer, alg) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(alg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtvcbuilder_finish(ptr, signer, ptr0, len0);
        return ret;
    }
}
module.exports.SdJwtVcBuilder = SdJwtVcBuilder;

const SdJwtVcPresentationBuilderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwtvcpresentationbuilder_free(ptr >>> 0, 1));

class SdJwtVcPresentationBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SdJwtVcPresentationBuilder.prototype);
        obj.__wbg_ptr = ptr;
        SdJwtVcPresentationBuilderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtVcPresentationBuilderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwtvcpresentationbuilder_free(ptr, 0);
    }
    /**
     * Prepares a new presentation from a given {@link SdJwtVc}.
     * @param {SdJwtVc} token
     * @param {Hasher} hasher
     */
    constructor(token, hasher) {
        _assertClass(token, SdJwtVc);
        var ptr0 = token.__destroy_into_raw();
        const ret = wasm.sdjwtvcpresentationbuilder_new(ptr0, hasher);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        SdJwtVcPresentationBuilderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @param {string} path
     * @returns {SdJwtVcPresentationBuilder}
     */
    conceal(path) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdjwtvcpresentationbuilder_conceal(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVcPresentationBuilder.__wrap(ret[0]);
    }
    /**
     * @param {KeyBindingJwt} kb_jwt
     * @returns {SdJwtVcPresentationBuilder}
     */
    attachKeyBindingJwt(kb_jwt) {
        const ptr = this.__destroy_into_raw();
        _assertClass(kb_jwt, KeyBindingJwt);
        var ptr0 = kb_jwt.__destroy_into_raw();
        const ret = wasm.sdjwtvcpresentationbuilder_attachKeyBindingJwt(ptr, ptr0);
        return SdJwtVcPresentationBuilder.__wrap(ret);
    }
    /**
     * @returns {SdJwtVcPresentationResult}
     */
    finish() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.sdjwtvcpresentationbuilder_finish(ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SdJwtVcPresentationResult.__wrap(ret[0]);
    }
}
module.exports.SdJwtVcPresentationBuilder = SdJwtVcPresentationBuilder;

const SdJwtVcPresentationResultFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdjwtvcpresentationresult_free(ptr >>> 0, 1));

class SdJwtVcPresentationResult {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SdJwtVcPresentationResult.prototype);
        obj.__wbg_ptr = ptr;
        SdJwtVcPresentationResultFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdJwtVcPresentationResultFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdjwtvcpresentationresult_free(ptr, 0);
    }
    /**
     * @returns {SdJwtVc}
     */
    get sdJwtVc() {
        const ret = wasm.__wbg_get_sdjwtvcpresentationresult_sdJwtVc(this.__wbg_ptr);
        return SdJwtVc.__wrap(ret);
    }
    /**
     * @param {SdJwtVc} arg0
     */
    set sdJwtVc(arg0) {
        _assertClass(arg0, SdJwtVc);
        var ptr0 = arg0.__destroy_into_raw();
        wasm.__wbg_set_sdjwtvcpresentationresult_sdJwtVc(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {DisclosureV2[]}
     */
    get disclosures() {
        const ret = wasm.__wbg_get_sdjwtvcpresentationresult_disclosures(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {DisclosureV2[]} arg0
     */
    set disclosures(arg0) {
        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_sdjwtvcpresentationresult_disclosures(this.__wbg_ptr, ptr0, len0);
    }
}
module.exports.SdJwtVcPresentationResult = SdJwtVcPresentationResult;

const SdObjectDecoderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdobjectdecoder_free(ptr >>> 0, 1));
/**
 * Substitutes digests in an SD-JWT object by their corresponding plaintext values provided by disclosures.
 */
class SdObjectDecoder {

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdObjectDecoderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdobjectdecoder_free(ptr, 0);
    }
    /**
     * Creates a new `SdObjectDecoder` with `sha-256` hasher.
     */
    constructor() {
        const ret = wasm.sdobjectdecoder_new();
        this.__wbg_ptr = ret >>> 0;
        SdObjectDecoderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Decodes an SD-JWT `object` containing by Substituting the digests with their corresponding
     * plaintext values provided by `disclosures`.
     *
     * ## Notes
     * * Claims like `exp` or `iat` are not validated in the process of decoding.
     * * `_sd_alg` property will be removed if present.
     * @param {Record<string, any>} object
     * @param {Array<string>} disclosures
     * @returns {Record<string, any>}
     */
    decode(object, disclosures) {
        const ret = wasm.sdobjectdecoder_decode(this.__wbg_ptr, object, disclosures);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.SdObjectDecoder = SdObjectDecoder;

const SdObjectEncoderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sdobjectencoder_free(ptr >>> 0, 1));
/**
 * Transforms a JSON object into an SD-JWT object by substituting selected values
 * with their corresponding disclosure digests.
 *
 * Note: digests are created using the sha-256 algorithm.
 */
class SdObjectEncoder {

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SdObjectEncoderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sdobjectencoder_free(ptr, 0);
    }
    /**
     * Creates a new `SdObjectEncoder` with `sha-256` hash function.
     * @param {any} object
     */
    constructor(object) {
        const ret = wasm.sdobjectencoder_new(object);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        SdObjectEncoderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Substitutes a value with the digest of its disclosure.
     * If no salt is provided, the disclosure will be created with a random salt value.
     *
     * `path` indicates the pointer to the value that will be concealed using the syntax of
     * [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
     *
     * For the following object:
     *
     *  ```
     * {
     *   "id": "did:value",
     *   "claim1": {
     *      "abc": true
     *   },
     *   "claim2": ["val_1", "val_2"]
     * }
     * ```
     *
     * Path "/id" conceals `"id": "did:value"`
     * Path "/claim1/abc" conceals `"abc": true`
     * Path "/claim2/0" conceals `val_1`
     *
     * ## Errors
     * * `InvalidPath` if pointer is invalid.
     * * `DataTypeMismatch` if existing SD format is invalid.
     * @param {string} path
     * @param {string | null} [salt]
     * @returns {Disclosure}
     */
    conceal(path, salt) {
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(salt) ? 0 : passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        const ret = wasm.sdobjectencoder_conceal(this.__wbg_ptr, ptr0, len0, ptr1, len1);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Disclosure.__wrap(ret[0]);
    }
    /**
     * Adds the `_sd_alg` property to the top level of the object, with
     * its value set to "sha-256".
     */
    addSdAlgProperty() {
        wasm.sdobjectencoder_addSdAlgProperty(this.__wbg_ptr);
    }
    /**
     * Returns the modified object as a string.
     * @returns {string}
     */
    encodeToString() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.sdobjectencoder_encodeToString(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * Returns the modified object as a string.
     * @returns {string}
     */
    toString() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.sdobjectencoder_toString(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * Returns the modified object.
     * @returns {Record<string, any>}
     */
    encodeToObject() {
        const ret = wasm.sdobjectencoder_encodeToObject(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns the modified object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.sdobjectencoder_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Adds a decoy digest to the specified path.
     * If path is an empty slice, decoys will be added to the top level.
     * @param {string} path
     * @param {number} number_of_decoys
     */
    addDecoys(path, number_of_decoys) {
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sdobjectencoder_addDecoys(this.__wbg_ptr, ptr0, len0, number_of_decoys);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
}
module.exports.SdObjectEncoder = SdObjectEncoder;

const SelectiveDisclosurePresentationFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_selectivedisclosurepresentation_free(ptr >>> 0, 1));
/**
 * Used to construct a JwpPresentedBuilder and handle the selective disclosure of attributes
 * - @context MUST NOT be blinded
 * - id MUST be blinded
 * - type MUST NOT be blinded
 * - issuer MUST NOT be blinded
 * - issuanceDate MUST be blinded (if Timeframe Revocation mechanism is used)
 * - expirationDate MUST be blinded (if Timeframe Revocation mechanism is used)
 * - credentialSubject (User have to choose which attribute must be blinded)
 * - credentialSchema MUST NOT be blinded
 * - credentialStatus MUST NOT be blinded
 * - refreshService MUST NOT be blinded (probably will be used for Timeslot Revocation mechanism)
 * - termsOfUse NO reason to use it in ZK VC (will be in any case blinded)
 * - evidence (User have to choose which attribute must be blinded)
 */
class SelectiveDisclosurePresentation {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SelectiveDisclosurePresentationFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_selectivedisclosurepresentation_free(ptr, 0);
    }
    /**
     * Initialize a presentation starting from an Issued JWP.
     * The properties `jti`, `nbf`, `issuanceDate`, `expirationDate` and `termsOfUse` are concealed by default.
     * @param {JwpIssued} issued_jwp
     */
    constructor(issued_jwp) {
        _assertClass(issued_jwp, JwpIssued);
        var ptr0 = issued_jwp.__destroy_into_raw();
        const ret = wasm.selectivedisclosurepresentation_new(ptr0);
        this.__wbg_ptr = ret >>> 0;
        SelectiveDisclosurePresentationFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Selectively disclose "credentialSubject" attributes.
     * # Example
     * ```
     * {
     *     "id": 1234,
     *     "name": "Alice",
     *     "mainCourses": ["Object-oriented Programming", "Mathematics"],
     *     "degree": {
     *         "type": "BachelorDegree",
     *         "name": "Bachelor of Science and Arts",
     *     },
     *     "GPA": "4.0",
     * }
     * ```
     * If you want to undisclose for example the Mathematics course and the name of the degree:
     * ```
     * undisclose_subject("mainCourses[1]");
     * undisclose_subject("degree.name");
     * ```
     * @param {string} path
     */
    concealInSubject(path) {
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.selectivedisclosurepresentation_concealInSubject(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Undiscloses "evidence" attributes.
     * @param {string} path
     */
    concealInEvidence(path) {
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.selectivedisclosurepresentation_concealInEvidence(this.__wbg_ptr, ptr0, len0);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Sets presentation protected header.
     * @param {PresentationProtectedHeader} header
     */
    setPresentationHeader(header) {
        _assertClass(header, PresentationProtectedHeader);
        var ptr0 = header.__destroy_into_raw();
        wasm.selectivedisclosurepresentation_setPresentationHeader(this.__wbg_ptr, ptr0);
    }
}
module.exports.SelectiveDisclosurePresentation = SelectiveDisclosurePresentation;

const SendActionFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sendaction_free(ptr >>> 0, 1));

class SendAction {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SendAction.prototype);
        obj.__wbg_ptr = ptr;
        SendActionFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SendActionFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sendaction_free(ptr, 0);
    }
    /**
     * @returns {([string, string])[]}
     */
    get objectRecipientMap() {
        const ret = wasm.sendaction_objectRecipientMap(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
}
module.exports.SendAction = SendAction;

const SendProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sendproposal_free(ptr >>> 0, 1));

class SendProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SendProposal.prototype);
        obj.__wbg_ptr = ptr;
        SendProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SendProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sendproposal_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get id() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.sendproposal_id(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @returns {SendAction}
     */
    get action() {
        const ret = wasm.sendproposal_action(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return SendAction.__wrap(ret[0]);
    }
    /**
     * @returns {bigint | undefined}
     */
    get expiration_epoch() {
        const ret = wasm.sendproposal_expiration_epoch(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        return ret[0] === 0 ? undefined : BigInt.asUintN(64, ret[1]);
    }
    /**
     * @returns {bigint}
     */
    get votes() {
        const ret = wasm.sendproposal_votes(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return BigInt.asUintN(64, ret[0]);
    }
    /**
     * @returns {Set<string>}
     */
    get voters() {
        const ret = wasm.sendproposal_voters(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {OnChainIdentity} identity
     * @param {ControllerToken} controller_token
     * @returns {TransactionBuilder<ApproveProposal>}
     */
    approve(identity, controller_token) {
        _assertClass(identity, OnChainIdentity);
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.sendproposal_approve(this.__wbg_ptr, identity.__wbg_ptr, controller_token.__wbg_ptr);
        return TransactionBuilder.__wrap(ret);
    }
    /**
     * @param {OnChainIdentity} identity
     * @param {ControllerToken} controller_token
     * @returns {TransactionBuilder}
     */
    intoTx(identity, controller_token) {
        const ptr = this.__destroy_into_raw();
        _assertClass(identity, OnChainIdentity);
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.sendproposal_intoTx(ptr, identity.__wbg_ptr, controller_token.__wbg_ptr);
        return TransactionBuilder.__wrap(ret);
    }
}
module.exports.SendProposal = SendProposal;

const ServiceFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_service_free(ptr >>> 0, 1));
/**
 * A DID Document Service used to enable trusted interactions associated with a DID subject.
 */
class Service {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Service.prototype);
        obj.__wbg_ptr = ptr;
        ServiceFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ServiceFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_service_free(ptr, 0);
    }
    /**
     * @param {IService} service
     */
    constructor(service) {
        const ret = wasm.service_new(service);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        ServiceFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns a copy of the {@link Service} id.
     * @returns {DIDUrl}
     */
    id() {
        const ret = wasm.service_id(this.__wbg_ptr);
        return DIDUrl.__wrap(ret);
    }
    /**
     * Returns a copy of the {@link Service} type.
     * @returns {Array<string>}
     */
    type() {
        const ret = wasm.service_type(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns a copy of the {@link Service} endpoint.
     * @returns {string | string[] | Map<string, string[]>}
     */
    serviceEndpoint() {
        const ret = wasm.service_serviceEndpoint(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns a copy of the custom properties on the {@link Service}.
     * @returns {Map<string, any>}
     */
    properties() {
        const ret = wasm.service_properties(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.service_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Service}
     */
    static fromJSON(json) {
        const ret = wasm.service_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Service.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {Service}
     */
    clone() {
        const ret = wasm.service_clone(this.__wbg_ptr);
        return Service.__wrap(ret);
    }
}
module.exports.Service = Service;

const Sha256HasherFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_sha256hasher_free(ptr >>> 0, 1));

class Sha256Hasher {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        Sha256HasherFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_sha256hasher_free(ptr, 0);
    }
    constructor() {
        const ret = wasm.sha256hasher_new();
        this.__wbg_ptr = ret >>> 0;
        Sha256HasherFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @returns {string}
     */
    algName() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.sha256hasher_algName(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {Uint8Array} input
     * @returns {Uint8Array}
     */
    digest(input) {
        const ptr0 = passArray8ToWasm0(input, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.sha256hasher_digest(this.__wbg_ptr, ptr0, len0);
        var v2 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v2;
    }
    /**
     * @param {string} data
     * @returns {string}
     */
    encodedDigest(data) {
        let deferred2_0;
        let deferred2_1;
        try {
            const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            const len0 = WASM_VECTOR_LEN;
            const ret = wasm.sha256hasher_encodedDigest(this.__wbg_ptr, ptr0, len0);
            deferred2_0 = ret[0];
            deferred2_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
}
module.exports.Sha256Hasher = Sha256Hasher;

const StatusList2021Finalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_statuslist2021_free(ptr >>> 0, 1));
/**
 * StatusList2021 data structure as described in [W3C's VC status list 2021](https://www.w3.org/TR/2023/WD-vc-status-list-20230427/).
 */
class StatusList2021 {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(StatusList2021.prototype);
        obj.__wbg_ptr = ptr;
        StatusList2021Finalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        StatusList2021Finalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_statuslist2021_free(ptr, 0);
    }
    /**
     * Deep clones the object.
     * @returns {StatusList2021}
     */
    clone() {
        const ret = wasm.statuslist2021_clone(this.__wbg_ptr);
        return StatusList2021.__wrap(ret);
    }
    /**
     * Creates a new {@link StatusList2021} of `size` entries.
     * @param {number | null} [size]
     */
    constructor(size) {
        const ret = wasm.statuslist2021_new(isLikeNone(size) ? 0x100000001 : (size) >>> 0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        StatusList2021Finalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns the number of entries in this {@link StatusList2021}.
     * @returns {number}
     */
    len() {
        const ret = wasm.statuslist2021_len(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * Returns whether the entry at `index` is set.
     * @param {number} index
     * @returns {boolean}
     */
    get(index) {
        const ret = wasm.statuslist2021_get(this.__wbg_ptr, index);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * Sets the value of the `index`-th entry.
     * @param {number} index
     * @param {boolean} value
     */
    set(index, value) {
        const ret = wasm.statuslist2021_set(this.__wbg_ptr, index, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Encodes this {@link StatusList2021} into its compressed
     * base64 string representation.
     * @returns {string}
     */
    intoEncodedStr() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ptr = this.__destroy_into_raw();
            const ret = wasm.statuslist2021_intoEncodedStr(ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Attempts to decode a {@link StatusList2021} from a string.
     * @param {string} s
     * @returns {StatusList2021}
     */
    static fromEncodedStr(s) {
        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.statuslist2021_fromEncodedStr(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StatusList2021.__wrap(ret[0]);
    }
}
module.exports.StatusList2021 = StatusList2021;

const StatusList2021CredentialFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_statuslist2021credential_free(ptr >>> 0, 1));
/**
 * A parsed [StatusList2021Credential](https://www.w3.org/TR/2023/WD-vc-status-list-20230427/#statuslist2021credential).
 */
class StatusList2021Credential {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(StatusList2021Credential.prototype);
        obj.__wbg_ptr = ptr;
        StatusList2021CredentialFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        StatusList2021CredentialFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_statuslist2021credential_free(ptr, 0);
    }
    /**
     * Creates a new {@link StatusList2021Credential}.
     * @param {Credential} credential
     */
    constructor(credential) {
        _assertClass(credential, Credential);
        var ptr0 = credential.__destroy_into_raw();
        const ret = wasm.statuslist2021credential_new(ptr0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        StatusList2021CredentialFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @returns {string}
     */
    id() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.statuslist2021credential_id(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Sets the given credential's status using the `index`-th entry of this status list.
     * Returns the created `credentialStatus`.
     * @param {Credential} credential
     * @param {number} index
     * @param {boolean} revoked_or_suspended
     * @returns {StatusList2021Entry}
     */
    setCredentialStatus(credential, index, revoked_or_suspended) {
        _assertClass(credential, Credential);
        const ret = wasm.statuslist2021credential_setCredentialStatus(this.__wbg_ptr, credential.__wbg_ptr, index, revoked_or_suspended);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StatusList2021Entry.__wrap(ret[0]);
    }
    /**
     * Returns the {@link StatusPurpose} of this {@link StatusList2021Credential}.
     * @returns {StatusPurpose}
     */
    purpose() {
        const ret = wasm.statuslist2021credential_purpose(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the state of the `index`-th entry, if any.
     * @param {number} index
     * @returns {CredentialStatus}
     */
    entry(index) {
        const ret = wasm.statuslist2021credential_entry(this.__wbg_ptr, index);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0];
    }
    /**
     * @returns {StatusList2021Credential}
     */
    clone() {
        const ret = wasm.statuslist2021credential_clone(this.__wbg_ptr);
        return StatusList2021Credential.__wrap(ret);
    }
    /**
     * @param {any} json
     * @returns {StatusList2021Credential}
     */
    static fromJSON(json) {
        const ret = wasm.statuslist2021credential_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StatusList2021Credential.__wrap(ret[0]);
    }
    /**
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.statuslist2021credential_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.StatusList2021Credential = StatusList2021Credential;

const StatusList2021CredentialBuilderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_statuslist2021credentialbuilder_free(ptr >>> 0, 1));
/**
 * Builder type to construct valid {@link StatusList2021Credential} instances.
 */
class StatusList2021CredentialBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(StatusList2021CredentialBuilder.prototype);
        obj.__wbg_ptr = ptr;
        StatusList2021CredentialBuilderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        StatusList2021CredentialBuilderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_statuslist2021credentialbuilder_free(ptr, 0);
    }
    /**
     * Creates a new {@link StatusList2021CredentialBuilder}.
     * @param {StatusList2021 | null} [status_list]
     */
    constructor(status_list) {
        let ptr0 = 0;
        if (!isLikeNone(status_list)) {
            _assertClass(status_list, StatusList2021);
            ptr0 = status_list.__destroy_into_raw();
        }
        const ret = wasm.statuslist2021credentialbuilder_new(ptr0);
        this.__wbg_ptr = ret >>> 0;
        StatusList2021CredentialBuilderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Sets the purpose of the {@link StatusList2021Credential} that is being created.
     * @param {StatusPurpose} purpose
     * @returns {StatusList2021CredentialBuilder}
     */
    purpose(purpose) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.statuslist2021credentialbuilder_purpose(ptr, purpose);
        return StatusList2021CredentialBuilder.__wrap(ret);
    }
    /**
     * Sets `credentialSubject.id`.
     * @param {string} id
     * @returns {StatusList2021CredentialBuilder}
     */
    subjectId(id) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.statuslist2021credentialbuilder_subjectId(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StatusList2021CredentialBuilder.__wrap(ret[0]);
    }
    /**
     * Sets the expiration date of the credential.
     * @param {Timestamp} time
     * @returns {StatusList2021CredentialBuilder}
     */
    expirationDate(time) {
        const ptr = this.__destroy_into_raw();
        _assertClass(time, Timestamp);
        var ptr0 = time.__destroy_into_raw();
        const ret = wasm.statuslist2021credentialbuilder_expirationDate(ptr, ptr0);
        return StatusList2021CredentialBuilder.__wrap(ret);
    }
    /**
     * Sets the issuer of the credential.
     * @param {string} issuer
     * @returns {StatusList2021CredentialBuilder}
     */
    issuer(issuer) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(issuer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.statuslist2021credentialbuilder_issuer(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StatusList2021CredentialBuilder.__wrap(ret[0]);
    }
    /**
     * Sets the context of the credential.
     * @param {string} context
     * @returns {StatusList2021CredentialBuilder}
     */
    context(context) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(context, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.statuslist2021credentialbuilder_context(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StatusList2021CredentialBuilder.__wrap(ret[0]);
    }
    /**
     * Adds a credential type.
     * @param {string} t
     * @returns {StatusList2021CredentialBuilder}
     */
    type(t) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(t, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.statuslist2021credentialbuilder_type(ptr, ptr0, len0);
        return StatusList2021CredentialBuilder.__wrap(ret);
    }
    /**
     * Adds a credential's proof.
     * @param {Proof} proof
     * @returns {StatusList2021CredentialBuilder}
     */
    proof(proof) {
        const ptr = this.__destroy_into_raw();
        _assertClass(proof, Proof);
        var ptr0 = proof.__destroy_into_raw();
        const ret = wasm.statuslist2021credentialbuilder_proof(ptr, ptr0);
        return StatusList2021CredentialBuilder.__wrap(ret);
    }
    /**
     * Attempts to build a valid {@link StatusList2021Credential} with the previously provided data.
     * @returns {StatusList2021Credential}
     */
    build() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.statuslist2021credentialbuilder_build(ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StatusList2021Credential.__wrap(ret[0]);
    }
}
module.exports.StatusList2021CredentialBuilder = StatusList2021CredentialBuilder;

const StatusList2021EntryFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_statuslist2021entry_free(ptr >>> 0, 1));
/**
 * [StatusList2021Entry](https://www.w3.org/TR/2023/WD-vc-status-list-20230427/#statuslist2021entry) implementation.
 */
class StatusList2021Entry {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(StatusList2021Entry.prototype);
        obj.__wbg_ptr = ptr;
        StatusList2021EntryFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        StatusList2021EntryFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_statuslist2021entry_free(ptr, 0);
    }
    /**
     * Creates a new {@link StatusList2021Entry}.
     * @param {string} status_list
     * @param {StatusPurpose} purpose
     * @param {number} index
     * @param {string | null} [id]
     */
    constructor(status_list, purpose, index, id) {
        const ptr0 = passStringToWasm0(status_list, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(id) ? 0 : passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        const ret = wasm.statuslist2021entry_new(ptr0, len0, purpose, index, ptr1, len1);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        StatusList2021EntryFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns this `credentialStatus`'s `id`.
     * @returns {string}
     */
    id() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.statuslist2021entry_id(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Returns the purpose of this entry.
     * @returns {StatusPurpose}
     */
    purpose() {
        const ret = wasm.statuslist2021entry_purpose(this.__wbg_ptr);
        return ret;
    }
    /**
     * Returns the index of this entry.
     * @returns {number}
     */
    index() {
        const ret = wasm.statuslist2021entry_index(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * Returns the referenced {@link StatusList2021Credential}'s url.
     * @returns {string}
     */
    statusListCredential() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.statuslist2021entry_statusListCredential(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Downcasts {@link StatusList2021Entry} to {@link Status}
     * @returns {Status}
     */
    toStatus() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.statuslist2021entry_toStatus(ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {StatusList2021Entry}
     */
    clone() {
        const ret = wasm.statuslist2021entry_clone(this.__wbg_ptr);
        return StatusList2021Entry.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.statuslist2021entry_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {StatusList2021Entry}
     */
    static fromJSON(json) {
        const ret = wasm.statuslist2021entry_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StatusList2021Entry.__wrap(ret[0]);
    }
}
module.exports.StatusList2021Entry = StatusList2021Entry;

const StorageFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_storage_free(ptr >>> 0, 1));
/**
 * A type wrapping a `JwkStorage` and `KeyIdStorage` that should always be used together when
 * working with storage backed DID documents.
 */
class Storage {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        StorageFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_storage_free(ptr, 0);
    }
    /**
     * Constructs a new `Storage`.
     * @param {JwkStorage} jwkStorage
     * @param {KeyIdStorage} keyIdStorage
     */
    constructor(jwkStorage, keyIdStorage) {
        const ret = wasm.storage_new(jwkStorage, keyIdStorage);
        this.__wbg_ptr = ret >>> 0;
        StorageFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Obtain the wrapped `KeyIdStorage`.
     * @returns {KeyIdStorage}
     */
    keyIdStorage() {
        const ret = wasm.storage_keyIdStorage(this.__wbg_ptr);
        return ret;
    }
    /**
     * Obtain the wrapped `JwkStorage`.
     * @returns {JwkStorage}
     */
    keyStorage() {
        const ret = wasm.storage_keyStorage(this.__wbg_ptr);
        return ret;
    }
}
module.exports.Storage = Storage;

const StorageSignerFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_storagesigner_free(ptr >>> 0, 1));

class StorageSigner {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        StorageSignerFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_storagesigner_free(ptr, 0);
    }
    /**
     * @param {Storage} storage
     * @param {string} key_id
     * @param {Jwk} public_key
     */
    constructor(storage, key_id, public_key) {
        _assertClass(storage, Storage);
        const ptr0 = passStringToWasm0(key_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        _assertClass(public_key, Jwk);
        var ptr1 = public_key.__destroy_into_raw();
        const ret = wasm.storagesigner_new(storage.__wbg_ptr, ptr0, len0, ptr1);
        this.__wbg_ptr = ret >>> 0;
        StorageSignerFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @returns {string}
     */
    keyId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.storagesigner_keyId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {Uint8Array} data
     * @returns {Promise<string>}
     */
    sign(data) {
        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.storagesigner_sign(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @returns {Promise<PublicKey>}
     */
    publicKey() {
        const ret = wasm.storagesigner_publicKey(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Promise<Uint8Array>}
     */
    iotaPublicKeyBytes() {
        const ret = wasm.storagesigner_iotaPublicKeyBytes(this.__wbg_ptr);
        return ret;
    }
}
module.exports.StorageSigner = StorageSigner;

const TimestampFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_timestamp_free(ptr >>> 0, 1));
/**
 * A parsed Timestamp.
 */
class Timestamp {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Timestamp.prototype);
        obj.__wbg_ptr = ptr;
        TimestampFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        TimestampFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_timestamp_free(ptr, 0);
    }
    /**
     * Creates a new {@link Timestamp} with the current date and time.
     */
    constructor() {
        const ret = wasm.timestamp_new();
        this.__wbg_ptr = ret >>> 0;
        TimestampFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Parses a {@link Timestamp} from the provided input string.
     * @param {string} input
     * @returns {Timestamp}
     */
    static parse(input) {
        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.timestamp_parse(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Timestamp.__wrap(ret[0]);
    }
    /**
     * Creates a new {@link Timestamp} with the current date and time.
     * @returns {Timestamp}
     */
    static nowUTC() {
        const ret = wasm.timestamp_new();
        return Timestamp.__wrap(ret);
    }
    /**
     * Returns the {@link Timestamp} as an RFC 3339 `String`.
     * @returns {string}
     */
    toRFC3339() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.timestamp_toRFC3339(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Computes `self + duration`
     *
     * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @param {Duration} duration
     * @returns {Timestamp | undefined}
     */
    checkedAdd(duration) {
        _assertClass(duration, Duration);
        const ret = wasm.timestamp_checkedAdd(this.__wbg_ptr, duration.__wbg_ptr);
        return ret === 0 ? undefined : Timestamp.__wrap(ret);
    }
    /**
     * Computes `self - duration`
     *
     * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @param {Duration} duration
     * @returns {Timestamp | undefined}
     */
    checkedSub(duration) {
        _assertClass(duration, Duration);
        const ret = wasm.timestamp_checkedSub(this.__wbg_ptr, duration.__wbg_ptr);
        return ret === 0 ? undefined : Timestamp.__wrap(ret);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.timestamp_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {Timestamp}
     */
    static fromJSON(json) {
        const ret = wasm.timestamp_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Timestamp.__wrap(ret[0]);
    }
}
module.exports.Timestamp = Timestamp;

const TransactionBuilderFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_transactionbuilder_free(ptr >>> 0, 1));

class TransactionBuilder {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(TransactionBuilder.prototype);
        obj.__wbg_ptr = ptr;
        TransactionBuilderFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        TransactionBuilderFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_transactionbuilder_free(ptr, 0);
    }
    /**
     * @param {Transaction<unknown>} tx
     */
    constructor(tx) {
        const ret = wasm.transactionbuilder_new(tx);
        this.__wbg_ptr = ret >>> 0;
        TransactionBuilderFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @returns {Transaction<unknown>}
     */
    get transaction() {
        const ret = wasm.transactionbuilder_transaction(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {bigint} price
     * @returns {TransactionBuilder}
     */
    withGasPrice(price) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.transactionbuilder_withGasPrice(ptr, price);
        return TransactionBuilder.__wrap(ret);
    }
    /**
     * @param {bigint} budget
     * @returns {TransactionBuilder}
     */
    withGasBudget(budget) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.transactionbuilder_withGasBudget(ptr, budget);
        return TransactionBuilder.__wrap(ret);
    }
    /**
     * @param {string} owner
     * @returns {TransactionBuilder}
     */
    withGasOwner(owner) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(owner, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.transactionbuilder_withGasOwner(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return TransactionBuilder.__wrap(ret[0]);
    }
    /**
     * @param {IotaObjectRef[]} payment
     * @returns {TransactionBuilder}
     */
    withGasPayment(payment) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passArrayJsValueToWasm0(payment, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.transactionbuilder_withGasPayment(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return TransactionBuilder.__wrap(ret[0]);
    }
    /**
     * @param {string} sender
     * @returns {TransactionBuilder}
     */
    withSender(sender) {
        const ptr = this.__destroy_into_raw();
        const ptr0 = passStringToWasm0(sender, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.transactionbuilder_withSender(ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return TransactionBuilder.__wrap(ret[0]);
    }
    /**
     * @param {CoreClient} client
     * @returns {Promise<TransactionBuilder>}
     */
    withSignature(client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.transactionbuilder_withSignature(ptr, client);
        return ret;
    }
    /**
     * @param {CoreClientReadOnly} client
     * @param {SponsorFn} sponsor_fn
     * @returns {Promise<TransactionBuilder>}
     */
    withSponsor(client, sponsor_fn) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.transactionbuilder_withSponsor(ptr, client, sponsor_fn);
        return ret;
    }
    /**
     * @param {CoreClient} client
     * @returns {[Uint8Array, string[], Transaction]}
     */
    build(client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.transactionbuilder_build(ptr, client);
        return ret;
    }
    /**
     * @param {CoreClientReadOnly} client
     * @returns {[Uint8Array, string[], Transaction]}
     */
    build_with_defaults(client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.transactionbuilder_build_with_defaults(ptr, client);
        return ret;
    }
    /**
     * @param {CoreClient} client
     * @returns {TransactionOutput<unknown>}
     */
    buildAndExecute(client) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.transactionbuilder_buildAndExecute(ptr, client);
        return ret;
    }
}
module.exports.TransactionBuilder = TransactionBuilder;

const TransactionOutputFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_transactionoutput_free(ptr >>> 0, 1));

class TransactionOutput {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(TransactionOutput.prototype);
        obj.__wbg_ptr = ptr;
        TransactionOutputFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
            output: this.output,
            response: this.response,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        TransactionOutputFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_transactionoutput_free(ptr, 0);
    }
    /**
     * @returns {any}
     */
    get output() {
        const ret = wasm.__wbg_get_transactionoutput_output(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {any} arg0
     */
    set output(arg0) {
        wasm.__wbg_set_transactionoutput_output(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {IotaTransactionBlockResponse}
     */
    get response() {
        const ret = wasm.__wbg_get_transactionoutput_response(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {IotaTransactionBlockResponse} arg0
     */
    set response(arg0) {
        wasm.__wbg_set_transactionoutput_response(this.__wbg_ptr, arg0);
    }
}
module.exports.TransactionOutput = TransactionOutput;

const TransactionOutputInternalIotaDocumentFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_transactionoutputinternaliotadocument_free(ptr >>> 0, 1));

class TransactionOutputInternalIotaDocument {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        TransactionOutputInternalIotaDocumentFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_transactionoutputinternaliotadocument_free(ptr, 0);
    }
    /**
     * @returns {IotaDocument}
     */
    get output() {
        const ret = wasm.transactionoutputinternaliotadocument_output(this.__wbg_ptr);
        return IotaDocument.__wrap(ret);
    }
    /**
     * @returns {WasmIotaTransactionBlockResponseWrapper}
     */
    get response() {
        const ret = wasm.transactionoutputinternaliotadocument_response(this.__wbg_ptr);
        return ret;
    }
}
module.exports.TransactionOutputInternalIotaDocument = TransactionOutputInternalIotaDocument;

const TypeMetadataFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_typemetadata_free(ptr >>> 0, 1));

class TypeMetadata {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(TypeMetadata.prototype);
        obj.__wbg_ptr = ptr;
        TypeMetadataFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        TypeMetadataFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_typemetadata_free(ptr, 0);
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.typemetadata_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {TypeMetadata}
     */
    static fromJSON(json) {
        const ret = wasm.typemetadata_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return TypeMetadata.__wrap(ret[0]);
    }
    /**
     * @param {any} helper
     */
    constructor(helper) {
        const ret = wasm.typemetadata_new(helper);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        TypeMetadataFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * @returns {any}
     */
    intoInner() {
        const ret = wasm.typemetadata_intoInner(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Uses this {@link TypeMetadata} to validate JSON object `credential`. This method fails
     * if the schema is referenced instead of embedded.
     * Use {@link TypeMetadata.validate_credential_with_resolver} for such cases.
     * ## Notes
     * This method ignores type extensions.
     * @param {any} credential
     */
    validateCredential(credential) {
        const ret = wasm.typemetadata_validateCredential(this.__wbg_ptr, credential);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Similar to {@link TypeMetadata.validate_credential}, but accepts a {@link Resolver}
     * {@link Url} -> {@link any} that is used to resolve any reference to either
     * another type or JSON schema.
     * @param {any} credential
     * @param {IResolver<string, any>} resolver
     * @returns {Promise<void>}
     */
    validateCredentialWithResolver(credential, resolver) {
        const ret = wasm.typemetadata_validateCredentialWithResolver(this.__wbg_ptr, credential, resolver);
        return ret;
    }
}
module.exports.TypeMetadata = TypeMetadata;

const UnknownCredentialFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_unknowncredential_free(ptr >>> 0, 1));

class UnknownCredential {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(UnknownCredential.prototype);
        obj.__wbg_ptr = ptr;
        UnknownCredentialFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        UnknownCredentialFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_unknowncredential_free(ptr, 0);
    }
    /**
     * Returns a {@link Jwt} if the credential is of type string, `undefined` otherwise.
     * @returns {Jwt | undefined}
     */
    tryIntoJwt() {
        const ret = wasm.unknowncredential_tryIntoJwt(this.__wbg_ptr);
        return ret === 0 ? undefined : Jwt.__wrap(ret);
    }
    /**
     * Returns a {@link Credential} if the credential is of said type, `undefined` otherwise.
     * @returns {Credential | undefined}
     */
    tryIntoCredential() {
        const ret = wasm.unknowncredential_tryIntoCredential(this.__wbg_ptr);
        return ret === 0 ? undefined : Credential.__wrap(ret);
    }
    /**
     * Returns the contained value as an Object, if it can be converted, `undefined` otherwise.
     * @returns {Record<string, any> | undefined}
     */
    tryIntoRaw() {
        const ret = wasm.unknowncredential_tryIntoRaw(this.__wbg_ptr);
        return ret;
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.unknowncredential_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {UnknownCredential}
     */
    static fromJSON(json) {
        const ret = wasm.unknowncredential_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return UnknownCredential.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {UnknownCredential}
     */
    clone() {
        const ret = wasm.unknowncredential_clone(this.__wbg_ptr);
        return UnknownCredential.__wrap(ret);
    }
}
module.exports.UnknownCredential = UnknownCredential;

const UpdateDidFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_updatedid_free(ptr >>> 0, 1));

class UpdateDid {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(UpdateDid.prototype);
        obj.__wbg_ptr = ptr;
        UpdateDidFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        UpdateDidFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_updatedid_free(ptr, 0);
    }
    /**
     * @returns {boolean}
     */
    isDeactivation() {
        const ret = wasm.updatedid_isDeactivation(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * @returns {IotaDocument | undefined}
     */
    get didDocument() {
        const ret = wasm.updatedid_didDocument(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : IotaDocument.__wrap(ret[0]);
    }
}
module.exports.UpdateDid = UpdateDid;

const UpdateDidProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_updatedidproposal_free(ptr >>> 0, 1));

class UpdateDidProposal {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(UpdateDidProposal.prototype);
        obj.__wbg_ptr = ptr;
        UpdateDidProposalFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        UpdateDidProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_updatedidproposal_free(ptr, 0);
    }
}
module.exports.UpdateDidProposal = UpdateDidProposal;

const UpdatedDidProposalFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_updateddidproposal_free(ptr >>> 0, 1));

class UpdatedDidProposal {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        UpdatedDidProposalFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_updateddidproposal_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get id() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.updateddidproposal_id(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @returns {UpdateDid}
     */
    get action() {
        const ret = wasm.updateddidproposal_action(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return UpdateDid.__wrap(ret[0]);
    }
    /**
     * @returns {bigint | undefined}
     */
    get expiration_epoch() {
        const ret = wasm.updateddidproposal_expiration_epoch(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        return ret[0] === 0 ? undefined : BigInt.asUintN(64, ret[1]);
    }
    /**
     * @returns {bigint}
     */
    get votes() {
        const ret = wasm.updateddidproposal_votes(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return BigInt.asUintN(64, ret[0]);
    }
    /**
     * @returns {Set<string>}
     */
    get voters() {
        const ret = wasm.updateddidproposal_voters(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {OnChainIdentity} identity
     * @param {ControllerToken} controller_token
     * @returns {TransactionBuilder<ApproveProposal>}
     */
    approve(identity, controller_token) {
        _assertClass(identity, OnChainIdentity);
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.updateddidproposal_approve(this.__wbg_ptr, identity.__wbg_ptr, controller_token.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return TransactionBuilder.__wrap(ret[0]);
    }
    /**
     * @param {OnChainIdentity} identity
     * @param {ControllerToken} controller_token
     * @returns {TransactionBuilder<ExecuteProposal<UpdateDid>>}
     */
    intoTx(identity, controller_token) {
        const ptr = this.__destroy_into_raw();
        _assertClass(identity, OnChainIdentity);
        _assertClass(controller_token, ControllerToken);
        const ret = wasm.updateddidproposal_intoTx(ptr, identity.__wbg_ptr, controller_token.__wbg_ptr);
        return TransactionBuilder.__wrap(ret);
    }
}
module.exports.UpdatedDidProposal = UpdatedDidProposal;

const VerificationMethodFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_verificationmethod_free(ptr >>> 0, 1));
/**
 * A DID Document Verification Method.
 */
class VerificationMethod {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(VerificationMethod.prototype);
        obj.__wbg_ptr = ptr;
        VerificationMethodFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        VerificationMethodFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_verificationmethod_free(ptr, 0);
    }
    /**
     * Creates a new {@link VerificationMethod} from the given `did` and {@link Jwk}. If `fragment` is not given
     * the `kid` value of the given `key` will be used, if present, otherwise an error is returned.
     *
     * ### Recommendations
     * The following recommendations are essentially taken from the `publicKeyJwk` description from the [DID specification](https://www.w3.org/TR/did-core/#dfn-publickeyjwk):
     * - It is recommended that verification methods that use `Jwks` to represent their public keys use the value of
     *   `kid` as their fragment identifier. This is
     * done automatically if `None` is passed in as the fragment.
     * - It is recommended that {@link Jwk} kid values are set to the public key fingerprint.
     * @param {CoreDID | IToCoreDID} did
     * @param {Jwk} key
     * @param {string | null} [fragment]
     * @returns {VerificationMethod}
     */
    static newFromJwk(did, key, fragment) {
        _assertClass(key, Jwk);
        var ptr0 = isLikeNone(fragment) ? 0 : passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.verificationmethod_newFromJwk(did, key.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return VerificationMethod.__wrap(ret[0]);
    }
    /**
     * Create a custom {@link VerificationMethod}.
     * @param {DIDUrl} id
     * @param {CoreDID} controller
     * @param {MethodType} type_
     * @param {MethodData} data
     */
    constructor(id, controller, type_, data) {
        _assertClass(id, DIDUrl);
        _assertClass(controller, CoreDID);
        _assertClass(type_, MethodType);
        _assertClass(data, MethodData);
        const ret = wasm.verificationmethod_new(id.__wbg_ptr, controller.__wbg_ptr, type_.__wbg_ptr, data.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        this.__wbg_ptr = ret[0] >>> 0;
        VerificationMethodFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
    /**
     * Returns a copy of the {@link DIDUrl} of the {@link VerificationMethod}'s `id`.
     * @returns {DIDUrl}
     */
    id() {
        const ret = wasm.verificationmethod_id(this.__wbg_ptr);
        return DIDUrl.__wrap(ret);
    }
    /**
     * Sets the id of the {@link VerificationMethod}.
     * @param {DIDUrl} id
     */
    setId(id) {
        _assertClass(id, DIDUrl);
        const ret = wasm.verificationmethod_setId(this.__wbg_ptr, id.__wbg_ptr);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Returns a copy of the `controller` `DID` of the {@link VerificationMethod}.
     * @returns {CoreDID}
     */
    controller() {
        const ret = wasm.verificationmethod_controller(this.__wbg_ptr);
        return CoreDID.__wrap(ret);
    }
    /**
     * Sets the `controller` `DID` of the {@link VerificationMethod} object.
     * @param {CoreDID} did
     */
    setController(did) {
        _assertClass(did, CoreDID);
        wasm.verificationmethod_setController(this.__wbg_ptr, did.__wbg_ptr);
    }
    /**
     * Returns a copy of the {@link VerificationMethod} type.
     * @returns {MethodType}
     */
    type() {
        const ret = wasm.verificationmethod_type(this.__wbg_ptr);
        return MethodType.__wrap(ret);
    }
    /**
     * Sets the {@link VerificationMethod} type.
     * @param {MethodType} type_
     */
    setType(type_) {
        _assertClass(type_, MethodType);
        wasm.verificationmethod_setType(this.__wbg_ptr, type_.__wbg_ptr);
    }
    /**
     * Returns a copy of the {@link VerificationMethod} public key data.
     * @returns {MethodData}
     */
    data() {
        const ret = wasm.verificationmethod_data(this.__wbg_ptr);
        return MethodData.__wrap(ret);
    }
    /**
     * Sets {@link VerificationMethod} public key data.
     * @param {MethodData} data
     */
    setData(data) {
        _assertClass(data, MethodData);
        wasm.verificationmethod_setData(this.__wbg_ptr, data.__wbg_ptr);
    }
    /**
     * Get custom properties of the Verification Method.
     * @returns {Map<string, any>}
     */
    properties() {
        const ret = wasm.verificationmethod_properties(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Adds a custom property to the Verification Method.
     * If the value is set to `null`, the custom property will be removed.
     *
     * ### WARNING
     * This method can overwrite existing properties like `id` and result
     * in an invalid Verification Method.
     * @param {string} key
     * @param {any} value
     */
    setPropertyUnchecked(key, value) {
        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.verificationmethod_setPropertyUnchecked(this.__wbg_ptr, ptr0, len0, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * Serializes this to a JSON object.
     * @returns {any}
     */
    toJSON() {
        const ret = wasm.verificationmethod_toJSON(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Deserializes an instance from a JSON object.
     * @param {any} json
     * @returns {VerificationMethod}
     */
    static fromJSON(json) {
        const ret = wasm.verificationmethod_fromJSON(json);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return VerificationMethod.__wrap(ret[0]);
    }
    /**
     * Deep clones the object.
     * @returns {VerificationMethod}
     */
    clone() {
        const ret = wasm.verificationmethod_clone(this.__wbg_ptr);
        return VerificationMethod.__wrap(ret);
    }
}
module.exports.VerificationMethod = VerificationMethod;

const WasmManagedCoreClientFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_wasmmanagedcoreclient_free(ptr >>> 0, 1));

class WasmManagedCoreClient {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        WasmManagedCoreClientFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_wasmmanagedcoreclient_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    packageId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.wasmmanagedcoreclient_packageId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {string[]}
     */
    packageHistory() {
        const ret = wasm.wasmmanagedcoreclient_packageHistory(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @returns {string}
     */
    network() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.wasmmanagedcoreclient_network(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {IotaClient}
     */
    iotaClient() {
        const ret = wasm.wasmmanagedcoreclient_iotaClient(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {TransactionSigner}
     */
    signer() {
        const ret = wasm.wasmmanagedcoreclient_signer(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {string}
     */
    senderAddress() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.wasmmanagedcoreclient_senderAddress(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {PublicKey}
     */
    senderPublicKey() {
        const ret = wasm.wasmmanagedcoreclient_senderPublicKey(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
}
module.exports.WasmManagedCoreClient = WasmManagedCoreClient;

const WasmManagedCoreClientReadOnlyFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_wasmmanagedcoreclientreadonly_free(ptr >>> 0, 1));

class WasmManagedCoreClientReadOnly {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(WasmManagedCoreClientReadOnly.prototype);
        obj.__wbg_ptr = ptr;
        WasmManagedCoreClientReadOnlyFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        WasmManagedCoreClientReadOnlyFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_wasmmanagedcoreclientreadonly_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    packageId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.wasmmanagedcoreclientreadonly_packageId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {string[]}
     */
    packageHistory() {
        const ret = wasm.wasmmanagedcoreclientreadonly_packageHistory(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @returns {string}
     */
    network() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.wasmmanagedcoreclientreadonly_network(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {IotaClient}
     */
    iotaClient() {
        const ret = wasm.wasmmanagedcoreclientreadonly_iotaClient(this.__wbg_ptr);
        return ret;
    }
}
module.exports.WasmManagedCoreClientReadOnly = WasmManagedCoreClientReadOnly;

module.exports.__wbg_String_8f0eb39a4a4c2f66 = function(arg0, arg1) {
    const ret = String(arg1);
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_add_883d9432f9188ef2 = function(arg0, arg1) {
    const ret = arg0.add(arg1);
    return ret;
};

module.exports.__wbg_algName_29529b4948b50252 = function(arg0, arg1) {
    const ret = arg1.algName();
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_apply_826300d883b22f95 = function() { return handleError(function (arg0, arg1, arg2) {
    const ret = arg0.apply(arg1, arg2);
    return ret;
}, arguments) };

module.exports.__wbg_approveconfigchangeproposal_new = function(arg0) {
    const ret = ApproveConfigChangeProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_approvesendproposal_new = function(arg0) {
    const ret = ApproveSendProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_approveupdatediddocumentproposal_new = function(arg0) {
    const ret = ApproveUpdateDidDocumentProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_assign_3627b8559449930a = function(arg0, arg1) {
    const ret = Object.assign(arg0, arg1);
    return ret;
};

module.exports.__wbg_buffer_609cc3eee51ed158 = function(arg0) {
    const ret = arg0.buffer;
    return ret;
};

module.exports.__wbg_buildProgrammableTransaction_c020574f642704ed = function() { return handleError(function (arg0, arg1) {
    const ret = arg0.buildProgrammableTransaction(arg1);
    return ret;
}, arguments) };

module.exports.__wbg_build_860de5011ce078bc = function() { return handleError(function (arg0) {
    const ret = arg0.build();
    return ret;
}, arguments) };

module.exports.__wbg_call_672a4d21634d4a24 = function() { return handleError(function (arg0, arg1) {
    const ret = arg0.call(arg1);
    return ret;
}, arguments) };

module.exports.__wbg_call_7cccdd69e0791ae2 = function() { return handleError(function (arg0, arg1, arg2) {
    const ret = arg0.call(arg1, arg2);
    return ret;
}, arguments) };

module.exports.__wbg_claimdisplay_new = function(arg0) {
    const ret = ClaimDisplay.__wrap(arg0);
    return ret;
};

module.exports.__wbg_claimdisplay_unwrap = function(arg0) {
    const ret = ClaimDisplay.__unwrap(arg0);
    return ret;
};

module.exports.__wbg_claimmetadata_unwrap = function(arg0) {
    const ret = ClaimMetadata.__unwrap(arg0);
    return ret;
};

module.exports.__wbg_client_a17ea92e57c685c6 = function(arg0) {
    const ret = arg0.client;
    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
};

module.exports.__wbg_configchangeproposal_new = function(arg0) {
    const ret = ConfigChangeProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_controllerandvotingpower_unwrap = function(arg0) {
    const ret = ControllerAndVotingPower.__unwrap(arg0);
    return ret;
};

module.exports.__wbg_controllertoken_new = function(arg0) {
    const ret = ControllerToken.__wrap(arg0);
    return ret;
};

module.exports.__wbg_coredid_new = function(arg0) {
    const ret = CoreDID.__wrap(arg0);
    return ret;
};

module.exports.__wbg_createconfigchangeproposal_new = function(arg0) {
    const ret = CreateConfigChangeProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_createidentity_new = function(arg0) {
    const ret = CreateIdentity.__wrap(arg0);
    return ret;
};

module.exports.__wbg_createsendproposal_new = function(arg0) {
    const ret = CreateSendProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_createupdatedidproposal_new = function(arg0) {
    const ret = CreateUpdateDidProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_crypto_574e78ad8b13b65f = function(arg0) {
    const ret = arg0.crypto;
    return ret;
};

module.exports.__wbg_delegatetoken_new = function(arg0) {
    const ret = DelegateToken.__wrap(arg0);
    return ret;
};

module.exports.__wbg_delegationtoken_new = function(arg0) {
    const ret = DelegationToken.__wrap(arg0);
    return ret;
};

module.exports.__wbg_deleteKeyId_b520aeef632f3f21 = function(arg0, arg1) {
    const ret = arg0.deleteKeyId(MethodDigest.__wrap(arg1));
    return ret;
};

module.exports.__wbg_delete_feaa997684144daa = function(arg0, arg1, arg2) {
    let deferred0_0;
    let deferred0_1;
    try {
        deferred0_0 = arg1;
        deferred0_1 = arg2;
        const ret = arg0.delete(getStringFromWasm0(arg1, arg2));
        return ret;
    } finally {
        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);
    }
};

module.exports.__wbg_devInspectTransactionBlock_e72a6d3fd95ada77 = function(arg0, arg1) {
    const ret = arg0.devInspectTransactionBlock(arg1);
    return ret;
};

module.exports.__wbg_didurl_new = function(arg0) {
    const ret = DIDUrl.__wrap(arg0);
    return ret;
};

module.exports.__wbg_digest_5c12e4f074112f2a = function(arg0, arg1) {
    const ret = arg1.digest;
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_digest_f69f88262996ff47 = function(arg0, arg1, arg2, arg3) {
    const ret = arg1.digest(getArrayU8FromWasm0(arg2, arg3));
    const ptr1 = passArray8ToWasm0(ret, wasm.__wbindgen_malloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_disclosurev2_new = function(arg0) {
    const ret = DisclosureV2.__wrap(arg0);
    return ret;
};

module.exports.__wbg_disclosurev2_unwrap = function(arg0) {
    const ret = DisclosureV2.__unwrap(arg0);
    return ret;
};

module.exports.__wbg_done_769e5ede4b31c67b = function(arg0) {
    const ret = arg0.done;
    return ret;
};

module.exports.__wbg_encodedDigest_2f79e7608fb084ed = function(arg0, arg1, arg2, arg3) {
    const ret = arg1.encodedDigest(getStringFromWasm0(arg2, arg3));
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_entries_3265d4158b33e5dc = function(arg0) {
    const ret = Object.entries(arg0);
    return ret;
};

module.exports.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {
    let deferred0_0;
    let deferred0_1;
    try {
        deferred0_0 = arg0;
        deferred0_1 = arg1;
        console.error(getStringFromWasm0(arg0, arg1));
    } finally {
        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);
    }
};

module.exports.__wbg_execSync_0490d426728e6490 = function() { return handleError(function (arg0, arg1) {
    const ret = execSync(getStringFromWasm0(arg0, arg1));
    return ret;
}, arguments) };

module.exports.__wbg_executeTransactionBlock_ae13464f6ecfc4e8 = function(arg0, arg1) {
    const ret = arg0.executeTransactionBlock(arg1);
    return ret;
};

module.exports.__wbg_executeconfigchangeproposal_new = function(arg0) {
    const ret = ExecuteConfigChangeProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_executesendproposal_new = function(arg0) {
    const ret = ExecuteSendProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_executeupdatedidproposal_new = function(arg0) {
    const ret = ExecuteUpdateDidProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_fromBytes_0a9bcda2b38ec17c = function() { return handleError(function (arg0) {
    const ret = TransactionDataBuilder.fromBytes(arg0);
    return ret;
}, arguments) };

module.exports.__wbg_fromEntries_524679eecb0bdc2e = function() { return handleError(function (arg0) {
    const ret = Object.fromEntries(arg0);
    return ret;
}, arguments) };

module.exports.__wbg_from_2a5d3e218e67aa85 = function(arg0) {
    const ret = Array.from(arg0);
    return ret;
};

module.exports.__wbg_generate_325537f234649956 = function(arg0, arg1, arg2, arg3, arg4) {
    let deferred0_0;
    let deferred0_1;
    let deferred1_0;
    let deferred1_1;
    try {
        deferred0_0 = arg1;
        deferred0_1 = arg2;
        deferred1_0 = arg3;
        deferred1_1 = arg4;
        const ret = arg0.generate(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
        return ret;
    } finally {
        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);
        wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
    }
};

module.exports.__wbg_getChainIdentifier_2a6e750eca0bda73 = function(arg0) {
    const ret = arg0.getChainIdentifier();
    return ret;
};

module.exports.__wbg_getCoins_91f69552c8b7e571 = function(arg0, arg1) {
    const ret = arg0.getCoins(arg1);
    return ret;
};

module.exports.__wbg_getCoreDidCloneInternal_588a922ba86e8cc1 = function(arg0) {
    const ret = _getCoreDidCloneInternal(arg0);
    _assertClass(ret, CoreDID);
    var ptr1 = ret.__destroy_into_raw();
    return ptr1;
};

module.exports.__wbg_getCoreDocumentInternal_fd51bd8239d8fa56 = function(arg0) {
    const ret = _getCoreDocumentInternal(arg0);
    _assertClass(ret, CoreDocument);
    var ptr1 = ret.__destroy_into_raw();
    return ptr1;
};

module.exports.__wbg_getDynamicFieldObject_79c5c582729dd1c1 = function(arg0, arg1) {
    const ret = arg0.getDynamicFieldObject(arg1);
    return ret;
};

module.exports.__wbg_getKeyId_acf7d90956e0ae38 = function(arg0, arg1) {
    const ret = arg0.getKeyId(MethodDigest.__wrap(arg1));
    return ret;
};

module.exports.__wbg_getObject_7cf9ec54232a3a02 = function(arg0, arg1) {
    const ret = arg0.getObject(arg1);
    return ret;
};

module.exports.__wbg_getOwnedObjects_be4bdee8aedfed3b = function(arg0, arg1) {
    const ret = arg0.getOwnedObjects(arg1);
    return ret;
};

module.exports.__wbg_getRandomValues_3c9c0d586e575a16 = function() { return handleError(function (arg0, arg1) {
    globalThis.crypto.getRandomValues(getArrayU8FromWasm0(arg0, arg1));
}, arguments) };

module.exports.__wbg_getRandomValues_b8f5dbd5f3995a9e = function() { return handleError(function (arg0, arg1) {
    arg0.getRandomValues(arg1);
}, arguments) };

module.exports.__wbg_getReferenceGasPrice_11e9eab827688504 = function(arg0) {
    const ret = arg0.getReferenceGasPrice();
    return ret;
};

module.exports.__wbg_getTransactionBlock_393f5080f7aed311 = function(arg0, arg1) {
    const ret = arg0.getTransactionBlock(arg1);
    return ret;
};

module.exports.__wbg_get_13495dac72693ecc = function(arg0, arg1) {
    const ret = arg0.get(arg1);
    return ret;
};

module.exports.__wbg_get_67b2ba62fc30de12 = function() { return handleError(function (arg0, arg1) {
    const ret = Reflect.get(arg0, arg1);
    return ret;
}, arguments) };

module.exports.__wbg_get_85c3d71662a108c8 = function() { return handleError(function (arg0, arg1) {
    const ret = Reflect.get(arg0, arg1 >>> 0);
    return ret;
}, arguments) };

module.exports.__wbg_get_b9b93047fe3cf45b = function(arg0, arg1) {
    const ret = arg0[arg1 >>> 0];
    return ret;
};

module.exports.__wbg_getdigest_ea38a8f9a2428021 = function(arg0, arg1) {
    const ret = arg1.get_digest();
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_geteffects_5c58938d7630e13a = function(arg0) {
    const ret = arg0.get_effects();
    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
};

module.exports.__wbg_getevents_748d93e02381908d = function(arg0) {
    const ret = arg0.get_events();
    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
};

module.exports.__wbg_getkey_64d7d4e5f75f8202 = function(arg0, arg1, arg2) {
    const ret = arg0._get_key(getStringFromWasm0(arg1, arg2));
    let ptr1 = 0;
    if (!isLikeNone(ret)) {
        _assertClass(ret, Jwk);
        ptr1 = ret.__destroy_into_raw();
    }
    return ptr1;
};

module.exports.__wbg_getresponse_c4b8ab9893bda5ca = function(arg0) {
    const ret = arg0.get_response();
    return ret;
};

module.exports.__wbg_getwithrefkey_1dc361bd10053bfe = function(arg0, arg1) {
    const ret = arg0[arg1];
    return ret;
};

module.exports.__wbg_handlers_ade81bd6855e0e56 = function(arg0) {
    const ret = arg0.handlers;
    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
};

module.exports.__wbg_id_fcf5b41a5e689f3e = function(arg0) {
    const ret = arg0.id;
    return ret;
};

module.exports.__wbg_identity_new = function(arg0) {
    const ret = Identity.__wrap(arg0);
    return ret;
};

module.exports.__wbg_identityclient_new = function(arg0) {
    const ret = IdentityClient.__wrap(arg0);
    return ret;
};

module.exports.__wbg_identityclientreadonly_new = function(arg0) {
    const ret = IdentityClientReadOnly.__wrap(arg0);
    return ret;
};

module.exports.__wbg_insertKeyId_f03f40908a808cdf = function(arg0, arg1, arg2, arg3) {
    let deferred0_0;
    let deferred0_1;
    try {
        deferred0_0 = arg2;
        deferred0_1 = arg3;
        const ret = arg0.insertKeyId(MethodDigest.__wrap(arg1), getStringFromWasm0(arg2, arg3));
        return ret;
    } finally {
        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);
    }
};

module.exports.__wbg_insert_3763dc241aa578da = function(arg0, arg1) {
    const ret = arg0.insert(Jwk.__wrap(arg1));
    return ret;
};

module.exports.__wbg_instanceof_ArrayBuffer_e14585432e3737fc = function(arg0) {
    let result;
    try {
        result = arg0 instanceof ArrayBuffer;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_Error_4d54113b22d20306 = function(arg0) {
    let result;
    try {
        result = arg0 instanceof Error;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_MapStringNumber_7ff51472fdbdc25e = function(arg0) {
    let result;
    try {
        result = arg0 instanceof MapStringNumber;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_Map_f3469ce2244d2430 = function(arg0) {
    let result;
    try {
        result = arg0 instanceof Map;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_Promise_935168b8f4b49db3 = function(arg0) {
    let result;
    try {
        result = arg0 instanceof Promise;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_StringSet_e14b314e4c6b70bd = function(arg0) {
    let result;
    try {
        result = arg0 instanceof StringSet;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_TypeMetadataHelper_1e3bc1fd15a2b64e = function(arg0) {
    let result;
    try {
        result = arg0 instanceof TypeMetadataHelper;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_Uint8Array_17156bcf118086a9 = function(arg0) {
    let result;
    try {
        result = arg0 instanceof Uint8Array;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_iotaClient_71f4517bbea4319b = function(arg0) {
    const ret = arg0.iotaClient();
    return ret;
};

module.exports.__wbg_iotaPublicKeyBytes_76699c0704b8fe66 = function() { return handleError(function (arg0) {
    const ret = arg0.iotaPublicKeyBytes();
    return ret;
}, arguments) };

module.exports.__wbg_iotadid_new = function(arg0) {
    const ret = IotaDID.__wrap(arg0);
    return ret;
};

module.exports.__wbg_iotadocument_new = function(arg0) {
    const ret = IotaDocument.__wrap(arg0);
    return ret;
};

module.exports.__wbg_isArray_a1eab7e0d067391b = function(arg0) {
    const ret = Array.isArray(arg0);
    return ret;
};

module.exports.__wbg_isSafeInteger_343e2beeeece1bb0 = function(arg0) {
    const ret = Number.isSafeInteger(arg0);
    return ret;
};

module.exports.__wbg_issuermetadata_new = function(arg0) {
    const ret = IssuerMetadata.__wrap(arg0);
    return ret;
};

module.exports.__wbg_iterator_9a24c88df860dc65 = function() {
    const ret = Symbol.iterator;
    return ret;
};

module.exports.__wbg_jpt_new = function(arg0) {
    const ret = Jpt.__wrap(arg0);
    return ret;
};

module.exports.__wbg_jwk_new = function(arg0) {
    const ret = Jwk.__wrap(arg0);
    return ret;
};

module.exports.__wbg_jwkgenoutput_new = function(arg0) {
    const ret = JwkGenOutput.__wrap(arg0);
    return ret;
};

module.exports.__wbg_jws_new = function(arg0) {
    const ret = Jws.__wrap(arg0);
    return ret;
};

module.exports.__wbg_jwt_new = function(arg0) {
    const ret = Jwt.__wrap(arg0);
    return ret;
};

module.exports.__wbg_keybindingjwt_new = function(arg0) {
    const ret = KeyBindingJwt.__wrap(arg0);
    return ret;
};

module.exports.__wbg_keys_4e7df9a04572b339 = function(arg0) {
    const ret = arg0.keys();
    return ret;
};

module.exports.__wbg_length_a446193dc22c12f8 = function(arg0) {
    const ret = arg0.length;
    return ret;
};

module.exports.__wbg_length_e2d2a49132c1b256 = function(arg0) {
    const ret = arg0.length;
    return ret;
};

module.exports.__wbg_log_4326f9f1191b65f6 = function(arg0, arg1) {
    console.log(getStringFromWasm0(arg0, arg1));
};

module.exports.__wbg_log_494d390fc6bd3722 = function(arg0, arg1) {
    console.log(getStringFromWasm0(arg0, arg1));
};

module.exports.__wbg_maybeGetIotaDocumentInternal_a90e1d9d0b66bc5b = function(arg0) {
    const ret = _maybeGetIotaDocumentInternal(arg0);
    let ptr1 = 0;
    if (!isLikeNone(ret)) {
        _assertClass(ret, IotaDocument);
        ptr1 = ret.__destroy_into_raw();
    }
    return ptr1;
};

module.exports.__wbg_message_97a2af9b89d693a3 = function(arg0) {
    const ret = arg0.message;
    return ret;
};

module.exports.__wbg_msCrypto_a61aeb35a24c1329 = function(arg0) {
    const ret = arg0.msCrypto;
    return ret;
};

module.exports.__wbg_name_0b327d569f00ebee = function(arg0) {
    const ret = arg0.name;
    return ret;
};

module.exports.__wbg_network_74dbf5495f4547b7 = function(arg0, arg1) {
    const ret = arg1.network();
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_new_23a2665fac83c611 = function(arg0, arg1) {
    try {
        var state0 = {a: arg0, b: arg1};
        var cb0 = (arg0, arg1) => {
            const a = state0.a;
            state0.a = 0;
            try {
                return __wbg_adapter_1374(a, state0.b, arg0, arg1);
            } finally {
                state0.a = a;
            }
        };
        const ret = new Promise(cb0);
        return ret;
    } finally {
        state0.a = state0.b = 0;
    }
};

module.exports.__wbg_new_405e22f390576ce2 = function() {
    const ret = new Object();
    return ret;
};

module.exports.__wbg_new_5e0be73521bc8c17 = function() {
    const ret = new Map();
    return ret;
};

module.exports.__wbg_new_78feb108b6472713 = function() {
    const ret = new Array();
    return ret;
};

module.exports.__wbg_new_8a6f238a6ece86ea = function() {
    const ret = new Error();
    return ret;
};

module.exports.__wbg_new_8e702e9560506b16 = function(arg0) {
    const ret = new WasmIotaTransactionBlockResponseWrapper(arg0);
    return ret;
};

module.exports.__wbg_new_a12002a7f91c75be = function(arg0) {
    const ret = new Uint8Array(arg0);
    return ret;
};

module.exports.__wbg_new_a239edaa1dc2968f = function(arg0) {
    const ret = new Set(arg0);
    return ret;
};

module.exports.__wbg_new_b08a00743b8ae2f3 = function(arg0, arg1) {
    const ret = new TypeError(getStringFromWasm0(arg0, arg1));
    return ret;
};

module.exports.__wbg_new_c68d7209be747379 = function(arg0, arg1) {
    const ret = new Error(getStringFromWasm0(arg0, arg1));
    return ret;
};

module.exports.__wbg_newed25519pkbase64_cc96b864921f980f = function() { return handleError(function (arg0, arg1) {
    const ret = new Ed25519PublicKey(getStringFromWasm0(arg0, arg1));
    return ret;
}, arguments) };

module.exports.__wbg_newnoargs_105ed471475aaf50 = function(arg0, arg1) {
    const ret = new Function(getStringFromWasm0(arg0, arg1));
    return ret;
};

module.exports.__wbg_newsecp256k1pkbase64_2d5c65eff4a862ee = function() { return handleError(function (arg0, arg1) {
    const ret = new Secp256k1PublicKey(getStringFromWasm0(arg0, arg1));
    return ret;
}, arguments) };

module.exports.__wbg_newsecp256r1pkbase64_142ec5e800b06898 = function() { return handleError(function (arg0, arg1) {
    const ret = new Secp256r1PublicKey(getStringFromWasm0(arg0, arg1));
    return ret;
}, arguments) };

module.exports.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a = function(arg0, arg1, arg2) {
    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);
    return ret;
};

module.exports.__wbg_newwithlength_a381634e90c276d4 = function(arg0) {
    const ret = new Uint8Array(arg0 >>> 0);
    return ret;
};

module.exports.__wbg_next_25feadfc0913fea9 = function(arg0) {
    const ret = arg0.next;
    return ret;
};

module.exports.__wbg_next_6574e1a8a62d1055 = function() { return handleError(function (arg0) {
    const ret = arg0.next();
    return ret;
}, arguments) };

module.exports.__wbg_node_905d3e251edff8a2 = function(arg0) {
    const ret = arg0.node;
    return ret;
};

module.exports.__wbg_now_807e54c39636c349 = function() {
    const ret = Date.now();
    return ret;
};

module.exports.__wbg_objectId_780510080a012d86 = function(arg0, arg1) {
    const ret = arg1.objectId;
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_onchainidentity_new = function(arg0) {
    const ret = OnChainIdentity.__wrap(arg0);
    return ret;
};

module.exports.__wbg_packageHistory_e86ef8f85c599ee3 = function(arg0, arg1) {
    const ret = arg1.packageHistory();
    const ptr1 = passArrayJsValueToWasm0(ret, wasm.__wbindgen_malloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_payloadentry_unwrap = function(arg0) {
    const ret = PayloadEntry.__unwrap(arg0);
    return ret;
};

module.exports.__wbg_process_dc0fbacc7c1c06f7 = function(arg0) {
    const ret = arg0.process;
    return ret;
};

module.exports.__wbg_properties_6f8f71213e748a1b = function(arg0) {
    const ret = arg0.properties;
    return ret;
};

module.exports.__wbg_publishdiddocument_new = function(arg0) {
    const ret = PublishDidDocument.__wrap(arg0);
    return ret;
};

module.exports.__wbg_push_737cfc8c1432c2c6 = function(arg0, arg1) {
    const ret = arg0.push(arg1);
    return ret;
};

module.exports.__wbg_queryEvents_71e6ea98daf8ff1a = function(arg0, arg1) {
    const ret = arg0.queryEvents(arg1);
    return ret;
};

module.exports.__wbg_queueMicrotask_97d92b4fcc8a61c5 = function(arg0) {
    queueMicrotask(arg0);
};

module.exports.__wbg_queueMicrotask_d3219def82552485 = function(arg0) {
    const ret = arg0.queueMicrotask;
    return ret;
};

module.exports.__wbg_randomFillSync_ac0988aba3254290 = function() { return handleError(function (arg0, arg1) {
    arg0.randomFillSync(arg1);
}, arguments) };

module.exports.__wbg_require_60cc747a6bc5215a = function() { return handleError(function () {
    const ret = module.require;
    return ret;
}, arguments) };

module.exports.__wbg_resolveDid_172d96c5aa0760f2 = function(arg0, arg1) {
    const ret = arg0.resolveDid(IotaDID.__wrap(arg1));
    return ret;
};

module.exports.__wbg_resolve_4851785c9c5f573d = function(arg0) {
    const ret = Promise.resolve(arg0);
    return ret;
};

module.exports.__wbg_resolve_6157ba80219e286f = function() { return handleError(function (arg0, arg1, arg2) {
    const ret = arg0.resolve(getStringFromWasm0(arg1, arg2));
    return ret;
}, arguments) };

module.exports.__wbg_resolve_f3e977a6d25e25f5 = function() { return handleError(function (arg0, arg1, arg2) {
    const ret = arg0.resolve(getStringFromWasm0(arg1, arg2));
    return ret;
}, arguments) };

module.exports.__wbg_sdjwtv2_new = function(arg0) {
    const ret = SdJwtV2.__wrap(arg0);
    return ret;
};

module.exports.__wbg_sdjwtvc_new = function(arg0) {
    const ret = SdJwtVc.__wrap(arg0);
    return ret;
};

module.exports.__wbg_senderAddress_0c8578e051e69cf4 = function(arg0, arg1) {
    const ret = arg1.senderAddress();
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_senderPublicKey_31721fd44a5675fb = function(arg0) {
    const ret = arg0.senderPublicKey();
    return ret;
};

module.exports.__wbg_sendproposal_new = function(arg0) {
    const ret = SendProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_serviceEndpoint_51cb344881cba0e8 = function(arg0) {
    const ret = arg0.serviceEndpoint;
    return ret;
};

module.exports.__wbg_service_new = function(arg0) {
    const ret = Service.__wrap(arg0);
    return ret;
};

module.exports.__wbg_set_37837023f3d740e8 = function(arg0, arg1, arg2) {
    arg0[arg1 >>> 0] = arg2;
};

module.exports.__wbg_set_3f1d0b984ed272ed = function(arg0, arg1, arg2) {
    arg0[arg1] = arg2;
};

module.exports.__wbg_set_65595bdd868b3009 = function(arg0, arg1, arg2) {
    arg0.set(arg1, arg2 >>> 0);
};

module.exports.__wbg_set_8fc6bf8a5b1071d1 = function(arg0, arg1, arg2) {
    const ret = arg0.set(arg1, arg2);
    return ret;
};

module.exports.__wbg_setname_6df54b7ebf9404a9 = function(arg0, arg1, arg2) {
    arg0.name = getStringFromWasm0(arg1, arg2);
};

module.exports.__wbg_sign_41f815bdf438babb = function(arg0, arg1, arg2, arg3, arg4, arg5) {
    let deferred0_0;
    let deferred0_1;
    try {
        deferred0_0 = arg1;
        deferred0_1 = arg2;
        var v1 = getArrayU8FromWasm0(arg3, arg4).slice();
        wasm.__wbindgen_free(arg3, arg4 * 1, 1);
        const ret = arg0.sign(getStringFromWasm0(arg1, arg2), v1, Jwk.__wrap(arg5));
        return ret;
    } finally {
        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);
    }
};

module.exports.__wbg_sign_788a14938f479446 = function() { return handleError(function (arg0, arg1, arg2) {
    var v0 = getArrayU8FromWasm0(arg1, arg2).slice();
    wasm.__wbindgen_free(arg1, arg2 * 1, 1);
    const ret = arg0.sign(v0);
    return ret;
}, arguments) };

module.exports.__wbg_sign_842ed4efea5b3ad0 = function() { return handleError(function (arg0, arg1, arg2) {
    const ret = arg0.sign(arg1, arg2);
    return ret;
}, arguments) };

module.exports.__wbg_signer_609896f87c0cf22b = function(arg0) {
    const ret = arg0.signer();
    return ret;
};

module.exports.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {
    const ret = arg1.stack;
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_static_accessor_GLOBAL_88a902d13a557d07 = function() {
    const ret = typeof global === 'undefined' ? null : global;
    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
};

module.exports.__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0 = function() {
    const ret = typeof globalThis === 'undefined' ? null : globalThis;
    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
};

module.exports.__wbg_static_accessor_SELF_37c5d418e4bf5819 = function() {
    const ret = typeof self === 'undefined' ? null : self;
    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
};

module.exports.__wbg_static_accessor_WINDOW_5de37043a91a9c40 = function() {
    const ret = typeof window === 'undefined' ? null : window;
    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
};

module.exports.__wbg_subarray_aa9065fa9dc5df96 = function(arg0, arg1, arg2) {
    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
    return ret;
};

module.exports.__wbg_then_44b73946d2fb3e7d = function(arg0, arg1) {
    const ret = arg0.then(arg1);
    return ret;
};

module.exports.__wbg_then_48b406749878a531 = function(arg0, arg1, arg2) {
    const ret = arg0.then(arg1, arg2);
    return ret;
};

module.exports.__wbg_toIotaPublicKey_b72b2786d027798b = function(arg0, arg1) {
    const ret = arg1.toIotaPublicKey();
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_toRawBytes_e1436c6899b47959 = function(arg0, arg1) {
    const ret = arg1.toRawBytes();
    const ptr1 = passArray8ToWasm0(ret, wasm.__wbindgen_malloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_toString_5197398650ef48e4 = function(arg0, arg1) {
    const ret = arg1.toString();
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_toString_c813bbd34d063839 = function(arg0) {
    const ret = arg0.toString();
    return ret;
};

module.exports.__wbg_tostring_8ccb2a35da843eb6 = function(arg0, arg1) {
    const ret = arg1.to_string();
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_transactionbuilder_new = function(arg0) {
    const ret = TransactionBuilder.__wrap(arg0);
    return ret;
};

module.exports.__wbg_transactionoutput_new = function(arg0) {
    const ret = TransactionOutput.__wrap(arg0);
    return ret;
};

module.exports.__wbg_type_f98cbe760205cd08 = function(arg0) {
    const ret = arg0.type;
    return ret;
};

module.exports.__wbg_typemetadata_new = function(arg0) {
    const ret = TypeMetadata.__wrap(arg0);
    return ret;
};

module.exports.__wbg_unknowncredential_new = function(arg0) {
    const ret = UnknownCredential.__wrap(arg0);
    return ret;
};

module.exports.__wbg_updatedidproposal_new = function(arg0) {
    const ret = UpdateDidProposal.__wrap(arg0);
    return ret;
};

module.exports.__wbg_value_cd1ffa7b1ab794f1 = function(arg0) {
    const ret = arg0.value;
    return ret;
};

module.exports.__wbg_verificationmethod_new = function(arg0) {
    const ret = VerificationMethod.__wrap(arg0);
    return ret;
};

module.exports.__wbg_verify_eb6c594034943da4 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    let deferred0_0;
    let deferred0_1;
    try {
        deferred0_0 = arg1;
        deferred0_1 = arg2;
        var v1 = getArrayU8FromWasm0(arg3, arg4).slice();
        wasm.__wbindgen_free(arg3, arg4 * 1, 1);
        var v2 = getArrayU8FromWasm0(arg5, arg6).slice();
        wasm.__wbindgen_free(arg5, arg6 * 1, 1);
        arg0.verify(getStringFromWasm0(arg1, arg2), v1, v2, Jwk.__wrap(arg7));
    } finally {
        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);
    }
}, arguments) };

module.exports.__wbg_version_817c559c436dbe6a = function(arg0, arg1) {
    const ret = arg1.version;
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_versions_c01dfd4722a88165 = function(arg0) {
    const ret = arg0.versions;
    return ret;
};

module.exports.__wbg_waitForTransaction_6b14325d9efe5e64 = function(arg0, arg1) {
    const ret = arg0.waitForTransaction(arg1);
    return ret;
};

module.exports.__wbg_wasmmanagedcoreclientreadonly_new = function(arg0) {
    const ret = WasmManagedCoreClientReadOnly.__wrap(arg0);
    return ret;
};

module.exports.__wbindgen_as_number = function(arg0) {
    const ret = +arg0;
    return ret;
};

module.exports.__wbindgen_bigint_from_i64 = function(arg0) {
    const ret = arg0;
    return ret;
};

module.exports.__wbindgen_bigint_from_u64 = function(arg0) {
    const ret = BigInt.asUintN(64, arg0);
    return ret;
};

module.exports.__wbindgen_bigint_get_as_i64 = function(arg0, arg1) {
    const v = arg1;
    const ret = typeof(v) === 'bigint' ? v : undefined;
    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);
};

module.exports.__wbindgen_boolean_get = function(arg0) {
    const v = arg0;
    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;
    return ret;
};

module.exports.__wbindgen_cb_drop = function(arg0) {
    const obj = arg0.original;
    if (obj.cnt-- == 1) {
        obj.a = 0;
        return true;
    }
    const ret = false;
    return ret;
};

module.exports.__wbindgen_closure_wrapper17700 = function(arg0, arg1, arg2) {
    const ret = makeMutClosure(arg0, arg1, 3479, __wbg_adapter_58);
    return ret;
};

module.exports.__wbindgen_debug_string = function(arg0, arg1) {
    const ret = debugString(arg1);
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbindgen_error_new = function(arg0, arg1) {
    const ret = new Error(getStringFromWasm0(arg0, arg1));
    return ret;
};

module.exports.__wbindgen_in = function(arg0, arg1) {
    const ret = arg0 in arg1;
    return ret;
};

module.exports.__wbindgen_init_externref_table = function() {
    const table = wasm.__wbindgen_export_4;
    const offset = table.grow(4);
    table.set(0, undefined);
    table.set(offset + 0, undefined);
    table.set(offset + 1, null);
    table.set(offset + 2, true);
    table.set(offset + 3, false);
    ;
};

module.exports.__wbindgen_is_bigint = function(arg0) {
    const ret = typeof(arg0) === 'bigint';
    return ret;
};

module.exports.__wbindgen_is_function = function(arg0) {
    const ret = typeof(arg0) === 'function';
    return ret;
};

module.exports.__wbindgen_is_object = function(arg0) {
    const val = arg0;
    const ret = typeof(val) === 'object' && val !== null;
    return ret;
};

module.exports.__wbindgen_is_string = function(arg0) {
    const ret = typeof(arg0) === 'string';
    return ret;
};

module.exports.__wbindgen_is_undefined = function(arg0) {
    const ret = arg0 === undefined;
    return ret;
};

module.exports.__wbindgen_json_parse = function(arg0, arg1) {
    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));
    return ret;
};

module.exports.__wbindgen_json_serialize = function(arg0, arg1) {
    const obj = arg1;
    const ret = JSON.stringify(obj === undefined ? null : obj);
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbindgen_jsval_eq = function(arg0, arg1) {
    const ret = arg0 === arg1;
    return ret;
};

module.exports.__wbindgen_jsval_loose_eq = function(arg0, arg1) {
    const ret = arg0 == arg1;
    return ret;
};

module.exports.__wbindgen_memory = function() {
    const ret = wasm.memory;
    return ret;
};

module.exports.__wbindgen_number_get = function(arg0, arg1) {
    const obj = arg1;
    const ret = typeof(obj) === 'number' ? obj : undefined;
    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);
};

module.exports.__wbindgen_number_new = function(arg0) {
    const ret = arg0;
    return ret;
};

module.exports.__wbindgen_string_get = function(arg0, arg1) {
    const obj = arg1;
    const ret = typeof(obj) === 'string' ? obj : undefined;
    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbindgen_string_new = function(arg0, arg1) {
    const ret = getStringFromWasm0(arg0, arg1);
    return ret;
};

module.exports.__wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};

module.exports.__wbindgen_uint8_array_new = function(arg0, arg1) {
    var v0 = getArrayU8FromWasm0(arg0, arg1).slice();
    wasm.__wbindgen_free(arg0, arg1 * 1, 1);
    const ret = v0;
    return ret;
};

const path = require('path').join(__dirname, 'identity_wasm_bg.wasm');
const bytes = require('fs').readFileSync(path);

const wasmModule = new WebAssembly.Module(bytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, imports);
wasm = wasmInstance.exports;
module.exports.__wasm = wasm;

wasm.__wbindgen_start();


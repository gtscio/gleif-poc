/* tslint:disable */
/* eslint-disable */
export function vctToUrl(resource: string): string | undefined;
/**
 * Initializes the console error panic hook for better error messages
 */
export function start(): void;
/**
 * Verify a JWS signature secured with the `EdDSA` algorithm and curve `Ed25519`.
 *
 * This function is useful when one is composing a `IJwsVerifier` that delegates
 * `EdDSA` verification with curve `Ed25519` to this function.
 *
 * # Warning
 *
 * This function does not check whether `alg = EdDSA` in the protected header. Callers are expected to assert this
 * prior to calling the function.
 */
export function verifyEd25519(alg: JwsAlgorithm, signingInput: Uint8Array, decodedSignature: Uint8Array, publicKey: Jwk): void;
/**
 * Encode the given bytes in url-safe base64.
 */
export function encodeB64(data: Uint8Array): string;
/**
 * Decode the given url-safe base64-encoded slice into its raw bytes.
 */
export function decodeB64(data: Uint8Array): Uint8Array;
export enum CredentialStatus {
  Revoked = 0,
  Suspended = 1,
  Valid = 2,
}
/**
 * Declares when validation should return if an error occurs.
 */
export enum FailFast {
  /**
   * Return all errors that occur during validation.
   */
  AllErrors = 0,
  /**
   * Return after the first error occurs.
   */
  FirstError = 1,
}
export enum MethodRelationship {
  Authentication = 0,
  AssertionMethod = 1,
  KeyAgreement = 2,
  CapabilityDelegation = 3,
  CapabilityInvocation = 4,
}
export enum PayloadType {
  Disclosed = 0,
  Undisclosed = 1,
  ProofMethods = 2,
}
export enum PresentationProofAlgorithm {
  BLS12381_SHA256_PROOF = 0,
  BLS12381_SHAKE256_PROOF = 1,
  SU_ES256 = 2,
  MAC_H256 = 3,
  MAC_H384 = 4,
  MAC_H512 = 5,
  MAC_K25519 = 6,
  MAC_K448 = 7,
  MAC_H256K = 8,
}
export enum ProofAlgorithm {
  BLS12381_SHA256 = 0,
  BLS12381_SHAKE256 = 1,
  SU_ES256 = 2,
  MAC_H256 = 3,
  MAC_H384 = 4,
  MAC_H512 = 5,
  MAC_K25519 = 6,
  MAC_K448 = 7,
  MAC_H256K = 8,
}
export enum SerializationType {
  COMPACT = 0,
  JSON = 1,
}
/**
 * Indicates the encoding of a DID document in state metadata.
 */
export enum StateMetadataEncoding {
  /**
   * State Metadata encoded as JSON.
   */
  Json = 0,
}
/**
 * Controls validation behaviour when checking whether or not a credential has been revoked by its
 * [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status).
 */
export enum StatusCheck {
  /**
   * Validate the status if supported, reject any unsupported
   * [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.
   *
   * Only `RevocationBitmap2022` is currently supported.
   *
   * This is the default.
   */
  Strict = 0,
  /**
   * Validate the status if supported, skip any unsupported
   * [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.
   */
  SkipUnsupported = 1,
  /**
   * Skip all status checks.
   */
  SkipAll = 2,
}
/**
 * Purpose of a {@link StatusList2021}.
 */
export enum StatusPurpose {
  /**
   * Used for revocation.
   */
  Revocation = 0,
  /**
   * Used for suspension.
   */
  Suspension = 1,
}
/**
 * Declares how credential subjects must relate to the presentation holder.
 *
 * See also the [Subject-Holder Relationship](https://www.w3.org/TR/vc-data-model/#subject-holder-relationships) section of the specification.
 */
export enum SubjectHolderRelationship {
  /**
   * The holder must always match the subject on all credentials, regardless of their [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property.
   * This variant is the default.
   */
  AlwaysSubject = 0,
  /**
   * The holder must match the subject only for credentials where the [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property is `true`.
   */
  SubjectOnNonTransferable = 1,
  /**
   * The holder is not required to have any kind of relationship to any credential subject.
   */
  Any = 2,
}

/** Holds options to create a new `KeyBindingJWTValidationOptions`. */
interface IKeyBindingJWTValidationOptions {
    /**
     * Validates the nonce value of the KB-JWT claims.
     */
    readonly nonce?: string;

    /**
     * Validates the `aud` properties in the KB-JWT claims.
     */
    readonly aud?: string;

    /**
     * Options which affect the verification of the signature on the KB-JWT.
     */
    readonly jwsOptions: JwsVerificationOptions;

    /**
     * Declares that the KB-JWT is considered invalid if the `iat` value in the claims
     * is earlier than this timestamp.
     */
    readonly earliestIssuanceDate?: Timestamp;

    /**
     * Declares that the KB-JWT is considered invalid if the `iat` value in the claims is
     * later than this timestamp.
     *
     * Uses the current timestamp during validation if not set.
     */
    readonly latestIssuanceDate?: Timestamp;

}


/** Holds options to create {@link JwsVerificationOptions}. */
interface IJwsVerificationOptions {
    /** Verify that the `nonce` set in the protected header matches this.
     * 
     * [More Info](https://tools.ietf.org/html/rfc8555#section-6.5.2)
     */
    readonly nonce?: string;

    /** Verify the signing verification method relationship matches this.*/
    readonly methodScope?: MethodScope;

    /** The DID URL of the method, whose JWK should be used to verify the JWS.
     * If unset, the `kid` of the JWS is used as the DID Url.
     */
    readonly methodId?: DIDUrl;
}


type IJwkParams = IJwkEc | IJwkRsa | IJwkOkp | IJwkOct
/** A JSON Web Key with EC params. */
export interface IJwkEc extends IJwk, JwkParamsEc {
  kty: JwkType.Ec
}
/** A JSON Web Key with RSA params. */
export interface IJwkRsa extends IJwk, JwkParamsRsa {
  kty: JwkType.Rsa
}
/** A JSON Web Key with OKP params. */
export interface IJwkOkp extends IJwk, JwkParamsOkp {
  kty: JwkType.Okp
}
/** A JSON Web Key with OCT params. */
export interface IJwkOct extends IJwk, JwkParamsOct {
  kty: JwkType.Oct
}



/** A JSON Web Key. */
export interface IJwk {
  /** Key Type.

  Identifies the cryptographic algorithm family used with the key.
  
  [More Info](https://tools.ietf.org/html/rfc7517#section-4.1) */
  kty: JwkType
  /** Public Key Use.
  
  Identifies the intended use of the public key.
  
  [More Info](https://tools.ietf.org/html/rfc7517#section-4.2) */
  use?: JwkUse
  /** Key Operations.
 
  Identifies the operation(s) for which the key is intended to be used.
 
  [More Info](https://tools.ietf.org/html/rfc7517#section-4.3) */
  key_ops?: JwkOperation[]
  /** Algorithm.
 
  Identifies the algorithm intended for use with the key.
 
  [More Info](https://tools.ietf.org/html/rfc7517#section-4.4) */
  alg?: JwsAlgorithm
  /** Key ID.
 
  Used to match a specific key among a set of keys within a JWK Set.
 
  [More Info](https://tools.ietf.org/html/rfc7517#section-4.5) */
  kid?: string
  /** X.509 URL.
 
  A URI that refers to a resource for an X.509 public key certificate or
  certificate chain.
  
  [More Info](https://tools.ietf.org/html/rfc7517#section-4.6) */
  x5u?: string
  /** X.509 Certificate Chain.
 
  Contains a chain of one or more PKIX certificates.
 
  [More Info](https://tools.ietf.org/html/rfc7517#section-4.7) */
  x5c?: string[]
  /** X.509 Certificate SHA-1 Thumbprint.

  A base64url-encoded SHA-1 thumbprint of the DER encoding of an X.509
  certificate.

  [More Info](https://tools.ietf.org/html/rfc7517#section-4.8) */
  x5t?: string
  /** X.509 Certificate SHA-256 Thumbprint.
 
  A base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509
  certificate.
 
  [More Info](https://tools.ietf.org/html/rfc7517#section-4.9) */
  'x5t#S256'?: string
}



/** Parameters for Elliptic Curve Keys.
 * 
 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2) */
interface JwkParamsEc {
  /** Identifies the cryptographic curve used with the key.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2.1.1) */
  crv: string
  /** The `x` coordinate for the Elliptic Curve point as a base64url-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2.1.2) */
  x: string
  /** The `y` coordinate for the Elliptic Curve point as a base64url-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2.1.3) */
  y: string
  /** The Elliptic Curve private key as a base64url-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2.2.1) */
  d?: string
}


/** Parameters for Octet Key Pairs.
 * 
 * [More Info](https://tools.ietf.org/html/rfc8037#section-2) */
interface JwkParamsOkp {
  /** The subtype of the key pair.
   * 
   * [More Info](https://tools.ietf.org/html/rfc8037#section-2) */
  crv: string
  /** The public key as a base64url-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc8037#section-2) */
  x: string
  /** The private key as a base64url-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc8037#section-2) */
  d?: string
}


/** Parameters for RSA Keys.
 * 
 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3) */
interface JwkParamsRsa {
  /** The modulus value for the RSA public key as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.1.1) */
  n: string,
  /** The exponent value for the RSA public key as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.1.2) */
  e: string,
  /** The private exponent value for the RSA private key as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.1) */
  d?: string,
  /** The first prime factor as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.2) */
  p?: string,
  /** The second prime factor as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.3) */
  q?: string,
  /** The Chinese Remainder Theorem (CRT) exponent of the first factor as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.4)  */
  dp?: string,
  /** The CRT exponent of the second factor as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.5) */
  dq?: string,
  /** The CRT coefficient of the second factor as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.6) */
  qi?: string,
  /** An array of information about any third and subsequent primes, should they exist.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7) */
  oth?: JwkParamsRsaPrime[],
}

/** Parameters for RSA Primes
 * 
 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7) */
interface JwkParamsRsaPrime {
  /** The value of a subsequent prime factor as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7.1)  */
  r: string,
  /** The CRT exponent of the corresponding prime factor as a base64urlUInt-encoded value. 
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7.2) */
  d: string,
  /** The CRT coefficient of the corresponding prime factor as a base64urlUInt-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7.3) */
  t: string,
}


/** Parameters for Symmetric Keys.
 * 
 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.4) */
interface JwkParamsOct {
  /** The symmetric key as a base64url-encoded value.
   * 
   * [More Info](https://tools.ietf.org/html/rfc7518#section-6.4.1) */
  k: string
}


/** Secure storage for cryptographic keys represented as JWKs. */
interface JwkStorage {
  /** Generate a new key represented as a JSON Web Key.
   * 
   * It's recommend that the implementer exposes constants for the supported key type string. */
  generate: (keyType: string, algorithm: JwsAlgorithm) => Promise<JwkGenOutput>;
  /** Insert an existing JSON Web Key into the storage.
   * 
   * All private key components of the `jwk` must be set. */
  insert: (jwk: Jwk) => Promise<string>;
  /** Sign the provided `data` using the private key identified by `keyId` according to the requirements of the given `public_key` corresponding to `keyId`. */
  sign: (keyId: string, data: Uint8Array, publicKey: Jwk) => Promise<Uint8Array>;
  /** Deletes the key identified by `keyId`.
   * 
   * # Warning
   * 
   * This operation cannot be undone. The keys are purged permanently. */
  delete: (keyId: string) => Promise<void>;
  /** Returns `true` if the key with the given `keyId` exists in storage, `false` otherwise. */
  exists: (keyId: string) => Promise<boolean>;
}


/**  Options to be set in the JWT claims of a verifiable presentation. */
interface IJwtPresentationOptions {
    /**
     * Set the presentation's expiration date.
     * Default: `undefined`.
     **/
    readonly expirationDate?: Timestamp;
 
    /**
     * Set the presentation's issuance date.
     * Default: current datetime.
     */
    readonly issuanceDate?: Timestamp;

    /**
     * Sets the audience for presentation (`aud` property in JWT claims).
     * 
     * ## Note:
     * Value must be a valid URL.
     *
     * Default: `undefined`.
     */
    readonly audience?: string;

    /**
     * Custom claims that can be used to set additional claims on the resulting JWT.
     */
    readonly customClaims?: Record<string, any>;
}


/** Holds options to create {@link JwsSignatureOptions}. */
interface IJwsSignatureOptions {
    /** Whether to attach the public key in the corresponding method
     * to the JWS header.
     * 
     * Default: false
     */
    readonly attachJwk?: boolean;

    /** Whether to Base64url encode the payload or not.
     *
     * [More Info](https://tools.ietf.org/html/rfc7797#section-3)
     */
    readonly b64?: boolean;

    /** The Type value to be placed in the protected header.
     * 
     * [More Info](https://tools.ietf.org/html/rfc7515#section-4.1.9)
     */
    readonly typ?: string;

    /** Content Type to be placed in the protected header.
     * 
     * [More Info](https://tools.ietf.org/html/rfc7515#section-4.1.10)
     */
    readonly cty?: string;

    /** The URL to be placed in the protected header.
     * 
     * [More Info](https://tools.ietf.org/html/rfc8555#section-6.4.1)
     */
    readonly url?: string;

    /** The nonce to be placed in the protected header.
     * 
     * [More Info](https://tools.ietf.org/html/rfc8555#section-6.5.2)
     */
    readonly nonce?: string;

    /** The kid to set in the protected header.
     * If unset, the kid of the JWK with which the JWS is produced is used.
     * 
     * [More Info](https://www.rfc-editor.org/rfc/rfc7515#section-4.1.4)
     */
    readonly kid?: string;

    /**   /// Whether the payload should be detached from the JWS.
     * 
     * [More Info](https://www.rfc-editor.org/rfc/rfc7515#appendix-F).
     */
    readonly detachedPayload?: boolean

    /**
     * Additional header parameters.
     */
    readonly customHeaderParameters?: Record<string, any>;
}


/** JPT claims */

interface JptClaims {
  /** Who issued the JWP*/
  readonly iss?: string;
  /** Subject of the JPT. */
  readonly sub?: string;
  /** Expiration time. */
  readonly exp?: number;
  /** Issuance date. */
  readonly iat?: number;
  /** Time before which the JPT MUST NOT be accepted */
  readonly nbf?: number;
  /** Unique ID for the JPT. */
  readonly jti?: string;
  /** Custom claims. */
  readonly [properties: string]: any;
}


type RequiredKeyBinding = { jwk: Jwk }
  | { jwe: string }
  | { kid: string }
  | { jwu: { jwu: string, kid: string }}
  | unknown;



interface KeyBindingJwtClaimsV2 {
  iat: number;
  aud: string;
  nonce: string;
  sd_hash: string;
  [properties: string]: unknown;
}



interface SdJwtClaims {
  _sd: string[];
  _sd_alg?: string;
  cnf?: RequiredKeyBinding;
  [properties: string]: unknown;
}



interface SdJwtVcStatusListRef {
  uri: string;
  idx: number;
}

type SdJwtVcStatus = { status_list: SdJwtVcStatusListRef } | unknown;



import { JwsAlgorithm, JwkOperation, JwkUse, JwkType } from './jose/index';
import {
  Proposal,
  ProposalOutput,
  Transaction,
  TransactionOutput,
  TransactionBuilder,
  SponsorFn,
  ApproveProposal,
  CreateProposal,
  ExecuteProposal,
  UpdateDid,
  ProposalResult,
  DelegatePermissions,
  CoreClient,
  CoreClientReadOnly
} from './index';



/** Information used to increase confidence in the claims of a {@link Credential}.

[More Info](https://www.w3.org/TR/vc-data-model/#evidence) */
interface Evidence {
  /** A URL that allows retrieval of information about the evidence. */
  readonly id?: string;
  /** The type(s) of the credential evidence. */
  readonly type: string | Array<string>;
  /** Additional properties of the credential evidence. */
  readonly [properties: string]: unknown;
}


/** An identifier representing the issuer of a {@link Credential}.

[More Info](https://www.w3.org/TR/vc-data-model/#issuer) */
interface Issuer {
  /** A URL identifying the credential issuer. */
  readonly id: string;
  /** Additional properties of the credential issuer. */
  readonly [properties: string]: unknown;
}


/** Information used to express obligations, prohibitions, and permissions about a {@link Credential} or {@link Presentation}.

[More Info](https://www.w3.org/TR/vc-data-model/#terms-of-use) */
interface Policy {
  /** A URL identifying the credential terms-of-use. */
  readonly id?: string;
  /** The type(s) of the credential terms-of-use. */
  readonly type: string | Array<string>;
  /** Additional properties of the credential terms-of-use. */
  readonly [properties: string]: unknown;
}


/** Information used to refresh or assert the status of a {@link Credential}.

[More Info](https://www.w3.org/TR/vc-data-model/#refreshing) */
interface RefreshService {
  /** The URL of the credential refresh service. */
  readonly id: string;
  /** The type(s) of the credential refresh service. */
  readonly type: string | Array<string>;
  /** Additional properties of the credential refresh service. */
  readonly [properties: string]: unknown;
}


/** Information used to validate the structure of a {@link Credential}.

[More Info](https://www.w3.org/TR/vc-data-model/#data-schemas) */
interface Schema {
  /** A URL identifying the credential schema file. */
  readonly id: string;
  /** The type(s) of the credential schema. */
  readonly type: string | Array<string>;
  /** Additional properties of the credential schema. */
  readonly [properties: string]: unknown;
}


/** Information used to determine the current status of a {@link Credential}.

[More Info](https://www.w3.org/TR/vc-data-model/#status) */
interface Status {
  /** A URL identifying the credential status. */
  readonly id: string;
  /** The type of the credential status. */
  readonly type: string;
  /** Additional properties of the credential status. */
  readonly [properties: string]: unknown;
}


/** An entity who is the target of a set of claims in a {@link Credential}.

[More Info](https://www.w3.org/TR/vc-data-model/#credential-subject) */
interface Subject {
  /** A URI identifying the credential subject. */
  readonly id?: string | CoreDID | IotaDID;
  /** Additional properties of the credential subject. */
  readonly [properties: string]: unknown;
}

export type ResolutionHandlers = Map<string, (did: string) => Promise<CoreDocument | IToCoreDocument>>;


/**
 * Configurations for the {@link Resolver}.
 */
export type ResolverConfig = {
    /**
     * Client for resolving DIDs of the iota method, usually an {@link IdentityClient} or an {@link IdentityClientReadOnly}
     */
    client?: WasmDidResolutionHandler,

    /**
     * Handlers for resolving DIDs from arbitrary DID methods. 
     * 
     * The keys to the map are expected to match the method name and the values are asynchronous functions returning DID documents. 
     * 
     * Note that if a `client` is given the key "iota" may NOT be present in this map. 
     */
    handlers?: Map<string, (did: string) => Promise<CoreDocument | IToCoreDocument>>
};



type ClaimPathSegment = string | number | null;
type ClaimPath = ClaimPathSegment[];



type ClaimDisclosability = "always" | "allowed" | "never";


/** Fields for constructing a new {@link Presentation}. */
interface IPresentation {
  /** The JSON-LD context(s) applicable to the presentation. */
  readonly context?: string | Record<string, any> | Array<string | Record<string, any>>;
  /** A unique URI that may be used to identify the presentation. */
  readonly id?: string;
  /** One or more URIs defining the type of the presentation. Contains the base context by default. */
  readonly type?: string | Array<string>;
  /** JWT Credential(s) expressing the claims of the presentation. */
  readonly verifiableCredential: Jwt | Credential | Record<string, any> | Array<Jwt | Credential | Record<string, any>>;
  /** The entity that generated the presentation. */
  readonly holder: string | CoreDID | IotaDID;
  /** Service(s) used to refresh an expired {@link Credential} in the presentation. */
  readonly refreshService?: RefreshService | Array<RefreshService>;
  /** Terms-of-use specified by the presentation holder. */
  readonly termsOfUse?: Policy | Array<Policy>;
  /** Miscellaneous properties. */
  readonly [properties: string]: unknown;
}


type Jwks = { jwks_uri: string } | { jwks: { keys: IJwk[] }};



interface JwsSigner {
  sign: (header: object, payload: object) => Promise<Uint8Array>;
}



/** Holds options to create a new {@link JptCredentialValidationOptions}. */
interface IJptCredentialValidationOptions {
    /**
     * Declare that the credential is **not** considered valid if it expires before this {@link Timestamp}.
     * Uses the current datetime during validation if not set. 
     */
    readonly earliestExpiryDate?: Timestamp;

    /**
     * Declare that the credential is **not** considered valid if it was issued later than this {@link Timestamp}.
     * Uses the current datetime during validation if not set. 
     */
    readonly latestIssuanceDate?: Timestamp;

    /**
     * Validation behaviour for [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status).
     */
    readonly status?: StatusCheck;

    /** Declares how credential subjects must relate to the presentation holder during validation.
     *
     * <https://www.w3.org/TR/vc-data-model/#subject-holder-relationships>
     */
    readonly subjectHolderRelationship?: [string, SubjectHolderRelationship];

    /**
     * Options which affect the verification of the proof on the credential.
     */
    readonly verificationOptions?: JwpVerificationOptions;
}


/** Holds options to create a new {@link JwpVerificationOptions}. */
interface IJwpVerificationOptions {
    /**
     * Verify the signing verification method relation matches this.
     */
    readonly methodScope?: MethodScope;

    /**
     * The DID URL of the method, whose JWK should be used to verify the JWP.
     * If unset, the `kid` of the JWP is used as the DID URL.
     */
    readonly methodId?: DIDUrl;
}


/** Holds options to create a new {@link JptPresentationValidationOptions}. */
interface IJptPresentationValidationOptions {
    /**
     * The nonce to be placed in the Presentation Protected Header.
     */
    readonly nonce?: string;

    /**
     * Options which affect the verification of the proof on the credential.
     */
    readonly verificationOptions?: JwpVerificationOptions;
}


/** Holds options to create a new {@link JwtCredentialValidationOptions}. */
interface IJwtCredentialValidationOptions {
    /** Declare that the credential is **not** considered valid if it expires before this {@link Timestamp}.
     * Uses the current datetime during validation if not set. */
    readonly earliestExpiryDate?: Timestamp;

    /** Declare that the credential is **not** considered valid if it was issued later than this {@link Timestamp}.
     * Uses the current datetime during validation if not set. */
    readonly latestIssuanceDate?: Timestamp;

    /** Validation behaviour for `credentialStatus`.
     *
     * Default: `StatusCheck.Strict`. */
    readonly status?: StatusCheck;

    /** Declares how credential subjects must relate to the presentation holder during validation.
    *
    * <https://www.w3.org/TR/vc-data-model/#subject-holder-relationships> */
    readonly subjectHolderRelationship?: [string, SubjectHolderRelationship];

    /** Options which affect the verification of the signature on the credential. */
    readonly verifierOptions?: JwsVerificationOptions;
}


/** Holds options to create a new {@link JwtPresentationValidationOptions}. */
interface IJwtPresentationValidationOptions {
    /** 
     * Options which affect the verification of the signature on the presentation. 
     */
    readonly presentationVerifierOptions?: JwsVerificationOptions;

    /**
     * Declare that the presentation is **not** considered valid if it expires before this {@link Timestamp}.
     * Uses the current datetime during validation if not set. 
     */
    readonly earliestExpiryDate?: Timestamp;

    /**
     * Declare that the presentation is **not** considered valid if it was issued later than this {@link Timestamp}.
     * Uses the current datetime during validation if not set. 
     */
    readonly latestIssuanceDate?: Timestamp;
}

/** Fields for constructing a new {@link LinkedDomainService}. */
interface ILinkedDomainService {
  /** Service id. */
  readonly id: DIDUrl;
  /** A unique URI that may be used to identify the {@link Credential}. */
  readonly domains: string[];
  /** Miscellaneous properties. */
  readonly [properties: string]: unknown;
}

/** Fields for constructing a new {@link LinkedVerifiablePresentationService}. */
interface ILinkedVerifiablePresentationService {
  /** Service id. */
  readonly id: DIDUrl;
  /** A unique URI that may be used to identify the {@link Credential}. */
  readonly linked_vp: string | string[];
  /** Miscellaneous properties. */
  readonly [properties: string]: unknown;
}


/**
 * Base {@link Service} properties.
 */
interface IService {
  /**
   * Identifier of the service.
   *
   * Must be a valid DIDUrl with a fragment.
   */
    readonly id: DIDUrl | string;

    /**
     * Type of service.
     *
     * E.g. "LinkedDomains".
     */
    readonly type: string | string[];

    /**
     * A URL, set of URLs, or map of URL sets.
     *
     * NOTE: throws an error if any entry is not a valid URL string. List entries must be unique.
     */
    readonly serviceEndpoint: string | string[] | Map<string, string[]> | Record<string, string[]>;

    /**
     * Additional custom properties to embed in the service.
     *
     * WARNING: entries may overwrite existing fields and result in invalid documents.
     */
    readonly properties?: Map<string, any> | Record<string, any>;
}


interface WasmDidResolutionHandler {
  resolveDid: (did: IotaDID) => Promise<IotaDocument>;
}



type SchemaByUri = { schema_uri: string, "schema_uri#integrity"?: string };
type SchemaByObject = { schema: unknown, "schema#integrity"?: string };
type NoSchema = {};
type TypeSchema = SchemaByUri | SchemaByObject | NoSchema;

type TypeMetadataHelper = {
  name?: string;
  description?: string;
  extends?: string;
  "extends#integrity"?: string;
  display?: unknown[];
  claims?: ClaimMetadata[];
} & TypeSchema;



interface IToCoreDID {

  /** Returns a {@link CoreDID} representation of this DID. */
  toCoreDid(): CoreDID;
}

interface ICoreDocument {
  readonly id: string | CoreDID | IotaDID;
  readonly controller?: (string | CoreDID | IotaDID)[];
  readonly alsoKnownAs?: string[];
  readonly verificationMethod?: (VerificationMethod)[];
  readonly authentication?: (VerificationMethod | DIDUrl)[];
  readonly assertionMethod?: (VerificationMethod | DIDUrl)[];
  readonly keyAgreement?: (VerificationMethod | DIDUrl)[];
  readonly capabilityDelegation?: (VerificationMethod | DIDUrl)[];
  readonly capabilityInvocation?: (VerificationMethod | DIDUrl)[];
  readonly service?: (Service)[];
  readonly [properties: string]: unknown;
}


interface IToCoreDocument {

  /** Returns a {@link CoreDocument} representation of this Document. */
  toCoreDocument(): CoreDocument;
}

/** Fields for constructing a new {@link Credential}. */
interface ICredential {
  /** The JSON-LD context(s) applicable to the {@link Credential}. */
  readonly context?: string | Record<string, any> | Array<string | Record<string, any>>;
  /** A unique URI that may be used to identify the {@link Credential}. */
  readonly id?: string;
  /** One or more URIs defining the type of the {@link Credential}. Contains the base context by default. */
  readonly type?: string | Array<string>;
  /** One or more objects representing the {@link Credential} subject(s). */
  readonly credentialSubject: Subject | Array<Subject>;
  /** A reference to the issuer of the {@link Credential}. */
  readonly issuer: string | CoreDID | IotaDID | Issuer;
  /** A timestamp of when the {@link Credential} becomes valid. Defaults to the current datetime. */
  readonly issuanceDate?: Timestamp;
  /** A timestamp of when the {@link Credential} should no longer be considered valid. */
  readonly expirationDate?: Timestamp;
  /** Information used to determine the current status of the {@link Credential}. */
  readonly credentialStatus?: Status;
  /** Information used to assist in the enforcement of a specific {@link Credential} structure. */
  readonly credentialSchema?: Schema | Array<Schema>;
  /** Service(s) used to refresh an expired {@link Credential}. */
  readonly refreshService?: RefreshService | Array<RefreshService>;
  /** Terms-of-use specified by the {@link Credential} issuer. */
  readonly termsOfUse?: Policy | Array<Policy>;
  /** Human-readable evidence used to support the claims within the {@link Credential}. */
  readonly evidence?: Evidence | Array<Evidence>;
  /** Indicates that the {@link Credential} must only be contained within a {@link Presentation} with a proof issued from the {@link Credential} subject. */
  readonly nonTransferable?: boolean;
  readonly proof?: Proof;
  /** Miscellaneous properties. */
  readonly [properties: string]: unknown;
}


interface ISdJwtVcClaims {
  iss: string;
  vct: string;
  status: SdJwtVcStatus;
  nbf?: string;
  exp?: string;
  iat?: string;
  sub?: string;
}

type SdJwtVcClaims = ISdJwtVcClaims & SdJwtClaims;


/** Fields to create a new Domain Linkage {@link Credential}. */
interface IDomainLinkageCredential {
  /** A reference to the issuer of the {@link Credential}. */
  readonly issuer: CoreDID | IotaDID;
  /** A timestamp of when the {@link Credential} becomes valid. Defaults to the current datetime. */
  readonly issuanceDate?: Timestamp;
  /** A timestamp of when the {@link Credential} should no longer be considered valid. */
  readonly expirationDate: Timestamp;
  /** The origin, on which the {@link Credential} is issued. */
  readonly origin: string;
}


interface IResolver<I, T> {
  resolve: (input: I) => Promise<T>;
}



interface Hasher {
  digest: (input: Uint8Array) => Uint8Array;
  algName: () => string;
  encodedDigest: (data: string) => string;
}



/**
 * Key value Storage for key ids under {@link MethodDigest}.
 */
interface KeyIdStorage {
  /**
   * Insert a key id into the `KeyIdStorage` under the given {@link MethodDigest}.
   * 
   * If an entry for `key` already exists in the storage an error must be returned
   * immediately without altering the state of the storage.
   */
  insertKeyId: (methodDigest: MethodDigest, keyId: string) => Promise<void>;

  /**
   * Obtain the key id associated with the given {@link MethodDigest}.
   */
  getKeyId: (methodDigest: MethodDigest) => Promise<string>;

  /**
   * Delete the `KeyId` associated with the given {@link MethodDigest} from the {@link KeyIdStorage}.
   * 
   * If `key` is not found in storage, an Error must be returned.
   */
  deleteKeyId: (methodDigest: MethodDigest) => Promise<void>;
}


/** Interface for cryptographically verifying a JWS signature. 
 * 
 * Implementers are expected to provide a procedure for step 8 of [RFC 7515 section 5.2](https://www.rfc-editor.org/rfc/rfc7515#section-5.2) for 
 * the JWS signature algorithms they want to support.
*/
interface IJwsVerifier {
  /** Validate the `decodedSignature` against the `signingInput` in the manner defined by `alg` using the `publicKey`.
   * 
   *  See [RFC 7515: section 5.2 part 8.](https://www.rfc-editor.org/rfc/rfc7515#section-5.2) and
   *  [RFC 7797 section 3](https://www.rfc-editor.org/rfc/rfc7797#section-3).
   * 
   * ### Failures
   * Upon verification failure an error must be thrown.
  */
   verify: (alg: JwsAlgorithm, signingInput: Uint8Array, decodedSignature: Uint8Array, publicKey: Jwk) => void;
}


  import {
    Balance,
    ExecuteTransactionBlockParams,
    GetCoinsParams,
    GetDynamicFieldObjectParams,
    GetObjectParams,
    GetOwnedObjectsParams,
    GetTransactionBlockParams,
    IotaClient,
    IotaObjectData,
    IotaObjectResponse,
    IotaTransactionBlockResponse,
    IotaTransactionBlockResponseOptions,
    ObjectRead,
    PaginatedCoins,
    PaginatedEvents,
    PaginatedObjectsResponse,
    QueryEventsParams,
    TryGetPastObjectParams,
    DevInspectTransactionBlockParams,
    DevInspectResults
  } from "@iota/iota-sdk/client";
  import { bcs } from "@iota/iota-sdk/bcs";
  import {
    executeTransaction,
    WasmIotaTransactionBlockResponseWrapper,
  } from "./iota_client_helpers"



import { PublicKey } from "@iota/iota-sdk/cryptography";

interface TransactionSigner {
  sign: (tx_data_bcs: Uint8Array) => Promise<string>;
  publicKey: () => Promise<PublicKey>;
  iotaPublicKeyBytes: () => Promise<Uint8Array>;
  keyId: () => string;
}


export class ApproveConfigChangeProposal {
  private constructor();
  free(): void;
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<void>;
}
export class ApproveSendProposal {
  private constructor();
  free(): void;
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<void>;
}
export class ApproveUpdateDidDocumentProposal {
  private constructor();
  free(): void;
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<void>;
}
export class ClaimDisplay {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * A language tag as defined in [RFC5646](https://www.rfc-editor.org/rfc/rfc5646.txt).
   */
  lang: string;
  /**
   * A human-readable label for the claim.
   */
  label: string;
  /**
   * A human-readable description for the claim.
   */
  get description(): string | undefined;
  /**
   * A human-readable description for the claim.
   */
  set description(value: string | null | undefined);
}
export class ClaimMetadata {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  path: ClaimPath;
  display: ClaimDisplay[];
  get sd(): ClaimDisclosability | undefined;
  set sd(value: ClaimDisclosability | null | undefined);
  get svg_id(): string | undefined;
  set svg_id(value: string | null | undefined);
}
export class ConfigChange {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  get threshold(): bigint | undefined;
  set threshold(value: bigint | null | undefined);
  get controllersToAdd(): Map<string, number> | undefined;
  set controllersToAdd(value: Map<string, number> | null | undefined);
  get controllersToRemove(): Set<string> | undefined;
  set controllersToRemove(value: Set<string> | null | undefined);
  get controllersToUpdate(): Map<string, number> | undefined;
  set controllersToUpdate(value: Map<string, number> | null | undefined);
}
export class ConfigChangeProposal {
  private constructor();
  free(): void;
  approve(identity: OnChainIdentity, controller_token: ControllerToken): TransactionBuilder<ApproveProposal>;
  intoTx(identity: OnChainIdentity, controller_token: ControllerToken): TransactionBuilder<ExecuteProposal<ConfigChange>>;
  readonly id: string;
  readonly action: ConfigChange;
  readonly expiration_epoch: bigint | undefined;
  readonly votes: bigint;
  readonly voters: Set<string>;
}
export class ControllerAndVotingPower {
  free(): void;
  constructor(address: string, voting_power: bigint, can_delegate: boolean);
  0: string;
  1: bigint;
  2: boolean;
}
/**
 * A token that authenticates its bearer as a controller of a specific shared object.
 */
export class ControllerCap {
  private constructor();
  free(): void;
  /**
   * If this token can be delegated, this function will return
   * a {@link DelegationToken} Transaction that will mint a new {@link DelegationToken}
   * and send it to `recipient`.
   */
  delegate(recipient: string, permissions: DelegatePermissions | undefined | null): TransactionBuilder;
  /**
   * Returns the ID of this {@link ControllerCap}.
   */
  readonly id: string;
  /**
   * Returns the ID of the object this token controls.
   */
  readonly controllerOf: string;
  /**
   * Returns whether this controller is allowed to delegate
   * its access to the controlled object.
   */
  readonly canDelegate: boolean;
}
export class ControllerToken {
  private constructor();
  free(): void;
  static fromControllerCap(cap: ControllerCap): ControllerToken;
  static fromDelegationToken(token: DelegationToken): ControllerToken;
  id(): string;
  controllerOf(): string;
  toControllerCap(): ControllerCap | undefined;
  toDelegationToken(): DelegationToken | undefined;
  static getById(id: string, client: CoreClientReadOnly): Promise<ControllerToken>;
}
/**
 * A method-agnostic Decentralized Identifier (DID).
 */
export class CoreDID {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Parses a {@link CoreDID} from the given `input`.
   *
   * ### Errors
   *
   * Throws an error if the input is not a valid {@link CoreDID}.
   */
  static parse(input: string): CoreDID;
  /**
   * Set the method name of the {@link CoreDID}.
   */
  setMethodName(value: string): void;
  /**
   * Validates whether a string is a valid DID method name.
   */
  static validMethodName(value: string): boolean;
  /**
   * Set the method-specific-id of the `DID`.
   */
  setMethodId(value: string): void;
  /**
   * Validates whether a string is a valid `DID` method-id.
   */
  static validMethodId(value: string): boolean;
  /**
   * Returns the {@link CoreDID} scheme.
   *
   * E.g.
   * - `"did:example:12345678" -> "did"`
   * - `"did:iota:smr:12345678" -> "did"`
   */
  scheme(): string;
  /**
   * Returns the {@link CoreDID} authority: the method name and method-id.
   *
   * E.g.
   * - `"did:example:12345678" -> "example:12345678"`
   * - `"did:iota:smr:12345678" -> "iota:smr:12345678"`
   */
  authority(): string;
  /**
   * Returns the {@link CoreDID} method name.
   *
   * E.g.
   * - `"did:example:12345678" -> "example"`
   * - `"did:iota:smr:12345678" -> "iota"`
   */
  method(): string;
  /**
   * Returns the {@link CoreDID} method-specific ID.
   *
   * E.g.
   * - `"did:example:12345678" -> "12345678"`
   * - `"did:iota:smr:12345678" -> "smr:12345678"`
   */
  methodId(): string;
  /**
   * Construct a new {@link DIDUrl} by joining with a relative DID Url string.
   */
  join(segment: string): DIDUrl;
  /**
   * Clones the {@link CoreDID} into a {@link DIDUrl}.
   */
  toUrl(): DIDUrl;
  /**
   * Converts the {@link CoreDID} into a {@link DIDUrl}, consuming it.
   */
  intoUrl(): DIDUrl;
  /**
   * Returns the {@link CoreDID} as a string.
   */
  toString(): string;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): CoreDID;
  /**
   * Deep clones the object.
   */
  clone(): CoreDID;
}
/**
 * A method-agnostic DID Document.
 *
 * Note: All methods that involve reading from this class may potentially raise an error
 * if the object is being concurrently modified.
 */
export class CoreDocument {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new {@link CoreDocument} with the given properties.
   */
  constructor(values: ICoreDocument);
  /**
   * Returns a copy of the DID Document `id`.
   */
  id(): CoreDID;
  /**
   * Sets the DID of the document.
   *
   * ### Warning
   *
   * Changing the identifier can drastically alter the results of
   * `resolve_method`, `resolve_service` and the related
   * [DID URL dereferencing](https://w3c-ccg.github.io/did-resolution/#dereferencing) algorithm.
   */
  setId(id: CoreDID): void;
  /**
   * Returns a copy of the document controllers.
   */
  controller(): Array<CoreDID>;
  /**
   * Sets the controllers of the DID Document.
   *
   * Note: Duplicates will be ignored.
   * Use `null` to remove all controllers.
   */
  setController(controllers: CoreDID | CoreDID[] | null): void;
  /**
   * Returns a copy of the document's `alsoKnownAs` set.
   */
  alsoKnownAs(): Array<string>;
  /**
   * Sets the `alsoKnownAs` property in the DID document.
   */
  setAlsoKnownAs(urls: string | string[] | null): void;
  /**
   * Returns a copy of the document's `verificationMethod` set.
   */
  verificationMethod(): VerificationMethod[];
  /**
   * Returns a copy of the document's `authentication` set.
   */
  authentication(): Array<DIDUrl | VerificationMethod>;
  /**
   * Returns a copy of the document's `assertionMethod` set.
   */
  assertionMethod(): Array<DIDUrl | VerificationMethod>;
  /**
   * Returns a copy of the document's `keyAgreement` set.
   */
  keyAgreement(): Array<DIDUrl | VerificationMethod>;
  /**
   * Returns a copy of the document's `capabilityDelegation` set.
   */
  capabilityDelegation(): Array<DIDUrl | VerificationMethod>;
  /**
   * Returns a copy of the document's `capabilityInvocation` set.
   */
  capabilityInvocation(): Array<DIDUrl | VerificationMethod>;
  /**
   * Returns a copy of the custom DID Document properties.
   */
  properties(): Map<string, any>;
  /**
   * Sets a custom property in the DID Document.
   * If the value is set to `null`, the custom property will be removed.
   *
   * ### WARNING
   *
   * This method can overwrite existing properties like `id` and result in an invalid document.
   */
  setPropertyUnchecked(key: string, value: any): void;
  /**
   * Returns a set of all {@link Service} in the document.
   */
  service(): Service[];
  /**
   * Add a new {@link Service} to the document.
   *
   * Errors if there already exists a service or verification method with the same id.
   */
  insertService(service: Service): void;
  /**
   * Remove a {@link Service} identified by the given {@link DIDUrl} from the document.
   *
   * Returns `true` if the service was removed.
   */
  removeService(didUrl: DIDUrl): Service | undefined;
  /**
   * Returns the first {@link Service} with an `id` property matching the provided `query`,
   * if present.
   */
  resolveService(query: DIDUrl | string): Service | undefined;
  /**
   * Returns a list of all {@link VerificationMethod} in the DID Document,
   * whose verification relationship matches `scope`.
   *
   * If `scope` is not set, a list over the **embedded** methods is returned.
   */
  methods(scope?: MethodScope | null): VerificationMethod[];
  /**
   * Returns an array of all verification relationships.
   */
  verificationRelationships(): Array<DIDUrl | VerificationMethod>;
  /**
   * Adds a new `method` to the document in the given `scope`.
   */
  insertMethod(method: VerificationMethod, scope: MethodScope): void;
  /**
   * Removes all references to the specified Verification Method.
   */
  removeMethod(did: DIDUrl): VerificationMethod | undefined;
  /**
   * Returns a copy of the first verification method with an `id` property
   * matching the provided `query` and the verification relationship
   * specified by `scope`, if present.
   */
  resolveMethod(query: DIDUrl | string, scope?: MethodScope | null): VerificationMethod | undefined;
  /**
   * Attaches the relationship to the given method, if the method exists.
   *
   * Note: The method needs to be in the set of verification methods,
   * so it cannot be an embedded one.
   */
  attachMethodRelationship(didUrl: DIDUrl, relationship: MethodRelationship): boolean;
  /**
   * Detaches the given relationship from the given method, if the method exists.
   */
  detachMethodRelationship(didUrl: DIDUrl, relationship: MethodRelationship): boolean;
  /**
   * Decodes and verifies the provided JWS according to the passed `options` and `signatureVerifier`.
   * If a `signatureVerifier` is provided it will be used when
   * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
   * algorithms will be used.
   *
   * Regardless of which options are passed the following conditions must be met in order for a verification attempt to
   * take place.
   * - The JWS must be encoded according to the JWS compact serialization.
   * - The `kid` value in the protected header must be an identifier of a verification method in this DID document,
   * or set explicitly in the `options`.
   */
  verifyJws(jws: Jws, options: JwsVerificationOptions, signatureVerifier?: IJwsVerifier | null, detachedPayload?: string | null): DecodedJws;
  /**
   * If the document has a {@link RevocationBitmap} service identified by `serviceQuery`,
   * revoke all specified `indices`.
   */
  revokeCredentials(serviceQuery: DIDUrl | string, indices: number | number[]): void;
  /**
   * If the document has a {@link RevocationBitmap} service identified by `serviceQuery`,
   * unrevoke all specified `indices`.
   */
  unrevokeCredentials(serviceQuery: DIDUrl | string, indices: number | number[]): void;
  /**
   * Deep clones the {@link CoreDocument}.
   */
  clone(): CoreDocument;
  /**
   * ### Warning
   * This is for internal use only. Do not rely on or call this method.
   */
  _shallowCloneInternal(): CoreDocument;
  /**
   * ### Warning
   * This is for internal use only. Do not rely on or call this method.
   */
  _strongCountInternal(): number;
  /**
   * Serializes to a plain JS representation.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a plain JS representation.
   */
  static fromJSON(json: any): CoreDocument;
  /**
   * Generate new key material in the given `storage` and insert a new verification method with the corresponding
   * public key material into the DID document.
   *
   * - If no fragment is given the `kid` of the generated JWK is used, if it is set, otherwise an error is returned.
   * - The `keyType` must be compatible with the given `storage`. `Storage`s are expected to export key type constants
   * for that use case.
   *
   * The fragment of the generated method is returned.
   */
  generateMethod(storage: Storage, keyType: string, alg: JwsAlgorithm, fragment: string | null | undefined, scope: MethodScope): Promise<string>;
  /**
   * Remove the method identified by the `fragment` from the document and delete the corresponding key material in
   * the `storage`.
   */
  purgeMethod(storage: Storage, id: DIDUrl): Promise<void>;
  /**
   * Sign the `payload` according to `options` with the storage backed private key corresponding to the public key
   * material in the verification method identified by the given `fragment.
   *
   * Upon success a string representing a JWS encoded according to the Compact JWS Serialization format is returned.
   * See [RFC7515 section 3.1](https://www.rfc-editor.org/rfc/rfc7515#section-3.1).
   */
  createJws(storage: Storage, fragment: string, payload: string, options: JwsSignatureOptions): Promise<Jws>;
  /**
   * Produces a JWT where the payload is produced from the given `credential`
   * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
   *
   * Unless the `kid` is explicitly set in the options, the `kid` in the protected header is the `id`
   * of the method identified by `fragment` and the JWS signature will be produced by the corresponding
   * private key backed by the `storage` in accordance with the passed `options`.
   *
   * The `custom_claims` can be used to set additional claims on the resulting JWT.
   */
  createCredentialJwt(storage: Storage, fragment: string, credential: Credential, options: JwsSignatureOptions, custom_claims?: Record<string, any> | null): Promise<Jwt>;
  /**
   * Produces a JWT where the payload is produced from the given presentation.
   * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
   *
   * Unless the `kid` is explicitly set in the options, the `kid` in the protected header is the `id`
   * of the method identified by `fragment` and the JWS signature will be produced by the corresponding
   * private key backed by the `storage` in accordance with the passed `options`.
   */
  createPresentationJwt(storage: Storage, fragment: string, presentation: Presentation, signature_options: JwsSignatureOptions, presentation_options: JwtPresentationOptions): Promise<Jwt>;
  /**
   * Creates a {@link CoreDocument} from the given {@link DIDJwk}.
   */
  static expandDIDJwk(did: DIDJwk): CoreDocument;
}
export class CreateConfigChangeProposal {
  private constructor();
  free(): void;
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<ProposalResult<ConfigChange>>;
}
export class CreateIdentity {
  free(): void;
  constructor(builder: IdentityBuilder);
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<OnChainIdentity>;
}
export class CreateSendProposal {
  private constructor();
  free(): void;
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<ProposalResult<SendProposal>>;
}
export class CreateUpdateDidProposal {
  private constructor();
  free(): void;
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<ProposalResult<UpdateDid>>;
}
/**
 * Represents a set of claims describing an entity.
 */
export class Credential {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Returns the base JSON-LD context.
   */
  static BaseContext(): string;
  /**
   * Returns the base type.
   */
  static BaseType(): string;
  /**
   * Constructs a new {@link Credential}.
   */
  constructor(values: ICredential);
  static createDomainLinkageCredential(values: IDomainLinkageCredential): Credential;
  /**
   * Returns a copy of the JSON-LD context(s) applicable to the {@link Credential}.
   */
  context(): Array<string | Record<string, any>>;
  /**
   * Returns a copy of the unique `URI` identifying the {@link Credential} .
   */
  id(): string | undefined;
  /**
   * Returns a copy of the URIs defining the type of the {@link Credential}.
   */
  type(): Array<string>;
  /**
   * Returns a copy of the {@link Credential} subject(s).
   */
  credentialSubject(): Array<Subject>;
  /**
   * Returns a copy of the issuer of the {@link Credential}.
   */
  issuer(): string | Issuer;
  /**
   * Returns a copy of the timestamp of when the {@link Credential} becomes valid.
   */
  issuanceDate(): Timestamp;
  /**
   * Returns a copy of the timestamp of when the {@link Credential} should no longer be considered valid.
   */
  expirationDate(): Timestamp | undefined;
  /**
   * Returns a copy of the information used to determine the current status of the {@link Credential}.
   */
  credentialStatus(): Array<Status>;
  /**
   * Returns a copy of the information used to assist in the enforcement of a specific {@link Credential} structure.
   */
  credentialSchema(): Array<Schema>;
  /**
   * Returns a copy of the service(s) used to refresh an expired {@link Credential}.
   */
  refreshService(): Array<RefreshService>;
  /**
   * Returns a copy of the terms-of-use specified by the {@link Credential} issuer.
   */
  termsOfUse(): Array<Policy>;
  /**
   * Returns a copy of the human-readable evidence used to support the claims within the {@link Credential}.
   */
  evidence(): Array<Evidence>;
  /**
   * Returns whether or not the {@link Credential} must only be contained within a  {@link Presentation}
   * with a proof issued from the {@link Credential} subject.
   */
  nonTransferable(): boolean | undefined;
  /**
   * Optional cryptographic proof, unrelated to JWT.
   */
  proof(): Proof | undefined;
  /**
   * Returns a copy of the miscellaneous properties on the {@link Credential}.
   */
  properties(): Map<string, any>;
  /**
   * Sets the `proof` property of the {@link Credential}.
   *
   * Note that this proof is not related to JWT.
   */
  setProof(proof?: Proof | null): void;
  /**
   * Serializes the `Credential` as a JWT claims set
   * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
   *
   * The resulting object can be used as the payload of a JWS when issuing the credential.  
   */
  toJwtClaims(custom_claims?: Record<string, any> | null): Record<string, any>;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Credential;
  /**
   * Deep clones the object.
   */
  clone(): Credential;
}
/**
 * A custom verification method data format.
 */
export class CustomMethodData {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  constructor(name: string, data: any);
  /**
   * Deep clones the object.
   */
  clone(): CustomMethodData;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): CustomMethodData;
}
/**
 * `did:jwk` DID.
 */
export class DIDJwk {
  free(): void;
  /**
   * Creates a new {@link DIDJwk} from a {@link CoreDID}.
   *
   * ### Errors
   * Throws an error if the given did is not a valid `did:jwk` DID.
   */
  constructor(did: CoreDID | IToCoreDID);
  /**
   * Parses a {@link DIDJwk} from the given `input`.
   *
   * ### Errors
   *
   * Throws an error if the input is not a valid {@link DIDJwk}.
   */
  static parse(input: string): DIDJwk;
  /**
   * Returns the JSON WEB KEY (JWK) encoded inside this `did:jwk`.
   */
  jwk(): Jwk;
  /**
   * Returns the {@link CoreDID} scheme.
   *
   * E.g.
   * - `"did:example:12345678" -> "did"`
   * - `"did:iota:smr:12345678" -> "did"`
   */
  scheme(): string;
  /**
   * Returns the {@link CoreDID} authority: the method name and method-id.
   *
   * E.g.
   * - `"did:example:12345678" -> "example:12345678"`
   * - `"did:iota:smr:12345678" -> "iota:smr:12345678"`
   */
  authority(): string;
  /**
   * Returns the {@link CoreDID} method name.
   *
   * E.g.
   * - `"did:example:12345678" -> "example"`
   * - `"did:iota:smr:12345678" -> "iota"`
   */
  method(): string;
  /**
   * Returns the {@link CoreDID} method-specific ID.
   *
   * E.g.
   * - `"did:example:12345678" -> "12345678"`
   * - `"did:iota:smr:12345678" -> "smr:12345678"`
   */
  methodId(): string;
  /**
   * Returns the {@link CoreDID} as a string.
   */
  toString(): string;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): DIDJwk;
  /**
   * Deep clones the object.
   */
  clone(): DIDJwk;
}
/**
 * A method agnostic DID Url.
 */
export class DIDUrl {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Parses a {@link DIDUrl} from the input string.
   */
  static parse(input: string): DIDUrl;
  /**
   * Return a copy of the {@link CoreDID} section of the {@link DIDUrl}.
   */
  did(): CoreDID;
  /**
   * Return a copy of the relative DID Url as a string, including only the path, query, and fragment.
   */
  urlStr(): string;
  /**
   * Returns a copy of the {@link DIDUrl} method fragment, if any. Excludes the leading '#'.
   */
  fragment(): string | undefined;
  /**
   * Sets the `fragment` component of the {@link DIDUrl}.
   */
  setFragment(value?: string | null): void;
  /**
   * Returns a copy of the {@link DIDUrl} path.
   */
  path(): string | undefined;
  /**
   * Sets the `path` component of the {@link DIDUrl}.
   */
  setPath(value?: string | null): void;
  /**
   * Returns a copy of the {@link DIDUrl} method query, if any. Excludes the leading '?'.
   */
  query(): string | undefined;
  /**
   * Sets the `query` component of the {@link DIDUrl}.
   */
  setQuery(value?: string | null): void;
  /**
   * Append a string representing a path, query, and/or fragment, returning a new {@link DIDUrl}.
   *
   * Must begin with a valid delimiter character: '/', '?', '#'. Overwrites the existing URL
   * segment and any following segments in order of path, query, then fragment.
   *
   * I.e.
   * - joining a path will clear the query and fragment.
   * - joining a query will clear the fragment.
   * - joining a fragment will only overwrite the fragment.
   */
  join(segment: string): DIDUrl;
  /**
   * Returns the {@link DIDUrl} as a string.
   */
  toString(): string;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): DIDUrl;
  /**
   * Deep clones the object.
   */
  clone(): DIDUrl;
}
export class DecodedJptCredential {
  private constructor();
  free(): void;
  /**
   * Deep clones the object.
   */
  clone(): DecodedJptCredential;
  /**
   * Returns the {@link Credential} embedded into this JPT.
   */
  credential(): Credential;
  /**
   * Returns the custom claims parsed from the JPT.
   */
  customClaims(): Map<string, any>;
  decodedJwp(): JwpIssued;
}
export class DecodedJptPresentation {
  private constructor();
  free(): void;
  /**
   * Deep clones the object.
   */
  clone(): DecodedJptPresentation;
  /**
   * Returns the {@link Credential} embedded into this JPT.
   */
  credential(): Credential;
  /**
   * Returns the custom claims parsed from the JPT.
   */
  customClaims(): Map<string, any>;
  /**
   * Returns the `aud` property parsed from the JWT claims.
   */
  aud(): string | undefined;
}
/**
 * A cryptographically verified decoded token from a JWS.
 *
 * Contains the decoded headers and the raw claims.
 */
export class DecodedJws {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Returns a copy of the parsed claims represented as a string.
   *
   * # Errors
   * An error is thrown if the claims cannot be represented as a string.
   *
   * This error can only occur if the Token was decoded from a detached payload.  
   */
  claims(): string;
  /**
   * Return a copy of the parsed claims represented as an array of bytes.
   */
  claimsBytes(): Uint8Array;
  /**
   * Returns a copy of the protected header.
   */
  protectedHeader(): JwsHeader;
  /**
   * Deep clones the object.
   */
  clone(): DecodedJws;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
}
/**
 * A cryptographically verified and decoded Credential.
 *
 * Note that having an instance of this type only means the JWS it was constructed from was verified.
 * It does not imply anything about a potentially present proof property on the credential itself.
 */
export class DecodedJwtCredential {
  private constructor();
  free(): void;
  /**
   * Returns a copy of the credential parsed to the [Verifiable Credentials Data model](https://www.w3.org/TR/vc-data-model/).
   */
  credential(): Credential;
  /**
   * Returns a copy of the protected header parsed from the decoded JWS.
   */
  protectedHeader(): JwsHeader;
  /**
   * The custom claims parsed from the JWT.
   */
  customClaims(): Record<string, any> | undefined;
  /**
   * Consumes the object and returns the decoded credential.
   *
   * ### Warning
   *
   * This destroys the {@link DecodedJwtCredential} object.
   */
  intoCredential(): Credential;
}
/**
 * A cryptographically verified and decoded presentation.
 *
 * Note that having an instance of this type only means the JWS it was constructed from was verified.
 * It does not imply anything about a potentially present proof property on the presentation itself.
 */
export class DecodedJwtPresentation {
  private constructor();
  free(): void;
  presentation(): Presentation;
  /**
   * Returns a copy of the protected header parsed from the decoded JWS.
   */
  protectedHeader(): JwsHeader;
  /**
   * Consumes the object and returns the decoded presentation.
   *
   * ### Warning
   * This destroys the {@link DecodedJwtPresentation} object.
   */
  intoPresentation(): Presentation;
  /**
   * The expiration date parsed from the JWT claims.
   */
  expirationDate(): Timestamp | undefined;
  /**
   * The issuance date parsed from the JWT claims.
   */
  issuanceDate(): Timestamp | undefined;
  /**
   * The `aud` property parsed from JWT claims.
   */
  audience(): string | undefined;
  /**
   * The custom claims parsed from the JWT.
   */
  customClaims(): Record<string, any> | undefined;
}
export class DelegateToken {
  free(): void;
  constructor(controller_cap: ControllerCap, recipient: string, permissions: DelegatePermissions | undefined | null);
  buildProgrammableTransaction(client: IdentityClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: IdentityClientReadOnly): Promise<DelegationToken>;
}
/**
 * A token minted by a controller that allows another entity to act in
 * its stead - with full or reduced permissions.
 */
export class DelegationToken {
  private constructor();
  free(): void;
  /**
   * Returns the ID of this {@link DelegationToken}.
   */
  readonly id: string;
  /**
   * Returns the ID of the {@link ControllerCap} that minted
   * this {@link DelegationToken}.
   */
  readonly controller: string;
  /**
   * Returns the ID of the object this token controls.
   */
  readonly controllerOf: string;
  /**
   * Returns the permissions of this token.
   */
  readonly permissions: DelegatePermissions;
}
/**
 * Transaction for revoking / unrevoking a {@link DelegationToken}.
 * If no `revoke` parameter is passed, or `true` is passed, this transaction
 * will *revoke* the passed token - *unrevoke* otherwise.
 */
export class DelegationTokenRevocation {
  free(): void;
  constructor(identity: OnChainIdentity, controller_cap: ControllerCap, delegation_token: DelegationToken, revoke?: boolean | null);
  /**
   * Returns whether this transaction will revoke the given token.
   */
  isRevocation(): boolean;
  /**
   * Returns the ID of the token handled by this transaction.
   */
  tokenId(): string;
  buildProgrammableTransaction(client: IdentityClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: IdentityClientReadOnly): Promise<void>;
}
/**
 * A transaction to delete a given {@link DelegationToken}.
 */
export class DeleteDelegationToken {
  free(): void;
  constructor(identity: OnChainIdentity, delegation_token: DelegationToken);
  tokenId(): string;
  buildProgrammableTransaction(client: IdentityClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: IdentityClientReadOnly): Promise<void>;
}
/**
 * Represents an elements constructing a disclosure.
 * Object properties and array elements disclosures are supported.
 *
 * See: https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-disclosures
 */
export class Disclosure {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  constructor(salt: string, claim_name: string | null | undefined, claim_value: any);
  /**
   * Parses a Base64 encoded disclosure into a `Disclosure`.
   *
   * ## Error
   *
   * Returns an `InvalidDisclosure` if input is not a valid disclosure.
   */
  static parse(disclosure: string): Disclosure;
  /**
   * Returns a copy of the base64url-encoded string.
   */
  disclosure(): string;
  /**
   * Returns a copy of the base64url-encoded string.
   */
  toEncodedString(): string;
  /**
   * Returns a copy of the base64url-encoded string.
   */
  toString(): string;
  /**
   * Returns a copy of the salt value.
   */
  salt(): string;
  /**
   * Returns a copy of the claim name, optional for array elements.
   */
  claimName(): string | undefined;
  /**
   * Returns a copy of the claim Value which can be of any type.
   */
  claimValue(): any;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Disclosure;
}
/**
 * A disclosable value.
 * Both object properties and array elements disclosures are supported.
 *
 * See: https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-disclosures
 */
export class DisclosureV2 {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  static parse(s: string): DisclosureV2;
  toString(): string;
  salt: string;
  get claimName(): string | undefined;
  set claimName(value: string | null | undefined);
  claimValue: any;
}
/**
 * DID Configuration Resource which contains Domain Linkage Credentials.
 * It can be placed in an origin's `.well-known` directory to prove linkage between the origin and a DID.
 * See: <https://identity.foundation/.well-known/resources/did-configuration/#did-configuration-resource>
 *
 * Note:
 * - Only the [JSON Web Token Proof Format](https://identity.foundation/.well-known/resources/did-configuration/#json-web-token-proof-format)
 */
export class DomainLinkageConfiguration {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Constructs a new {@link DomainLinkageConfiguration}.
   */
  constructor(linkedDids: Array<Jwt>);
  /**
   * List of the Domain Linkage Credentials.
   */
  linkedDids(): Array<Jwt>;
  /**
   * List of the issuers of the Domain Linkage Credentials.
   */
  issuers(): Array<CoreDID>;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): DomainLinkageConfiguration;
  /**
   * Deep clones the object.
   */
  clone(): DomainLinkageConfiguration;
}
/**
 * A span of time.
 */
export class Duration {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Create a new {@link Duration} with the given number of seconds.
   */
  static seconds(seconds: number): Duration;
  /**
   * Create a new {@link Duration} with the given number of minutes.
   */
  static minutes(minutes: number): Duration;
  /**
   * Create a new {@link Duration} with the given number of hours.
   */
  static hours(hours: number): Duration;
  /**
   * Create a new {@link Duration} with the given number of days.
   */
  static days(days: number): Duration;
  /**
   * Create a new {@link Duration} with the given number of weeks.
   */
  static weeks(weeks: number): Duration;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Duration;
}
/**
 * An implementor of `IJwsVerifier` that can handle the
 * `EcDSA` algorithm.
 */
export class EcDSAJwsVerifier {
  free(): void;
  /**
   * Constructs an EcDSAJwsVerifier.
   */
  constructor();
  /**
   * Verify a JWS signature secured with the `EcDSA` algorithm.
   * Only the `ES256` and `ES256K` curves are supported for now.
   *
   * # Warning
   *
   * This function does not check the `alg` property in the protected header. Callers are expected to assert this
   * prior to calling the function.
   */
  verify(alg: JwsAlgorithm, signingInput: Uint8Array, decodedSignature: Uint8Array, publicKey: Jwk): void;
}
/**
 * An implementor of `IJwsVerifier` that can handle the
 * `EdDSA` algorithm.
 */
export class EdDSAJwsVerifier {
  free(): void;
  /**
   * Constructs an EdDSAJwsVerifier.
   */
  constructor();
  /**
   * Verify a JWS signature secured with the `EdDSA` algorithm.
   * Only the `Ed25519` curve is supported for now.
   *
   * This function is useful when one is building an `IJwsVerifier` that extends the default provided by
   * the IOTA Identity Framework.
   *
   * # Warning
   *
   * This function does not check whether `alg = EdDSA` in the protected header. Callers are expected to assert this
   * prior to calling the function.
   */
  verify(alg: JwsAlgorithm, signingInput: Uint8Array, decodedSignature: Uint8Array, publicKey: Jwk): void;
}
export class ExecuteConfigChangeProposal {
  private constructor();
  free(): void;
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<void>;
}
export class ExecuteSendProposal {
  private constructor();
  free(): void;
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<void>;
}
export class ExecuteUpdateDidProposal {
  private constructor();
  free(): void;
  static new(proposal: UpdateDidProposal, identity: OnChainIdentity, controller_token: ControllerToken): ExecuteUpdateDidProposal;
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<void>;
}
export class Identity {
  private constructor();
  free(): void;
  /**
   * TODO: check if we can actually do this like this w/o consuming the container on the 1st try
   * TODO: add support for unmigrated aliases
   */
  toFullFledged(): OnChainIdentity | undefined;
}
export class IdentityBuilder {
  free(): void;
  constructor(did_doc: IotaDocument);
  controller(address: string, voting_power: bigint, can_delegate?: boolean | null): IdentityBuilder;
  threshold(threshold: bigint): IdentityBuilder;
  controllers(controllers: ControllerAndVotingPower[]): IdentityBuilder;
  finish(): TransactionBuilder<CreateIdentity>;
}
/**
 * A client to interact with identities on the IOTA chain.
 *
 * Used for read and write operations. If you just want read capabilities,
 * you can also use {@link IdentityClientReadOnly}, which does not need an account and signing capabilities.
 */
export class IdentityClient {
  private constructor();
  free(): void;
  static create(client: IdentityClientReadOnly, signer: TransactionSigner): Promise<IdentityClient>;
  senderPublicKey(): PublicKey;
  senderAddress(): string;
  network(): string;
  createIdentity(iota_document: IotaDocument): IdentityBuilder;
  getIdentity(object_id: string): Promise<Identity>;
  packageId(): string;
  packageHistory(): string[];
  resolveDid(did: IotaDID): Promise<IotaDocument>;
  publishDidDocument(document: IotaDocument, controller: string): TransactionBuilder<PublishDidDocument>;
  publishDidDocumentUpdate(document: IotaDocument, gas_budget: bigint): Promise<IotaDocument>;
  deactivateDidOutput(did: IotaDID, gas_budget: bigint): Promise<void>;
  iotaClient(): IotaClient;
  signer(): TransactionSigner;
  readOnly(): IdentityClientReadOnly;
}
/**
 * A client to interact with identities on the IOTA chain.
 *
 * Used for read operations, so does not need an account and signing capabilities.
 * If you want to write to the chain, use {@link IdentityClient}.
 */
export class IdentityClientReadOnly {
  private constructor();
  free(): void;
  static create(iota_client: IotaClient): Promise<IdentityClientReadOnly>;
  static createWithPkgId(iota_client: IotaClient, iota_identity_pkg_id: string): Promise<IdentityClientReadOnly>;
  packageId(): string;
  packageHistory(): string[];
  iotaClient(): IotaClient;
  network(): string;
  resolveDid(did: IotaDID): Promise<IotaDocument>;
  getIdentity(object_id: string): Promise<Identity>;
}
/**
 * A DID conforming to the IOTA DID method specification.
 *
 * @typicalname did
 */
export class IotaDID {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Constructs a new {@link IotaDID} from a byte representation of the tag and the given
   * network name.
   *
   * See also {@link IotaDID.placeholder}.
   */
  constructor(bytes: Uint8Array, network: string);
  /**
   * Constructs a new {@link IotaDID} from a hex representation of an Alias Id and the given
   * network name.
   */
  static fromAliasId(objectId: string, network: string): IotaDID;
  /**
   * Creates a new placeholder {@link IotaDID} with the given network name.
   *
   * E.g. `did:iota:smr:0x0000000000000000000000000000000000000000000000000000000000000000`.
   */
  static placeholder(network: string): IotaDID;
  /**
   * Parses a {@link IotaDID} from the input string.
   */
  static parse(input: string): IotaDID;
  /**
   * Returns the Tangle network name of the {@link IotaDID}.
   */
  network(): string;
  /**
   * Returns a copy of the unique tag of the {@link IotaDID}.
   */
  tag(): string;
  /**
   * Returns the DID represented as a {@link CoreDID}.
   */
  toCoreDid(): CoreDID;
  /**
   * Returns the `DID` scheme.
   *
   * E.g.
   * - `"did:example:12345678" -> "did"`
   * - `"did:iota:main:12345678" -> "did"`
   */
  scheme(): string;
  /**
   * Returns the `DID` authority: the method name and method-id.
   *
   * E.g.
   * - `"did:example:12345678" -> "example:12345678"`
   * - `"did:iota:main:12345678" -> "iota:main:12345678"`
   */
  authority(): string;
  /**
   * Returns the `DID` method name.
   *
   * E.g.
   * - `"did:example:12345678" -> "example"`
   * - `"did:iota:main:12345678" -> "iota"`
   */
  method(): string;
  /**
   * Returns the `DID` method-specific ID.
   *
   * E.g.
   * - `"did:example:12345678" -> "12345678"`
   * - `"did:iota:main:12345678" -> "main:12345678"`
   */
  methodId(): string;
  /**
   * Construct a new {@link DIDUrl} by joining with a relative DID Url string.
   */
  join(segment: string): DIDUrl;
  /**
   * Clones the `DID` into a {@link DIDUrl}.
   */
  toUrl(): DIDUrl;
  /**
   * Returns the hex-encoded AliasId with a '0x' prefix, from the DID tag.
   */
  toAliasId(): string;
  /**
   * Converts the `DID` into a {@link DIDUrl}, consuming it.
   */
  intoUrl(): DIDUrl;
  /**
   * Returns the `DID` as a string.
   */
  toString(): string;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): IotaDID;
  /**
   * Deep clones the object.
   */
  clone(): IotaDID;
  /**
   * The IOTA DID method name (`"iota"`).
   */
  static readonly METHOD: string;
  /**
   * The default Tangle network (`"iota"`).
   */
  static readonly DEFAULT_NETWORK: string;
}
/**
 * A DID Document adhering to the IOTA DID method specification.
 *
 * Note: All methods that involve reading from this class may potentially raise an error
 * if the object is being concurrently modified.
 */
export class IotaDocument {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Constructs an empty IOTA DID Document with a {@link IotaDID.placeholder} identifier
   * for the given `network`.
   */
  constructor(network: string);
  /**
   * Constructs an empty DID Document with the given identifier.
   */
  static newWithId(id: IotaDID): IotaDocument;
  /**
   * Returns a copy of the DID Document `id`.
   */
  id(): IotaDID;
  /**
   * Returns a copy of the list of document controllers.
   *
   * NOTE: controllers are determined by the `state_controller` unlock condition of the output
   * during resolution and are omitted when publishing.
   */
  controller(): IotaDID[];
  /**
   * Sets the controllers of the document.
   *
   * Note: Duplicates will be ignored.
   * Use `null` to remove all controllers.
   */
  setController(controller: IotaDID[] | null): void;
  /**
   * Returns a copy of the document's `alsoKnownAs` set.
   */
  alsoKnownAs(): Array<string>;
  /**
   * Sets the `alsoKnownAs` property in the DID document.
   */
  setAlsoKnownAs(urls: string | string[] | null): void;
  /**
   * Returns a copy of the custom DID Document properties.
   */
  properties(): Map<string, any>;
  /**
   * Sets a custom property in the DID Document.
   * If the value is set to `null`, the custom property will be removed.
   *
   * ### WARNING
   *
   * This method can overwrite existing properties like `id` and result in an invalid document.
   */
  setPropertyUnchecked(key: string, value: any): void;
  /**
   * Return a set of all {@link Service} in the document.
   */
  service(): Service[];
  /**
   * Add a new {@link Service} to the document.
   *
   * Returns `true` if the service was added.
   */
  insertService(service: Service): void;
  /**
   * Remove a {@link Service} identified by the given {@link DIDUrl} from the document.
   *
   * Returns `true` if a service was removed.
   */
  removeService(did: DIDUrl): Service | undefined;
  /**
   * Returns the first {@link Service} with an `id` property matching the provided `query`,
   * if present.
   */
  resolveService(query: DIDUrl | string): Service | undefined;
  /**
   * Returns a list of all {@link VerificationMethod} in the DID Document,
   * whose verification relationship matches `scope`.
   *
   * If `scope` is not set, a list over the **embedded** methods is returned.
   */
  methods(scope?: MethodScope | null): VerificationMethod[];
  /**
   * Adds a new `method` to the document in the given `scope`.
   */
  insertMethod(method: VerificationMethod, scope: MethodScope): void;
  /**
   * Removes all references to the specified Verification Method.
   */
  removeMethod(did: DIDUrl): VerificationMethod | undefined;
  /**
   * Returns a copy of the first verification method with an `id` property
   * matching the provided `query` and the verification relationship
   * specified by `scope`, if present.
   */
  resolveMethod(query: DIDUrl | string, scope?: MethodScope | null): VerificationMethod | undefined;
  /**
   * Attaches the relationship to the given method, if the method exists.
   *
   * Note: The method needs to be in the set of verification methods,
   * so it cannot be an embedded one.
   */
  attachMethodRelationship(didUrl: DIDUrl, relationship: MethodRelationship): boolean;
  /**
   * Detaches the given relationship from the given method, if the method exists.
   */
  detachMethodRelationship(didUrl: DIDUrl, relationship: MethodRelationship): boolean;
  /**
   * Decodes and verifies the provided JWS according to the passed `options` and `signatureVerifier`.
   * If a `signatureVerifier` is provided it will be used when
   * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
   * algorithms will be used.
   *
   * Regardless of which options are passed the following conditions must be met in order for a verification attempt to
   * take place.
   * - The JWS must be encoded according to the JWS compact serialization.
   * - The `kid` value in the protected header must be an identifier of a verification method in this DID document.
   */
  verifyJws(jws: Jws, options: JwsVerificationOptions, signatureVerifier?: IJwsVerifier | null, detachedPayload?: string | null): DecodedJws;
  /**
   * Serializes the document for inclusion in an identity's metadata
   * with the default {@link StateMetadataEncoding}.
   */
  pack(): Uint8Array;
  /**
   * Serializes the document for inclusion in an identity's metadata.
   */
  packWithEncoding(encoding: StateMetadataEncoding): Uint8Array;
  /**
   * Returns a copy of the metadata associated with this document.
   *
   * NOTE: Copies all the metadata. See also `metadataCreated`, `metadataUpdated`,
   * `metadataPreviousMessageId`, `metadataProof` if only a subset of the metadata required.
   */
  metadata(): IotaDocumentMetadata;
  /**
   * Returns a copy of the timestamp of when the DID document was created.
   */
  metadataCreated(): Timestamp | undefined;
  /**
   * Sets the timestamp of when the DID document was created.
   */
  setMetadataCreated(timestamp: Timestamp | undefined): void;
  /**
   * Returns a copy of the timestamp of the last DID document update.
   */
  metadataUpdated(): Timestamp | undefined;
  /**
   * Sets the timestamp of the last DID document update.
   */
  setMetadataUpdated(timestamp: Timestamp | undefined): void;
  /**
   * Returns a copy of the deactivated status of the DID document.
   */
  metadataDeactivated(): boolean | undefined;
  /**
   * Sets the deactivated status of the DID document.
   */
  setMetadataDeactivated(deactivated?: boolean | null): void;
  /**
   * Sets a custom property in the document metadata.
   * If the value is set to `null`, the custom property will be removed.
   */
  setMetadataPropertyUnchecked(key: string, value: any): void;
  /**
   * If the document has a {@link RevocationBitmap} service identified by `serviceQuery`,
   * revoke all specified `indices`.
   */
  revokeCredentials(serviceQuery: DIDUrl | string, indices: number | number[]): void;
  /**
   * If the document has a {@link RevocationBitmap} service identified by `serviceQuery`,
   * unrevoke all specified `indices`.
   */
  unrevokeCredentials(serviceQuery: DIDUrl | string, indices: number | number[]): void;
  /**
   * Returns a deep clone of the {@link IotaDocument}.
   */
  clone(): IotaDocument;
  /**
   * ### Warning
   * This is for internal use only. Do not rely on or call this method.
   */
  _shallowCloneInternal(): IotaDocument;
  /**
   * ### Warning
   * This is for internal use only. Do not rely on or call this method.
   */
  _strongCountInternal(): number;
  /**
   * Serializes to a plain JS representation.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a plain JS representation.
   */
  static fromJSON(json: any): IotaDocument;
  /**
   * Transforms the {@link IotaDocument} to its {@link CoreDocument} representation.
   */
  toCoreDocument(): CoreDocument;
  /**
   * Generate new key material in the given `storage` and insert a new verification method with the corresponding
   * public key material into the DID document.
   *
   * - If no fragment is given the `kid` of the generated JWK is used, if it is set, otherwise an error is returned.
   * - The `keyType` must be compatible with the given `storage`. `Storage`s are expected to export key type constants
   * for that use case.
   *
   * The fragment of the generated method is returned.
   */
  generateMethod(storage: Storage, keyType: string, alg: JwsAlgorithm, fragment: string | null | undefined, scope: MethodScope): Promise<string>;
  /**
   * Remove the method identified by the given fragment from the document and delete the corresponding key material in
   * the given `storage`.
   */
  purgeMethod(storage: Storage, id: DIDUrl): Promise<void>;
  /**
   * Sign the `payload` according to `options` with the storage backed private key corresponding to the public key
   * material in the verification method identified by the given `fragment.
   *
   * Upon success a string representing a JWS encoded according to the Compact JWS Serialization format is returned.
   * See [RFC7515 section 3.1](https://www.rfc-editor.org/rfc/rfc7515#section-3.1).
   *
   * @deprecated Use `createJws()` instead.
   */
  createJwt(storage: Storage, fragment: string, payload: string, options: JwsSignatureOptions): Promise<Jws>;
  /**
   * Sign the `payload` according to `options` with the storage backed private key corresponding to the public key
   * material in the verification method identified by the given `fragment.
   *
   * Upon success a string representing a JWS encoded according to the Compact JWS Serialization format is returned.
   * See [RFC7515 section 3.1](https://www.rfc-editor.org/rfc/rfc7515#section-3.1).
   */
  createJws(storage: Storage, fragment: string, payload: string, options: JwsSignatureOptions): Promise<Jws>;
  /**
   * Produces a JWS where the payload is produced from the given `credential`
   * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
   *
   * Unless the `kid` is explicitly set in the options, the `kid` in the protected header is the `id`
   * of the method identified by `fragment` and the JWS signature will be produced by the corresponding
   * private key backed by the `storage` in accordance with the passed `options`.
   *
   * The `custom_claims` can be used to set additional claims on the resulting JWT.
   */
  createCredentialJwt(storage: Storage, fragment: string, credential: Credential, options: JwsSignatureOptions, custom_claims?: Record<string, any> | null): Promise<Jwt>;
  /**
   * Produces a JWT where the payload is produced from the given presentation.
   * in accordance with [VC Data Model v1.1](https://www.w3.org/TR/vc-data-model/#json-web-token).
   *
   * Unless the `kid` is explicitly set in the options, the `kid` in the protected header is the `id`
   * of the method identified by `fragment` and the JWS signature will be produced by the corresponding
   * private key backed by the `storage` in accordance with the passed `options`.
   */
  createPresentationJwt(storage: Storage, fragment: string, presentation: Presentation, signature_options: JwsSignatureOptions, presentation_options: JwtPresentationOptions): Promise<Jwt>;
  generateMethodJwp(storage: Storage, alg: ProofAlgorithm, fragment: string | null | undefined, scope: MethodScope): Promise<string>;
  createIssuedJwp(storage: Storage, fragment: string, jpt_claims: JptClaims, options: JwpCredentialOptions): Promise<string>;
  createPresentedJwp(presentation: SelectiveDisclosurePresentation, method_id: string, options: JwpPresentationOptions): Promise<string>;
  createCredentialJpt(credential: Credential, storage: Storage, fragment: string, options: JwpCredentialOptions, custom_claims?: Map<string, any> | null): Promise<Jpt>;
  createPresentationJpt(presentation: SelectiveDisclosurePresentation, method_id: string, options: JwpPresentationOptions): Promise<Jpt>;
}
/**
 * Additional attributes related to an IOTA DID Document.
 */
export class IotaDocumentMetadata {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Returns a copy of the timestamp of when the DID document was created.
   */
  created(): Timestamp | undefined;
  /**
   * Returns a copy of the timestamp of the last DID document update.
   */
  updated(): Timestamp | undefined;
  /**
   * Returns a copy of the deactivated status of the DID document.
   */
  deactivated(): boolean | undefined;
  /**
   * Returns a copy of the custom metadata properties.
   */
  properties(): Map<string, any>;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): IotaDocumentMetadata;
  /**
   * Deep clones the object.
   */
  clone(): IotaDocumentMetadata;
}
export class IotaTransactionBlockResponseEssence {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  effectsExist: boolean;
  effects: string;
  get effectsExecutionStatus(): ExecutionStatus | undefined;
  set effectsExecutionStatus(value: ExecutionStatus | null | undefined);
  get effectsCreated(): OwnedObjectRef[] | undefined;
  set effectsCreated(value: OwnedObjectRef[] | null | undefined);
}
export class IssuerMetadata {
  free(): void;
  constructor(issuer: string, jwks: Jwks);
  issuer(): string;
  jwks(): Jwks;
  /**
   * Checks the validity of this {@link IssuerMetadata}.
   * {@link IssuerMetadata.issuer} must match `sd_jwt_vc`'s `iss` claim.
   */
  validate(sd_jwt_vc: SdJwtVc): void;
  toJSON(): any;
}
export class IssuerProtectedHeader {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  claims(): string[];
  /**
   * JWP type (JPT).
   */
  get typ(): string | undefined;
  /**
   * JWP type (JPT).
   */
  set typ(value: string | null | undefined);
  /**
   * Algorithm used for the JWP.
   */
  alg: ProofAlgorithm;
  /**
   * ID for the key used for the JWP.
   */
  get kid(): string | undefined;
  /**
   * ID for the key used for the JWP.
   */
  set kid(value: string | null | undefined);
  /**
   * Not handled for now. Will be used in the future to resolve external claims
   */
  get cid(): string | undefined;
  /**
   * Not handled for now. Will be used in the future to resolve external claims
   */
  set cid(value: string | null | undefined);
}
/**
 * A JSON Proof Token (JPT).
 */
export class Jpt {
  free(): void;
  /**
   * Creates a new {@link Jpt}.
   */
  constructor(jpt_string: string);
  toString(): string;
  /**
   * Deep clones the object.
   */
  clone(): Jpt;
}
/**
 * Options to declare validation criteria for {@link Jpt}.
 */
export class JptCredentialValidationOptions {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Deep clones the object.
   */
  clone(): JptCredentialValidationOptions;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JptCredentialValidationOptions;
  /**
   * Creates a new default instance.
   */
  constructor(opts?: IJptCredentialValidationOptions | null);
}
export class JptCredentialValidator {
  private constructor();
  free(): void;
  static validate(credential_jpt: Jpt, issuer: CoreDocument | IToCoreDocument, options: JptCredentialValidationOptions, fail_fast: FailFast): DecodedJptCredential;
}
/**
 * Utility functions for validating JPT credentials.
 */
export class JptCredentialValidatorUtils {
  free(): void;
  constructor();
  /**
   * Utility for extracting the issuer field of a {@link Credential} as a DID.
   * # Errors
   * Fails if the issuer field is not a valid DID.
   */
  static extractIssuer(credential: Credential): CoreDID;
  /**
   * Utility for extracting the issuer field of a credential in JPT representation as DID.
   * # Errors
   * If the JPT decoding fails or the issuer field is not a valid DID.
   */
  static extractIssuerFromIssuedJpt(credential: Jpt): CoreDID;
  static checkTimeframesWithValidityTimeframe2024(credential: Credential, validity_timeframe: Timestamp | null | undefined, status_check: StatusCheck): void;
  /**
   * Checks whether the credential status has been revoked.
   *
   * Only supports `RevocationTimeframe2024`.
   */
  static checkRevocationWithValidityTimeframe2024(credential: Credential, issuer: CoreDocument | IToCoreDocument, status_check: StatusCheck): void;
  /**
   * Checks whether the credential status has been revoked or the timeframe interval is INVALID
   *
   * Only supports `RevocationTimeframe2024`.
   */
  static checkTimeframesAndRevocationWithValidityTimeframe2024(credential: Credential, issuer: CoreDocument | IToCoreDocument, validity_timeframe: Timestamp | null | undefined, status_check: StatusCheck): void;
}
/**
 * Options to declare validation criteria for a {@link Jpt} presentation.
 */
export class JptPresentationValidationOptions {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Deep clones the object.
   */
  clone(): JptPresentationValidationOptions;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JptPresentationValidationOptions;
  constructor(opts?: IJptPresentationValidationOptions | null);
}
export class JptPresentationValidator {
  private constructor();
  free(): void;
  /**
   * Decodes and validates a Presented {@link Credential} issued as a JPT (JWP Presented Form). A
   * {@link DecodedJptPresentation} is returned upon success.
   *
   * The following properties are validated according to `options`:
   * - the holder's proof on the JWP,
   * - the expiration date,
   * - the issuance date,
   * - the semantic structure.
   */
  static validate(presentation_jpt: Jpt, issuer: CoreDocument | IToCoreDocument, options: JptPresentationValidationOptions, fail_fast: FailFast): DecodedJptPresentation;
}
/**
 * Utility functions for verifying JPT presentations.
 */
export class JptPresentationValidatorUtils {
  private constructor();
  free(): void;
  /**
   * Utility for extracting the issuer field of a credential in JPT representation as DID.
   * # Errors
   * If the JPT decoding fails or the issuer field is not a valid DID.
   */
  static extractIssuerFromPresentedJpt(presentation: Jpt): CoreDID;
  /**
   * Check timeframe interval in credentialStatus with `RevocationTimeframeStatus`.
   */
  static checkTimeframesWithValidityTimeframe2024(credential: Credential, validity_timeframe: Timestamp | null | undefined, status_check: StatusCheck): void;
}
/**
 * JSON Web Key.
 *
 * [More Info](https://tools.ietf.org/html/rfc7517#section-4)
 */
export class Jwk {
  free(): void;
  constructor(jwk: IJwkParams);
  /**
   * Returns the value for the key type parameter (kty).
   */
  kty(): JwkType;
  /**
   * Returns the value for the use property (use).
   */
  use(): JwkUse | undefined;
  keyOps(): Array<JwkOperation>;
  /**
   * Returns the value for the algorithm property (alg).
   */
  alg(): JwsAlgorithm | undefined;
  /**
   * Returns the value of the key ID property (kid).
   */
  kid(): string | undefined;
  /**
   * Sets a value for the key ID property (kid).
   */
  setKid(kid: string): void;
  /**
   * Returns the value of the X.509 URL property (x5u).
   */
  x5u(): string | undefined;
  /**
   * Returns the value of the X.509 certificate chain property (x5c).
   */
  x5c(): Array<string>;
  /**
   * Returns the value of the X.509 certificate SHA-1 thumbprint property (x5t).
   */
  x5t(): string | undefined;
  /**
   * Returns the value of the X.509 certificate SHA-256 thumbprint property (x5t#S256).
   */
  x5t256(): string | undefined;
  /**
   * If this JWK is of kty EC, returns those parameters.
   */
  paramsEc(): JwkParamsEc | undefined;
  /**
   * If this JWK is of kty OKP, returns those parameters.
   */
  paramsOkp(): JwkParamsOkp | undefined;
  /**
   * If this JWK is of kty OCT, returns those parameters.
   */
  paramsOct(): JwkParamsOct | undefined;
  /**
   * If this JWK is of kty RSA, returns those parameters.
   */
  paramsRsa(): JwkParamsRsa | undefined;
  /**
   * Creates a Thumbprint of the JSON Web Key according to [RFC7638](https://tools.ietf.org/html/rfc7638).
   *
   * `SHA2-256` is used as the hash function *H*.
   *
   * The thumbprint is returned as a base64url-encoded string.
   */
  thumbprintSha256B64(): string;
  /**
   * Returns a clone of the {@link Jwk} with _all_ private key components unset.
   * Nothing is returned when `kty = oct` as this key type is not considered public by this library.
   */
  toPublic(): Jwk | undefined;
  /**
   * Returns `true` if _all_ private key components of the key are unset, `false` otherwise.
   */
  isPublic(): boolean;
  /**
   * Returns `true` if _all_ private key components of the key are set, `false` otherwise.
   */
  isPrivate(): boolean;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Jwk;
  /**
   * Deep clones the object.
   */
  clone(): Jwk;
}
/**
 * The result of a key generation in `JwkStorage`.
 */
export class JwkGenOutput {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  constructor(key_id: string, jwk: Jwk);
  /**
   * Returns the generated public {@link Jwk}.
   */
  jwk(): Jwk;
  /**
   * Returns the key id of the generated {@link Jwk}.
   */
  keyId(): string;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JwkGenOutput;
  /**
   * Deep clones the object.
   */
  clone(): JwkGenOutput;
}
/**
 * Implementation of {@link JwkStorage} for {@link KeytoolStorage}.
 */
export class JwkKeytoolStore {
  free(): void;
  constructor(keytool: KeytoolStorage);
  generate(key_type: string, algorithm: string): Promise<JwkGenOutput>;
  insert(jwk: Jwk): Promise<string>;
  sign(key_id: string, data: Uint8Array, public_key: Jwk): Promise<Uint8Array>;
  delete(key_id: string): Promise<void>;
  exists(key_id: string): Promise<boolean>;
}
export class JwpCredentialOptions {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  constructor();
  static fromJSON(value: any): JwpCredentialOptions;
  toJSON(): any;
  get kid(): string | undefined;
  set kid(value: string | null | undefined);
}
export class JwpIssued {
  private constructor();
  free(): void;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JwpIssued;
  /**
   * Deep clones the object.
   */
  clone(): JwpIssued;
  encode(serialization: SerializationType): string;
  setProof(proof: Uint8Array): void;
  getProof(): Uint8Array;
  getPayloads(): Payloads;
  setPayloads(payloads: Payloads): void;
  getIssuerProtectedHeader(): IssuerProtectedHeader;
}
/**
 * Options to be set in the JWT claims of a verifiable presentation.
 */
export class JwpPresentationOptions {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  constructor();
  /**
   * Sets the audience for presentation (`aud` property in JWP Presentation Header).
   */
  get audience(): string | undefined;
  /**
   * Sets the audience for presentation (`aud` property in JWP Presentation Header).
   */
  set audience(value: string | null | undefined);
  /**
   * The nonce to be placed in the Presentation Protected Header.
   */
  get nonce(): string | undefined;
  /**
   * The nonce to be placed in the Presentation Protected Header.
   */
  set nonce(value: string | null | undefined);
}
/**
 * Holds additional options for verifying a JWP
 */
export class JwpVerificationOptions {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Deep clones the object.
   */
  clone(): JwpVerificationOptions;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JwpVerificationOptions;
  static new(opts?: IJwpVerificationOptions | null): JwpVerificationOptions;
}
/**
 * A wrapper around a JSON Web Signature (JWS).
 */
export class Jws {
  free(): void;
  /**
   * Creates a new {@link Jws} from the given string.
   */
  constructor(jws_string: string);
  /**
   * Returns a clone of the JWS string.
   */
  toString(): string;
}
export class JwsHeader {
  free(): void;
  /**
   * Create a new empty {@link JwsHeader}.
   */
  constructor();
  /**
   * Returns the value for the algorithm claim (alg).
   */
  alg(): JwsAlgorithm | undefined;
  /**
   * Sets a value for the algorithm claim (alg).
   */
  setAlg(value: JwsAlgorithm): void;
  /**
   * Returns the value of the base64url-encode payload claim (b64).
   */
  b64(): boolean | undefined;
  /**
   * Sets a value for the base64url-encode payload claim (b64).
   */
  setB64(value: boolean): void;
  /**
   * Additional header parameters.
   */
  custom(): Record<string, any> | undefined;
  has(claim: string): boolean;
  /**
   * Returns `true` if none of the fields are set in both `self` and `other`.
   */
  isDisjoint(other: JwsHeader): boolean;
  /**
   * Returns the value of the JWK Set URL claim (jku).
   */
  jku(): string | undefined;
  /**
   * Sets a value for the JWK Set URL claim (jku).
   */
  setJku(value: string): void;
  /**
   * Returns the value of the JWK claim (jwk).
   */
  jwk(): Jwk | undefined;
  /**
   * Sets a value for the JWK claim (jwk).
   */
  setJwk(value: Jwk): void;
  /**
   * Returns the value of the key ID claim (kid).
   */
  kid(): string | undefined;
  /**
   * Sets a value for the key ID claim (kid).
   */
  setKid(value: string): void;
  /**
   * Returns the value of the X.509 URL claim (x5u).
   */
  x5u(): string | undefined;
  /**
   * Sets a value for the X.509 URL claim (x5u).
   */
  setX5u(value: string): void;
  /**
   * Returns the value of the X.509 certificate chain claim (x5c).
   */
  x5c(): Array<string>;
  /**
   * Sets values for the X.509 certificate chain claim (x5c).
   */
  setX5c(value: Array<string>): void;
  /**
   * Returns the value of the X.509 certificate SHA-1 thumbprint claim (x5t).
   */
  x5t(): string | undefined;
  /**
   * Sets a value for the X.509 certificate SHA-1 thumbprint claim (x5t).
   */
  setX5t(value: string): void;
  /**
   * Returns the value of the X.509 certificate SHA-256 thumbprint claim
   * (x5t#S256).
   */
  x5tS256(): string | undefined;
  /**
   * Sets a value for the X.509 certificate SHA-256 thumbprint claim
   * (x5t#S256).
   */
  setX5tS256(value: string): void;
  /**
   * Returns the value of the token type claim (typ).
   */
  typ(): string | undefined;
  /**
   * Sets a value for the token type claim (typ).
   */
  setTyp(value: string): void;
  /**
   * Returns the value of the content type claim (cty).
   */
  cty(): string | undefined;
  /**
   * Sets a value for the content type claim (cty).
   */
  setCty(value: string): void;
  /**
   * Returns the value of the critical claim (crit).
   */
  crit(): Array<string>;
  /**
   * Sets values for the critical claim (crit).
   */
  setCrit(value: Array<string>): void;
  /**
   * Returns the value of the url claim (url).
   */
  url(): string | undefined;
  /**
   * Sets a value for the url claim (url).
   */
  setUrl(value: string): void;
  /**
   * Returns the value of the nonce claim (nonce).
   */
  nonce(): string | undefined;
  /**
   * Sets a value for the nonce claim (nonce).
   */
  setNonce(value: string): void;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JwsHeader;
  /**
   * Deep clones the object.
   */
  clone(): JwsHeader;
}
/**
 * Options for creating a JSON Web Signature.
 */
export class JwsSignatureOptions {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  constructor(options?: IJwsSignatureOptions | null);
  /**
   * Replace the value of the `attachJwk` field.
   */
  setAttachJwk(value: boolean): void;
  /**
   * Replace the value of the `b64` field.
   */
  setB64(value: boolean): void;
  /**
   * Replace the value of the `typ` field.
   */
  setTyp(value: string): void;
  /**
   * Replace the value of the `cty` field.
   */
  setCty(value: string): void;
  /**
   * Replace the value of the `url` field.
   */
  serUrl(value: string): void;
  /**
   * Replace the value of the `nonce` field.
   */
  setNonce(value: string): void;
  /**
   * Replace the value of the `kid` field.
   */
  setKid(value: string): void;
  /**
   * Replace the value of the `detached_payload` field.
   */
  setDetachedPayload(value: boolean): void;
  /**
   * Add additional header parameters.
   */
  setCustomHeaderParameters(value: Record<string, any>): void;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JwsSignatureOptions;
  /**
   * Deep clones the object.
   */
  clone(): JwsSignatureOptions;
}
/**
 * Holds additional options for verifying a JWS with {@link CoreDocument.verifyJws}.
 */
export class JwsVerificationOptions {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new {@link JwsVerificationOptions} from the given fields.
   */
  constructor(options?: IJwsVerificationOptions | null);
  /**
   * Set the expected value for the `nonce` parameter of the protected header.
   */
  setNonce(value: string): void;
  /**
   * Set the scope of the verification methods that may be used to verify the given JWS.
   */
  setMethodScope(value: MethodScope): void;
  /**
   * Set the DID URl of the method, whose JWK should be used to verify the JWS.
   */
  setMethodId(value: DIDUrl): void;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JwsVerificationOptions;
  /**
   * Deep clones the object.
   */
  clone(): JwsVerificationOptions;
}
/**
 * A wrapper around a JSON Web Token (JWK).
 */
export class Jwt {
  free(): void;
  /**
   * Creates a new {@link Jwt} from the given string.
   */
  constructor(jwt_string: string);
  /**
   * Returns a clone of the JWT string.
   */
  toString(): string;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Jwt;
  /**
   * Deep clones the object.
   */
  clone(): Jwt;
}
/**
 * Options to declare validation criteria when validating credentials.
 */
export class JwtCredentialValidationOptions {
  free(): void;
  constructor(options?: IJwtCredentialValidationOptions | null);
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JwtCredentialValidationOptions;
  /**
   * Deep clones the object.
   */
  clone(): JwtCredentialValidationOptions;
}
/**
 * A type for decoding and validating {@link Credential}.
 */
export class JwtCredentialValidator {
  free(): void;
  /**
   * Creates a new {@link JwtCredentialValidator}. If a `signatureVerifier` is provided it will be used when
   * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
   * algorithms will be used.
   */
  constructor(signatureVerifier?: IJwsVerifier | null);
  /**
   * Decodes and validates a {@link Credential} issued as a JWS. A {@link DecodedJwtCredential} is returned upon
   * success.
   *
   * The following properties are validated according to `options`:
   * - the issuer's signature on the JWS,
   * - the expiration date,
   * - the issuance date,
   * - the semantic structure.
   *
   * # Warning
   * The lack of an error returned from this method is in of itself not enough to conclude that the credential can be
   * trusted. This section contains more information on additional checks that should be carried out before and after
   * calling this method.
   *
   * ## The state of the issuer's DID Document
   * The caller must ensure that `issuer` represents an up-to-date DID Document.
   *
   * ## Properties that are not validated
   *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:
   * `proof`, `credentialStatus`, `type`, `credentialSchema`, `refreshService` **and more**.
   * These should be manually checked after validation, according to your requirements.
   *
   * # Errors
   * An error is returned whenever a validated condition is not satisfied.
   */
  validate(credential_jwt: Jwt, issuer: CoreDocument | IToCoreDocument, options: JwtCredentialValidationOptions, fail_fast: FailFast): DecodedJwtCredential;
  /**
   * Decode and verify the JWS signature of a {@link Credential} issued as a JWT using the DID Document of a trusted
   * issuer.
   *
   * A {@link DecodedJwtCredential} is returned upon success.
   *
   * # Warning
   * The caller must ensure that the DID Documents of the trusted issuers are up-to-date.
   *
   * ## Proofs
   *  Only the JWS signature is verified. If the {@link Credential} contains a `proof` property this will not be
   * verified by this method.
   *
   * # Errors
   * This method immediately returns an error if
   * the credential issuer' url cannot be parsed to a DID belonging to one of the trusted issuers. Otherwise an attempt
   * to verify the credential's signature will be made and an error is returned upon failure.
   */
  verifySignature(credential: Jwt, trustedIssuers: Array<CoreDocument | IToCoreDocument>, options: JwsVerificationOptions): DecodedJwtCredential;
  /**
   * Validate that the credential expires on or after the specified timestamp.
   */
  static checkExpiresOnOrAfter(credential: Credential, timestamp: Timestamp): void;
  /**
   * Validate that the credential is issued on or before the specified timestamp.
   */
  static checkIssuedOnOrBefore(credential: Credential, timestamp: Timestamp): void;
  /**
   * Validate that the relationship between the `holder` and the credential subjects is in accordance with
   * `relationship`. The `holder` parameter is expected to be the URL of the holder.
   */
  static checkSubjectHolderRelationship(credential: Credential, holder: string, relationship: SubjectHolderRelationship): void;
  /**
   * Checks whether the credential status has been revoked.
   *
   * Only supports `RevocationBitmap2022`.
   */
  static checkStatus(credential: Credential, trustedIssuers: Array<CoreDocument | IToCoreDocument>, statusCheck: StatusCheck): void;
  /**
   * Checks whether the credential status has been revoked using `StatusList2021`.
   */
  static checkStatusWithStatusList2021(credential: Credential, status_list: StatusList2021Credential, status_check: StatusCheck): void;
  /**
   * Utility for extracting the issuer field of a {@link Credential} as a DID.
   *
   * ### Errors
   *
   * Fails if the issuer field is not a valid DID.
   */
  static extractIssuer(credential: Credential): CoreDID;
  /**
   * Utility for extracting the issuer field of a credential in JWT representation as DID.
   *
   * # Errors
   *
   * If the JWT decoding fails or the issuer field is not a valid DID.
   */
  static extractIssuerFromJwt(credential: Jwt): CoreDID;
}
/**
 * A validator for a Domain Linkage Configuration and Credentials.
 */
export class JwtDomainLinkageValidator {
  free(): void;
  /**
   * Creates a new {@link JwtDomainLinkageValidator}. If a `signatureVerifier` is provided it will be used when
   * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
   * algorithms will be used.
   */
  constructor(signatureVerifier?: IJwsVerifier | null);
  /**
   * Validates the linkage between a domain and a DID.
   * {@link DomainLinkageConfiguration} is validated according to [DID Configuration Resource Verification](https://identity.foundation/.well-known/resources/did-configuration/#did-configuration-resource-verification).
   *
   * Linkage is valid if no error is thrown.
   *
   * # Note:
   * - Only the [JSON Web Token Proof Format](https://identity.foundation/.well-known/resources/did-configuration/#json-web-token-proof-format)
   *   is supported.
   * - Only the Credential issued by `issuer` is verified.
   *
   * # Errors
   *
   *  - Semantic structure of `configuration` is invalid.
   *  - `configuration` includes multiple credentials issued by `issuer`.
   *  - Validation of the matched Domain Linkage Credential fails.
   */
  validateLinkage(issuer: CoreDocument | IToCoreDocument, configuration: DomainLinkageConfiguration, domain: string, options: JwtCredentialValidationOptions): void;
  /**
   * Validates a [Domain Linkage Credential](https://identity.foundation/.well-known/resources/did-configuration/#domain-linkage-credential).
   *
   * Error will be thrown in case the validation fails.
   */
  validateCredential(issuer: CoreDocument | IToCoreDocument, credentialJwt: Jwt, domain: string, options: JwtCredentialValidationOptions): void;
}
export class JwtPresentationOptions {
  free(): void;
  /**
   * Creates a new {@link JwtPresentationOptions} from the given fields.
   *
   * Throws an error if any of the options are invalid.
   */
  constructor(options?: IJwtPresentationOptions | null);
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JwtPresentationOptions;
  /**
   * Deep clones the object.
   */
  clone(): JwtPresentationOptions;
}
/**
 * Options to declare validation criteria when validating presentation.
 */
export class JwtPresentationValidationOptions {
  free(): void;
  /**
   * Creates a new {@link JwtPresentationValidationOptions} from the given fields.
   *
   * Throws an error if any of the options are invalid.
   */
  constructor(options?: IJwtPresentationValidationOptions | null);
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): JwtPresentationValidationOptions;
  /**
   * Deep clones the object.
   */
  clone(): JwtPresentationValidationOptions;
}
export class JwtPresentationValidator {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new {@link JwtPresentationValidator}. If a `signatureVerifier` is provided it will be used when
   * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
   * algorithms will be used.
   */
  constructor(signatureVerifier?: IJwsVerifier | null);
  /**
   * Validates a {@link Presentation} encoded as a {@link Jwt}.
   *
   * The following properties are validated according to `options`:
   * - the JWT can be decoded into a semantically valid presentation.
   * - the expiration and issuance date contained in the JWT claims.
   * - the holder's signature.
   *
   * Validation is done with respect to the properties set in `options`.
   *
   * # Warning
   *
   * * This method does NOT validate the constituent credentials and therefore also not the relationship between the
   * credentials' subjects and the presentation holder. This can be done with {@link JwtCredentialValidationOptions}.
   * * The lack of an error returned from this method is in of itself not enough to conclude that the presentation can
   * be trusted. This section contains more information on additional checks that should be carried out before and
   * after calling this method.
   *
   * ## The state of the supplied DID Documents.
   *
   * The caller must ensure that the DID Documents in `holder` are up-to-date.
   *
   * # Errors
   *
   * An error is returned whenever a validated condition is not satisfied or when decoding fails.
   */
  validate(presentationJwt: Jwt, holder: CoreDocument | IToCoreDocument, validation_options: JwtPresentationValidationOptions): DecodedJwtPresentation;
  /**
   * Validates the semantic structure of the {@link Presentation}.
   */
  static checkStructure(presentation: Presentation): void;
  /**
   * Attempt to extract the holder of the presentation.
   *
   * # Errors:
   * * If deserialization/decoding of the presentation fails.
   * * If the holder can't be parsed as DIDs.
   */
  static extractHolder(presentation: Jwt): CoreDID;
}
/**
 * Options to declare validation criteria when validating credentials.
 */
export class KeyBindingJWTValidationOptions {
  free(): void;
  constructor(options?: IKeyBindingJWTValidationOptions | null);
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): KeyBindingJWTValidationOptions;
  /**
   * Deep clones the object.
   */
  clone(): KeyBindingJWTValidationOptions;
}
export class KeyBindingJwt {
  private constructor();
  free(): void;
  static parse(s: string): KeyBindingJwt;
  claims(): KeyBindingJwtClaimsV2;
  toString(): string;
  toJSON(): any;
}
export class KeyBindingJwtBuilder {
  free(): void;
  constructor();
  static fromObject(obj: object): KeyBindingJwtBuilder;
  header(header: object): KeyBindingJwtBuilder;
  iat(iat: Timestamp): KeyBindingJwtBuilder;
  aud(aud: string): KeyBindingJwtBuilder;
  nonce(nonce: string): KeyBindingJwtBuilder;
  insertProperty(name: string, value: any): KeyBindingJwtBuilder;
  finish(sd_jwt: SdJwtV2, alg: string, signer: JwsSigner): Promise<KeyBindingJwt>;
}
/**
 * Claims set for key binding JWT.
 */
export class KeyBindingJwtClaims {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new [`KeyBindingJwtClaims`].
   * When `issued_at` is left as None, it will automatically default to the current time.
   *
   * # Error
   * When `issued_at` is set to `None` and the system returns time earlier than `SystemTime::UNIX_EPOCH`.
   */
  constructor(jwt: string, disclosures: Array<string>, nonce: string, aud: string, issued_at?: Timestamp | null, custom_properties?: Record<string, any> | null);
  /**
   * Returns a string representation of the claims.
   */
  toString(): string;
  /**
   * Returns a copy of the issued at `iat` property.
   */
  iat(): bigint;
  /**
   * Returns a copy of the audience `aud` property.
   */
  aud(): string;
  /**
   * Returns a copy of the `nonce` property.
   */
  nonce(): string;
  /**
   * Returns a copy of the `sd_hash` property.
   */
  sdHash(): string;
  /**
   * Returns a copy of the custom properties.
   */
  customProperties(): Record<string, any>;
  /**
   * Returns the value of the `typ` property of the JWT header according to
   * https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-key-binding-jwt
   */
  static keyBindingJwtHeaderTyp(): string;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): KeyBindingJwtClaims;
  /**
   * Deep clones the object.
   */
  clone(): KeyBindingJwtClaims;
}
/**
 * Implementation of interface {@link KeyIdStorage} for {@link KeytoolStorage}.
 */
export class KeyIdKeytoolStore {
  free(): void;
  constructor(keytool: KeytoolStorage);
  insertKeyId(method_digest: MethodDigest, key_id: string): Promise<void>;
  getKeyId(method_digest: MethodDigest): Promise<string>;
  deleteKeyId(method_digest: MethodDigest): Promise<void>;
}
/**
 * An implementation of the Signer interface that relies on
 * IOTA Keytool.
 */
export class KeytoolSigner {
  free(): void;
  /**
   * Returns a new {@link KeytoolSigner}. The optional parameters respectively
   * allow to set the signing address and the `iota` binary to use. Defaults
   * to use the current active address and the binary found in $PATH.
   */
  constructor(address?: string | null, iota_bin_location?: string | null);
  /**
   * Returns the signing address.
   */
  address(): string;
  keyId(): string;
  publicKey(): Promise<PublicKey>;
  sign(tx_data_bcs: Uint8Array): Promise<string>;
  iotaPublicKeyBytes(): Promise<Uint8Array>;
}
/**
 * IOTA Keytool CLI wrapper.
 */
export class KeytoolStorage {
  free(): void;
  /**
   * Creates a new {@link KeytoolStorage} that wraps the given iota binary.
   * Attempts to use the one in PATH if none is provided.
   */
  constructor(iota_bin?: string | null);
  /**
   * Returns a {@link KeytoolSigner} that will use the provided `address`
   * to sign transactions. If no address is provided the current active
   * one will be used.
   */
  signer(address?: string | null): KeytoolSigner;
  /**
   * Creates a new key of type `key_scheme`.
   * Returns the tuple ([`PublicKey`](https://docs.iota.org/ts-sdk/api/cryptography/classes/PublicKey), alias).
   */
  generateKey(key_scheme: 'ed25519' | 'secp256r1' | 'secp256k1'): [PublicKey, string];
  /**
   * Inserts a Bech32-encoded private key in the keystore.
   * The key must use the prefix `iotaprivkey`.
   *
   * Returns the key's alias.
   */
  insertKey(bech32_secret_key: string): string;
  /**
   * Signs `data` with `address`'s secret key.
   */
  signRaw(address: string, data: Uint8Array): Uint8Array;
  /**
   * Updates an alias from `old_alias` to `new_alias`
   * If no value for `new_alias` is provided, a randomly generated one will be used.
   */
  updateAlias(old_alias: string, new_alias?: string | null): void;
  /**
   * Returns the [`PublicKey`](https://docs.iota.org/ts-sdk/api/cryptography/classes/PublicKey) for the given address together with its alias.
   */
  getKey(address: string): [PublicKey, string];
  /**
   * Returns the [`PublicKey`](https://docs.iota.org/ts-sdk/api/cryptography/classes/PublicKey) that has the given alias.
   */
  getKeyByAlias(alias: string): PublicKey;
}
/**
 * A service wrapper for a
 * [Linked Domain Service Endpoint](https://identity.foundation/.well-known/resources/did-configuration/#linked-domain-service-endpoint).
 */
export class LinkedDomainService {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Constructs a new {@link LinkedDomainService} that wraps a spec compliant [Linked Domain Service Endpoint](https://identity.foundation/.well-known/resources/did-configuration/#linked-domain-service-endpoint).
   *
   * Domain URLs must include the `https` scheme in order to pass the domain linkage validation.
   */
  constructor(options: ILinkedDomainService);
  /**
   * Returns the domains contained in the Linked Domain Service.
   */
  domains(): Array<string>;
  /**
   * Returns the inner service which can be added to a DID Document.
   */
  toService(): Service;
  /**
   * Creates a new {@link LinkedDomainService} from a {@link Service}.
   *
   * # Error
   *
   * Errors if `service` is not a valid Linked Domain Service.
   */
  static fromService(service: Service): LinkedDomainService;
  /**
   * Returns `true` if a {@link Service} is a valid Linked Domain Service.
   */
  static isValid(service: Service): boolean;
  /**
   * Deep clones the object.
   */
  clone(): LinkedDomainService;
}
/**
 * A service wrapper for a [Linked Verifiable Presentation Service Endpoint](https://identity.foundation/linked-vp/#linked-verifiable-presentation-service-endpoint).
 */
export class LinkedVerifiablePresentationService {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Constructs a new {@link LinkedVerifiablePresentationService} that wraps a spec compliant [Linked Verifiable Presentation Service Endpoint](https://identity.foundation/linked-vp/#linked-verifiable-presentation-service-endpoint).
   */
  constructor(options: ILinkedVerifiablePresentationService);
  /**
   * Returns the domains contained in the Linked Verifiable Presentation Service.
   */
  verifiablePresentationUrls(): Array<string>;
  /**
   * Returns the inner service which can be added to a DID Document.
   */
  toService(): Service;
  /**
   * Creates a new {@link LinkedVerifiablePresentationService} from a {@link Service}.
   *
   * # Error
   *
   * Errors if `service` is not a valid Linked Verifiable Presentation Service.
   */
  static fromService(service: Service): LinkedVerifiablePresentationService;
  /**
   * Returns `true` if a {@link Service} is a valid Linked Verifiable Presentation Service.
   */
  static isValid(service: Service): boolean;
  /**
   * Deep clones the object.
   */
  clone(): LinkedVerifiablePresentationService;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): LinkedVerifiablePresentationService;
}
/**
 * Supported verification method data formats.
 */
export class MethodData {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new {@link MethodData} variant with Base58-BTC encoded content.
   */
  static newBase58(data: Uint8Array): MethodData;
  /**
   * Creates a new {@link MethodData} variant with Multibase-encoded content.
   */
  static newMultibase(data: Uint8Array): MethodData;
  /**
   * Creates a new {@link MethodData} variant consisting of the given `key`.
   *
   * ### Errors
   * An error is thrown if the given `key` contains any private components.
   */
  static newJwk(key: Jwk): MethodData;
  /**
   * Creates a new custom {@link MethodData}.
   */
  static newCustom(name: string, data: any): MethodData;
  /**
   * Returns the wrapped custom method data format is `Custom`.
   */
  tryCustom(): CustomMethodData;
  /**
   * Returns a `Uint8Array` containing the decoded bytes of the {@link MethodData}.
   *
   * This is generally a public key identified by a {@link MethodData} value.
   *
   * ### Errors
   * Decoding can fail if {@link MethodData} has invalid content or cannot be
   * represented as a vector of bytes.
   */
  tryDecode(): Uint8Array;
  /**
   * Returns the wrapped {@link Jwk} if the format is `PublicKeyJwk`.
   */
  tryPublicKeyJwk(): Jwk;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): MethodData;
  /**
   * Deep clones the object.
   */
  clone(): MethodData;
}
/**
 * Unique identifier of a {@link VerificationMethod}.
 *
 * NOTE:
 * This class does not have a JSON representation,
 * use the methods `pack` and `unpack` instead.
 */
export class MethodDigest {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  constructor(verification_method: VerificationMethod);
  /**
   * Packs {@link MethodDigest} into bytes.
   */
  pack(): Uint8Array;
  /**
   * Unpacks bytes into {@link MethodDigest}.
   */
  static unpack(bytes: Uint8Array): MethodDigest;
  /**
   * Deep clones the object.
   */
  clone(): MethodDigest;
}
/**
 * Supported verification method types.
 */
export class MethodScope {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  static VerificationMethod(): MethodScope;
  static Authentication(): MethodScope;
  static AssertionMethod(): MethodScope;
  static KeyAgreement(): MethodScope;
  static CapabilityDelegation(): MethodScope;
  static CapabilityInvocation(): MethodScope;
  /**
   * Returns the {@link MethodScope} as a string.
   */
  toString(): string;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): MethodScope;
  /**
   * Deep clones the object.
   */
  clone(): MethodScope;
}
/**
 * Supported verification method types.
 */
export class MethodType {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  static Ed25519VerificationKey2018(): MethodType;
  static X25519KeyAgreementKey2019(): MethodType;
  /**
   * @deprecated Use {@link JsonWebKey2020} instead.
   */
  static JsonWebKey(): MethodType;
  /**
   * A verification method for use with JWT verification as prescribed by the {@link Jwk}
   * in the `publicKeyJwk` entry.
   */
  static JsonWebKey2020(): MethodType;
  /**
   * A custom method.
   */
  static custom(type_: string): MethodType;
  /**
   * Returns the {@link MethodType} as a string.
   */
  toString(): string;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): MethodType;
  /**
   * Deep clones the object.
   */
  clone(): MethodType;
}
export class OnChainIdentity {
  private constructor();
  free(): void;
  static getById(id: string, client: CoreClientReadOnly): Promise<OnChainIdentity>;
  id(): string;
  didDocument(): IotaDocument;
  /**
   * Returns whether the {@link IotaDocument} contained in this {@link OnChainIdentity} has been deleted.
   * Once a DID Document is deleted, it cannot be reactivated.
   *
   * When calling {@link OnChainIdentity.did_document} on an Identity whose DID Document
   * had been deleted, an *empty* and *deactivated* {@link IotaDocument} will be returned.
   */
  hasDeletedDid(): boolean;
  isShared(): boolean;
  getControllerToken(client: IdentityClient): Promise<ControllerToken | undefined>;
  getControllerTokenForAddress(address: string, client: IdentityClient): Promise<ControllerToken | undefined>;
  updateDidDocument(updated_doc: IotaDocument, controller_token: ControllerToken, expiration_epoch?: bigint | null): TransactionBuilder<CreateProposal<UpdateDid>>;
  deactivateDid(controller_token: ControllerToken, expiration_epoch?: bigint | null): TransactionBuilder<CreateProposal<UpdateDid>>;
  deleteDid(controller_token: ControllerToken, expiration_epoch?: bigint | null): TransactionBuilder<CreateProposal<UpdateDid>>;
  updateConfig(controller_token: ControllerToken, config: ConfigChange, expiration_epoch?: bigint | null): TransactionBuilder<CreateProposal<ConfigChange>>;
  sendAssets(controller_token: ControllerToken, transfer_map: ([string, string])[], expiration_epoch?: bigint | null): TransactionBuilder<CreateProposal<SendAction>>;
  revokeDelegationToken(controller_cap: ControllerCap, delegation_token: DelegationToken): TransactionBuilder<DelegationTokenRevocation>;
  unrevokeDelegationToken(controller_cap: ControllerCap, delegation_token: DelegationToken): TransactionBuilder<DelegationTokenRevocation>;
  deleteDelegationToken(delegation_token: DelegationToken): TransactionBuilder<DeleteDelegationToken>;
}
export class PayloadEntry {
  private constructor();
  free(): void;
  1: PayloadType;
  value: any;
}
export class Payloads {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Payloads;
  /**
   * Deep clones the object.
   */
  clone(): Payloads;
  constructor(entries: PayloadEntry[]);
  static newFromValues(values: any[]): Payloads;
  getValues(): any[];
  getUndisclosedIndexes(): Uint32Array;
  getDisclosedIndexes(): Uint32Array;
  getUndisclosedPayloads(): any[];
  getDisclosedPayloads(): Payloads;
  setUndisclosed(index: number): void;
  replacePayloadAtIndex(index: number, value: any): any;
}
/**
 * Represents a bundle of one or more {@link Credential}s.
 */
export class Presentation {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Returns the base JSON-LD context.
   */
  static BaseContext(): string;
  /**
   * Returns the base type.
   */
  static BaseType(): string;
  /**
   * Constructs a new presentation.
   */
  constructor(values: IPresentation);
  /**
   * Returns a copy of the JSON-LD context(s) applicable to the presentation.
   */
  context(): Array<string | Record<string, any>>;
  /**
   * Returns a copy of the unique `URI` identifying the presentation.
   */
  id(): string | undefined;
  /**
   * Returns a copy of the URIs defining the type of the presentation.
   */
  type(): Array<string>;
  /**
   * Returns the JWT credentials expressing the claims of the presentation.
   */
  verifiableCredential(): Array<UnknownCredential>;
  /**
   * Returns a copy of the URI of the entity that generated the presentation.
   */
  holder(): string;
  /**
   * Returns a copy of the service(s) used to refresh an expired {@link Credential} in the presentation.
   */
  refreshService(): Array<RefreshService>;
  /**
   * Returns a copy of the terms-of-use specified by the presentation holder
   */
  termsOfUse(): Array<Policy>;
  /**
   * Optional cryptographic proof, unrelated to JWT.
   */
  proof(): Proof | undefined;
  /**
   * Sets the proof property of the {@link Presentation}.
   *
   * Note that this proof is not related to JWT.
   */
  setProof(proof?: Proof | null): void;
  /**
   * Returns a copy of the miscellaneous properties on the presentation.
   */
  properties(): Map<string, any>;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Presentation;
  /**
   * Deep clones the object.
   */
  clone(): Presentation;
}
export class PresentationProtectedHeader {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  alg: PresentationProofAlgorithm;
  /**
   * ID for the key used for the JWP.
   */
  get kid(): string | undefined;
  /**
   * ID for the key used for the JWP.
   */
  set kid(value: string | null | undefined);
  /**
   * Who have received the JPT.
   */
  get aud(): string | undefined;
  /**
   * Who have received the JPT.
   */
  set aud(value: string | null | undefined);
  /**
   * For replay attacks.
   */
  get nonce(): string | undefined;
  /**
   * For replay attacks.
   */
  set nonce(value: string | null | undefined);
}
/**
 * Represents a cryptographic proof that can be used to validate verifiable credentials and
 * presentations.
 *
 * This representation does not inherently implement any standard; instead, it
 * can be utilized to implement standards or user-defined proofs. The presence of the
 * `type` field is necessary to accommodate different types of cryptographic proofs.
 *
 * Note that this proof is not related to JWT and can be used in combination or as an alternative
 * to it.
 */
export class Proof {
  free(): void;
  constructor(type_: string, properties: any);
  /**
   * Returns the type of proof.
   */
  type(): string;
  /**
   * Returns the properties of the proof.
   */
  properties(): any;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Proof;
  /**
   * Deep clones the object.
   */
  clone(): Proof;
}
export class ProofUpdateCtx {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Old `startValidityTimeframe` value
   */
  old_start_validity_timeframe: Uint8Array;
  /**
   * New `startValidityTimeframe` value to be signed
   */
  new_start_validity_timeframe: Uint8Array;
  /**
   * Old `endValidityTimeframe` value
   */
  old_end_validity_timeframe: Uint8Array;
  /**
   * New `endValidityTimeframe` value to be signed
   */
  new_end_validity_timeframe: Uint8Array;
  /**
   * Index of `startValidityTimeframe` claim inside the array of Claims
   */
  index_start_validity_timeframe: number;
  /**
   * Index of `endValidityTimeframe` claim inside the array of Claims
   */
  index_end_validity_timeframe: number;
  /**
   * Number of signed messages, number of payloads in a JWP
   */
  number_of_signed_messages: number;
}
export class PublishDidDocument {
  free(): void;
  constructor(did_document: IotaDocument, controller: string);
  buildProgrammableTransaction(client: CoreClientReadOnly): Promise<Uint8Array>;
  apply(wasm_effects: TransactionEffects, client: CoreClientReadOnly): Promise<IotaDocument>;
}
/**
 * Convenience type for resolving DID documents from different DID methods.   
 *  
 * Also provides methods for resolving DID Documents associated with
 * verifiable {@link Credential}s and {@link Presentation}s.
 *
 * # Configuration
 *
 * The resolver will only be able to resolve DID documents for methods it has been configured for in the constructor.
 */
export class Resolver {
  free(): void;
  /**
   * Constructs a new {@link Resolver}.
   *
   * # Errors
   * If both a `client` is given and the `handlers` map contains the "iota" key the construction process
   * will throw an error because the handler for the "iota" method then becomes ambiguous.
   */
  constructor(config: ResolverConfig);
  /**
   * Fetches the DID Document of the given DID.
   *
   * ### Errors
   *
   * Errors if the resolver has not been configured to handle the method
   * corresponding to the given DID or the resolution process itself fails.
   */
  resolve(did: string): Promise<CoreDocument | IToCoreDocument>;
  /**
   * Concurrently fetches the DID Documents of the multiple given DIDs.
   *
   * # Errors
   * * If the resolver has not been configured to handle the method of any of the given DIDs.
   * * If the resolution process of any DID fails.
   *
   * ## Note
   * * The order of the documents in the returned array matches that in `dids`.
   * * If `dids` contains duplicates, these will be resolved only once and the resolved document
   * is copied into the returned array to match the order of `dids`.
   */
  resolveMultiple(dids: Array<string>): Promise<Array<CoreDocument | IToCoreDocument>>;
}
/**
 * A compressed bitmap for managing credential revocation.
 */
export class RevocationBitmap {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new {@link RevocationBitmap} instance.
   */
  constructor();
  /**
   * The name of the service type.
   */
  static type(): string;
  /**
   * Returns `true` if the credential at the given `index` is revoked.
   */
  isRevoked(index: number): boolean;
  /**
   * Mark the given index as revoked.
   *
   * Returns true if the index was absent from the set.
   */
  revoke(index: number): boolean;
  /**
   * Mark the index as not revoked.
   *
   * Returns true if the index was present in the set.
   */
  unrevoke(index: number): boolean;
  /**
   * Returns the number of revoked credentials.
   */
  len(): number;
  /**
   * Return a `Service` with:
   * - the service's id set to `serviceId`,
   * - of type `RevocationBitmap2022`,
   * - and with the bitmap embedded in a data url in the service's endpoint.
   */
  toService(serviceId: DIDUrl): Service;
  /**
   * Try to construct a {@link RevocationBitmap} from a service
   * if it is a valid Revocation Bitmap Service.
   */
  static fromEndpoint(service: Service): RevocationBitmap;
}
/**
 * Information used to determine the current status of a {@link Credential}.
 */
export class RevocationTimeframeStatus {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Deep clones the object.
   */
  clone(): RevocationTimeframeStatus;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): RevocationTimeframeStatus;
  /**
   * Creates a new `RevocationTimeframeStatus`.
   */
  constructor(id: string, index: number, duration: Duration, start_validity?: Timestamp | null);
  /**
   * Get startValidityTimeframe value.
   */
  startValidityTimeframe(): Timestamp;
  /**
   * Get endValidityTimeframe value.
   */
  endValidityTimeframe(): Timestamp;
  /**
   * Return the URL for the `RevocationBitmapStatus`.
   */
  id(): string;
  /**
   * Return the index of the credential in the issuer's revocation bitmap
   */
  index(): number | undefined;
}
/**
 * Representation of an SD-JWT of the format
 * `<Issuer-signed JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>~<optional KB-JWT>`.
 */
export class SdJwt {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new `SdJwt` from its components.
   */
  constructor(jwt: string, disclosures: Array<string>, key_binding_jwt?: string | null);
  /**
   * Serializes the components into the final SD-JWT.
   */
  presentation(): string;
  /**
   * Parses an SD-JWT into its components as [`SdJwt`].
   *
   * ## Error
   * Returns `DeserializationError` if parsing fails.
   */
  static parse(sd_jwt: string): SdJwt;
  /**
   * Serializes the components into the final SD-JWT.
   */
  toString(): string;
  /**
   * The JWT part.
   */
  jwt(): string;
  /**
   * The disclosures part.
   */
  disclosures(): Array<string>;
  /**
   * The optional key binding JWT.
   */
  keyBindingJwt(): string | undefined;
  /**
   * Deep clones the object.
   */
  clone(): SdJwt;
}
export class SdJwtBuilder {
  free(): void;
  /**
   * Creates a new {@link SdJwtVcBuilder} using `object` JSON representation and a given
   * hasher `hasher`.
   */
  constructor(object: object, hasher: Hasher, salt_size?: number | null);
  /**
   * Substitutes a value with the digest of its disclosure.
   *
   * ## Notes
   * - `path` indicates the pointer to the value that will be concealed using the syntax of [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
   */
  makeConcealable(path: string): SdJwtBuilder;
  /**
   * Sets the JWT header.
   * ## Notes
   * - if {@link SdJwtVcBuilder.header} is not called, the default header is used: ```json { "typ": "sd-jwt", "alg":
   *   "<algorithm used in SdJwtBuilder.finish>" } ```
   * - `alg` is always replaced with the value passed to {@link SdJwtVcBuilder.finish}.
   */
  header(header: object): SdJwtBuilder;
  /**
   * Adds a new claim to the underlying object.
   */
  insertClaim(key: string, value: any): SdJwtBuilder;
  /**
   * Adds a decoy digest to the specified path.
   *
   * `path` indicates the pointer to the value that will be concealed using the syntax of
   * [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
   *
   * Use `path` = "" to add decoys to the top level.
   */
  addDecoys(path: string, number_of_decoys: number): SdJwtBuilder;
  /**
   * Require a proof of possession of a given key from the holder.
   *
   * This operation adds a JWT confirmation (`cnf`) claim as specified in
   * [RFC8300](https://www.rfc-editor.org/rfc/rfc7800.html#section-3).
   */
  requireKeyBinding(key_bind: RequiredKeyBinding): SdJwtBuilder;
  /**
   * Creates an {@link SdJwtVc} with the provided data.
   */
  finish(signer: JwsSigner, alg: string): Promise<SdJwtV2>;
}
/**
 * A type for decoding and validating {@link Credential}.
 */
export class SdJwtCredentialValidator {
  free(): void;
  /**
   * Creates a new `SdJwtCredentialValidator`. If a `signatureVerifier` is provided it will be used when
   * verifying decoded JWS signatures, otherwise a default verifier capable of handling the `EdDSA`, `ES256`, `ES256K`
   * algorithms will be used.
   */
  constructor(signatureVerifier?: IJwsVerifier | null);
  /**
   * Decodes and validates a `Credential` issued as an SD-JWT. A `DecodedJwtCredential` is returned upon success.
   * The credential is constructed by replacing disclosures following the
   * [`Selective Disclosure for JWTs (SD-JWT)`](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html) standard.
   *
   * The following properties are validated according to `options`:
   * - the issuer's signature on the JWS,
   * - the expiration date,
   * - the issuance date,
   * - the semantic structure.
   *
   * # Warning
   * * The key binding JWT is not validated. If needed, it must be validated separately using
   * `SdJwtValidator::validate_key_binding_jwt`.
   * * The lack of an error returned from this method is in of itself not enough to conclude that the credential can be
   * trusted. This section contains more information on additional checks that should be carried out before and after
   * calling this method.
   *
   * ## The state of the issuer's DID Document
   * The caller must ensure that `issuer` represents an up-to-date DID Document.
   *
   * ## Properties that are not validated
   *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:
   * `proof`, `credentialStatus`, `type`, `credentialSchema`, `refreshService` **and more**.
   * These should be manually checked after validation, according to your requirements.
   *
   * # Errors
   * An error is returned whenever a validated condition is not satisfied.
   */
  validateCredential(sd_jwt: SdJwt, issuer: CoreDocument | IToCoreDocument, options: JwtCredentialValidationOptions, fail_fast: FailFast): DecodedJwtCredential;
  /**
   * Decode and verify the JWS signature of a `Credential` issued as an SD-JWT using the DID Document of a trusted
   * issuer and replaces the disclosures.
   *
   * A `DecodedJwtCredential` is returned upon success.
   *
   * # Warning
   * The caller must ensure that the DID Documents of the trusted issuers are up-to-date.
   *
   * ## Proofs
   *  Only the JWS signature is verified. If the `Credential` contains a `proof` property this will not be verified
   * by this method.
   *
   * # Errors
   * * If the issuer' URL cannot be parsed.
   * * If Signature verification fails.
   * * If SD decoding fails.
   */
  verifySignature(credential: SdJwt, trustedIssuers: Array<CoreDocument | IToCoreDocument>, options: JwsVerificationOptions): DecodedJwtCredential;
  /**
   * Validates a Key Binding JWT (KB-JWT) according to `https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-key-binding-jwt`.
   * The Validation process includes:
   *   * Signature validation using public key materials defined in the `holder` document.
   *   * `typ` value in KB-JWT header.
   *   * `sd_hash` claim value in the KB-JWT claim.
   *   * Optional `nonce`, `aud` and issuance date validation.
   */
  validateKeyBindingJwt(sdJwt: SdJwt, holder: CoreDocument | IToCoreDocument, options: KeyBindingJWTValidationOptions): KeyBindingJwtClaims;
}
export class SdJwtPresentationBuilder {
  free(): void;
  constructor(sd_jwt: SdJwtV2, hasher: Hasher);
  /**
   * Removes the disclosure for the property at `path`, concealing it.
   *
   * ## Notes
   * - When concealing a claim more than one disclosure may be removed: the disclosure for the claim itself and the
   *   disclosures for any concealable sub-claim.
   */
  conceal(path: string): SdJwtPresentationBuilder;
  /**
   * Adds a {@link KeyBindingJwt} to this {@link SdJwt}'s presentation.
   */
  attachKeyBindingJwt(kb_jwt: KeyBindingJwt): SdJwtPresentationBuilder;
  /**
   * Returns the resulting {@link SdJwt} together with all removed disclosures.
   * ## Errors
   * - Fails with `Error::MissingKeyBindingJwt` if this {@link SdJwt} requires a key binding but none was provided.
   */
  finish(): SdJwtPresentationResult;
}
export class SdJwtPresentationResult {
  private constructor();
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  sdJwt: SdJwtV2;
  disclosures: DisclosureV2[];
}
export class SdJwtV2 {
  private constructor();
  free(): void;
  static parse(s: string): SdJwtV2;
  header(): any;
  claims(): SdJwtClaims;
  disclosures(): string[];
  requiredKeyBind(): RequiredKeyBinding | undefined;
  /**
   * Returns the JSON object obtained by replacing all disclosures into their
   * corresponding JWT concealable claims.
   */
  intoDisclosedObject(): any;
  /**
   * Serializes the components into the final SD-JWT.
   */
  presentation(): string;
  toJSON(): any;
  toString(): any;
}
export class SdJwtVc {
  private constructor();
  free(): void;
  /**
   * Deep clones the object.
   */
  clone(): SdJwtVc;
  /**
   * Parses a `string` into an {@link SdJwtVc}.
   */
  static parse(s: string): SdJwtVc;
  claims(): SdJwtVcClaims;
  asSdJwt(): SdJwtV2;
  issuerJwk(resolver: IResolver<string, Uint8Array>): Promise<Jwk>;
  issuerMetadata(resolver: IResolver<string, Uint8Array>): Promise<IssuerMetadata | undefined>;
  typeMetadata(resolver: IResolver<string, Uint8Array>): Promise<TypeMetadata>;
  /**
   * Verifies this {@link SdJwtVc} JWT's signature.
   */
  verifySignature(jwk: Jwk, jws_verifier?: IJwsVerifier | null): void;
  /**
   * Checks the disclosability of this {@link SdJwtVc}'s claims against a list of {@link ClaimMetadata}.
   * ## Notes
   * This check should be performed by the token's holder in order to assert the issuer's compliance with
   * the credential's type.
   */
  validateClaimDisclosability(claims_metadata: ClaimMetadata[]): void;
  /**
   * Check whether this {@link SdJwtVc} is valid.
   *
   * This method checks:
   * - JWS signature
   * - credential's type
   * - claims' disclosability
   */
  validate(resolver: IResolver<string, Uint8Array>, hasher: Hasher, jws_verifier?: IJwsVerifier | null): Promise<void>;
  /**
   * Verify the signature of this {@link SdJwtVc}'s {@link KeyBindingJwt}.
   */
  verifyKeyBinding(jwk: Jwk, jws_verifier?: IJwsVerifier | null): void;
  validateKeyBinding(jwk: Jwk, hasher: Hasher, options: KeyBindingJWTValidationOptions, jws_verifier?: IJwsVerifier | null): void;
  intoSdJwt(): SdJwtV2;
  intoDisclosedObject(hasher: Hasher): object;
  intoPresentation(hasher: Hasher): SdJwtVcPresentationBuilder;
  toJSON(): any;
  toString(): any;
}
export class SdJwtVcBuilder {
  free(): void;
  /**
   * Creates a new {@link SdJwtVcBuilder} using `object` JSON representation and a given
   * hasher `hasher`.
   */
  constructor(object: object, hasher: Hasher);
  /**
   * Creates a new [`SdJwtVcBuilder`] starting from a {@link Credential} that is converted to a JWT claim set.
   */
  static fromCredential(credential: Credential, hasher: Hasher): SdJwtVcBuilder;
  /**
   * Substitutes a value with the digest of its disclosure.
   *
   * ## Notes
   * - `path` indicates the pointer to the value that will be concealed using the syntax of [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
   */
  makeConcealable(path: string): SdJwtVcBuilder;
  /**
   * Sets the JWT header.
   * ## Notes
   * - if {@link SdJwtVcBuilder.header} is not called, the default header is used: ```json { "typ": "sd-jwt", "alg":
   *   "<algorithm used in SdJwtBuilder.finish>" } ```
   * - `alg` is always replaced with the value passed to {@link SdJwtVcBuilder.finish}.
   */
  header(header: object): SdJwtVcBuilder;
  /**
   * Adds a decoy digest to the specified path.
   *
   * `path` indicates the pointer to the value that will be concealed using the syntax of
   * [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
   *
   * Use `path` = "" to add decoys to the top level.
   */
  addDecoys(path: string, number_of_decoys: number): SdJwtVcBuilder;
  /**
   * Require a proof of possession of a given key from the holder.
   *
   * This operation adds a JWT confirmation (`cnf`) claim as specified in
   * [RFC8300](https://www.rfc-editor.org/rfc/rfc7800.html#section-3).
   */
  requireKeyBinding(key_bind: RequiredKeyBinding): SdJwtVcBuilder;
  /**
   * Inserts an `iss` claim. See {@link SdJwtVcClaim.iss}.
   */
  iss(issuer: string): SdJwtVcBuilder;
  /**
   * Inserts a `nbf` claim. See {@link SdJwtVcClaims.nbf}.
   */
  nbf(nbf: Timestamp): SdJwtVcBuilder;
  /**
   * Inserts a `exp` claim. See {@link SdJwtVcClaims.exp}.
   */
  exp(exp: Timestamp): SdJwtVcBuilder;
  /**
   * Inserts a `iat` claim. See {@link SdJwtVcClaims.iat}.
   */
  iat(iat: Timestamp): SdJwtVcBuilder;
  /**
   * Inserts a `vct` claim. See {@link SdJwtVcClaims.vct}.
   */
  vct(vct: string): SdJwtVcBuilder;
  /**
   * Inserts a `sub` claim. See {@link SdJwtVcClaims.sub}.
   */
  sub(sub: string): SdJwtVcBuilder;
  /**
   * Inserts a `status` claim. See {@link SdJwtVcClaims.status}.
   */
  status(status: any): SdJwtVcBuilder;
  /**
   * Creates an {@link SdJwtVc} with the provided data.
   */
  finish(signer: JwsSigner, alg: string): Promise<SdJwtVc>;
}
export class SdJwtVcPresentationBuilder {
  free(): void;
  /**
   * Prepares a new presentation from a given {@link SdJwtVc}.
   */
  constructor(token: SdJwtVc, hasher: Hasher);
  conceal(path: string): SdJwtVcPresentationBuilder;
  attachKeyBindingJwt(kb_jwt: KeyBindingJwt): SdJwtVcPresentationBuilder;
  finish(): SdJwtVcPresentationResult;
}
export class SdJwtVcPresentationResult {
  private constructor();
  free(): void;
  sdJwtVc: SdJwtVc;
  disclosures: DisclosureV2[];
}
/**
 * Substitutes digests in an SD-JWT object by their corresponding plaintext values provided by disclosures.
 */
export class SdObjectDecoder {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new `SdObjectDecoder` with `sha-256` hasher.
   */
  constructor();
  /**
   * Decodes an SD-JWT `object` containing by Substituting the digests with their corresponding
   * plaintext values provided by `disclosures`.
   *
   * ## Notes
   * * Claims like `exp` or `iat` are not validated in the process of decoding.
   * * `_sd_alg` property will be removed if present.
   */
  decode(object: Record<string, any>, disclosures: Array<string>): Record<string, any>;
}
/**
 * Transforms a JSON object into an SD-JWT object by substituting selected values
 * with their corresponding disclosure digests.
 *
 * Note: digests are created using the sha-256 algorithm.
 */
export class SdObjectEncoder {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new `SdObjectEncoder` with `sha-256` hash function.
   */
  constructor(object: any);
  /**
   * Substitutes a value with the digest of its disclosure.
   * If no salt is provided, the disclosure will be created with a random salt value.
   *
   * `path` indicates the pointer to the value that will be concealed using the syntax of
   * [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901).
   *
   * For the following object:
   *
   *  ```
   * {
   *   "id": "did:value",
   *   "claim1": {
   *      "abc": true
   *   },
   *   "claim2": ["val_1", "val_2"]
   * }
   * ```
   * 
   * Path "/id" conceals `"id": "did:value"`
   * Path "/claim1/abc" conceals `"abc": true`
   * Path "/claim2/0" conceals `val_1`
   *
   * ## Errors
   * * `InvalidPath` if pointer is invalid.
   * * `DataTypeMismatch` if existing SD format is invalid.
   */
  conceal(path: string, salt?: string | null): Disclosure;
  /**
   * Adds the `_sd_alg` property to the top level of the object, with
   * its value set to "sha-256".
   */
  addSdAlgProperty(): void;
  /**
   * Returns the modified object as a string.
   */
  encodeToString(): string;
  /**
   * Returns the modified object as a string.
   */
  toString(): string;
  /**
   * Returns the modified object.
   */
  encodeToObject(): Record<string, any>;
  /**
   * Returns the modified object.
   */
  toJSON(): any;
  /**
   * Adds a decoy digest to the specified path.
   * If path is an empty slice, decoys will be added to the top level.
   */
  addDecoys(path: string, number_of_decoys: number): void;
}
/**
 * Used to construct a JwpPresentedBuilder and handle the selective disclosure of attributes
 * - @context MUST NOT be blinded
 * - id MUST be blinded
 * - type MUST NOT be blinded
 * - issuer MUST NOT be blinded
 * - issuanceDate MUST be blinded (if Timeframe Revocation mechanism is used)
 * - expirationDate MUST be blinded (if Timeframe Revocation mechanism is used)
 * - credentialSubject (User have to choose which attribute must be blinded)
 * - credentialSchema MUST NOT be blinded
 * - credentialStatus MUST NOT be blinded
 * - refreshService MUST NOT be blinded (probably will be used for Timeslot Revocation mechanism)
 * - termsOfUse NO reason to use it in ZK VC (will be in any case blinded)
 * - evidence (User have to choose which attribute must be blinded)
 */
export class SelectiveDisclosurePresentation {
  free(): void;
  /**
   * Initialize a presentation starting from an Issued JWP.
   * The properties `jti`, `nbf`, `issuanceDate`, `expirationDate` and `termsOfUse` are concealed by default.
   */
  constructor(issued_jwp: JwpIssued);
  /**
   * Selectively disclose "credentialSubject" attributes.
   * # Example
   * ```
   * {
   *     "id": 1234,
   *     "name": "Alice",
   *     "mainCourses": ["Object-oriented Programming", "Mathematics"],
   *     "degree": {
   *         "type": "BachelorDegree",
   *         "name": "Bachelor of Science and Arts",
   *     },
   *     "GPA": "4.0",
   * }
   * ```
   * If you want to undisclose for example the Mathematics course and the name of the degree:
   * ```
   * undisclose_subject("mainCourses[1]");
   * undisclose_subject("degree.name");
   * ```
   */
  concealInSubject(path: string): void;
  /**
   * Undiscloses "evidence" attributes.
   */
  concealInEvidence(path: string): void;
  /**
   * Sets presentation protected header.
   */
  setPresentationHeader(header: PresentationProtectedHeader): void;
}
export class SendAction {
  private constructor();
  free(): void;
  readonly objectRecipientMap: ([string, string])[];
}
export class SendProposal {
  private constructor();
  free(): void;
  approve(identity: OnChainIdentity, controller_token: ControllerToken): TransactionBuilder<ApproveProposal>;
  intoTx(identity: OnChainIdentity, controller_token: ControllerToken): TransactionBuilder;
  readonly id: string;
  readonly action: SendAction;
  readonly expiration_epoch: bigint | undefined;
  readonly votes: bigint;
  readonly voters: Set<string>;
}
/**
 * A DID Document Service used to enable trusted interactions associated with a DID subject.
 */
export class Service {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  constructor(service: IService);
  /**
   * Returns a copy of the {@link Service} id.
   */
  id(): DIDUrl;
  /**
   * Returns a copy of the {@link Service} type.
   */
  type(): Array<string>;
  /**
   * Returns a copy of the {@link Service} endpoint.
   */
  serviceEndpoint(): string | string[] | Map<string, string[]>;
  /**
   * Returns a copy of the custom properties on the {@link Service}.
   */
  properties(): Map<string, any>;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Service;
  /**
   * Deep clones the object.
   */
  clone(): Service;
}
export class Sha256Hasher {
  free(): void;
  constructor();
  algName(): string;
  digest(input: Uint8Array): Uint8Array;
  encodedDigest(data: string): string;
}
/**
 * StatusList2021 data structure as described in [W3C's VC status list 2021](https://www.w3.org/TR/2023/WD-vc-status-list-20230427/).
 */
export class StatusList2021 {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Deep clones the object.
   */
  clone(): StatusList2021;
  /**
   * Creates a new {@link StatusList2021} of `size` entries.
   */
  constructor(size?: number | null);
  /**
   * Returns the number of entries in this {@link StatusList2021}.
   */
  len(): number;
  /**
   * Returns whether the entry at `index` is set.
   */
  get(index: number): boolean;
  /**
   * Sets the value of the `index`-th entry.
   */
  set(index: number, value: boolean): void;
  /**
   * Encodes this {@link StatusList2021} into its compressed
   * base64 string representation.
   */
  intoEncodedStr(): string;
  /**
   * Attempts to decode a {@link StatusList2021} from a string.
   */
  static fromEncodedStr(s: string): StatusList2021;
}
/**
 * A parsed [StatusList2021Credential](https://www.w3.org/TR/2023/WD-vc-status-list-20230427/#statuslist2021credential).
 */
export class StatusList2021Credential {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new {@link StatusList2021Credential}.
   */
  constructor(credential: Credential);
  id(): string;
  /**
   * Sets the given credential's status using the `index`-th entry of this status list.
   * Returns the created `credentialStatus`.
   */
  setCredentialStatus(credential: Credential, index: number, revoked_or_suspended: boolean): StatusList2021Entry;
  /**
   * Returns the {@link StatusPurpose} of this {@link StatusList2021Credential}.
   */
  purpose(): StatusPurpose;
  /**
   * Returns the state of the `index`-th entry, if any.
   */
  entry(index: number): CredentialStatus;
  clone(): StatusList2021Credential;
  static fromJSON(json: any): StatusList2021Credential;
  toJSON(): any;
}
/**
 * Builder type to construct valid {@link StatusList2021Credential} instances.
 */
export class StatusList2021CredentialBuilder {
  free(): void;
  /**
   * Creates a new {@link StatusList2021CredentialBuilder}.
   */
  constructor(status_list?: StatusList2021 | null);
  /**
   * Sets the purpose of the {@link StatusList2021Credential} that is being created.
   */
  purpose(purpose: StatusPurpose): StatusList2021CredentialBuilder;
  /**
   * Sets `credentialSubject.id`.
   */
  subjectId(id: string): StatusList2021CredentialBuilder;
  /**
   * Sets the expiration date of the credential.
   */
  expirationDate(time: Timestamp): StatusList2021CredentialBuilder;
  /**
   * Sets the issuer of the credential.
   */
  issuer(issuer: string): StatusList2021CredentialBuilder;
  /**
   * Sets the context of the credential.
   */
  context(context: string): StatusList2021CredentialBuilder;
  /**
   * Adds a credential type.
   */
  type(t: string): StatusList2021CredentialBuilder;
  /**
   * Adds a credential's proof.
   */
  proof(proof: Proof): StatusList2021CredentialBuilder;
  /**
   * Attempts to build a valid {@link StatusList2021Credential} with the previously provided data.
   */
  build(): StatusList2021Credential;
}
/**
 * [StatusList2021Entry](https://www.w3.org/TR/2023/WD-vc-status-list-20230427/#statuslist2021entry) implementation.
 */
export class StatusList2021Entry {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new {@link StatusList2021Entry}.
   */
  constructor(status_list: string, purpose: StatusPurpose, index: number, id?: string | null);
  /**
   * Returns this `credentialStatus`'s `id`.
   */
  id(): string;
  /**
   * Returns the purpose of this entry.
   */
  purpose(): StatusPurpose;
  /**
   * Returns the index of this entry.
   */
  index(): number;
  /**
   * Returns the referenced {@link StatusList2021Credential}'s url.
   */
  statusListCredential(): string;
  /**
   * Downcasts {@link StatusList2021Entry} to {@link Status}
   */
  toStatus(): Status;
  /**
   * Deep clones the object.
   */
  clone(): StatusList2021Entry;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): StatusList2021Entry;
}
/**
 * A type wrapping a `JwkStorage` and `KeyIdStorage` that should always be used together when
 * working with storage backed DID documents.
 */
export class Storage {
  free(): void;
  /**
   * Constructs a new `Storage`.
   */
  constructor(jwkStorage: JwkStorage, keyIdStorage: KeyIdStorage);
  /**
   * Obtain the wrapped `KeyIdStorage`.
   */
  keyIdStorage(): KeyIdStorage;
  /**
   * Obtain the wrapped `JwkStorage`.
   */
  keyStorage(): JwkStorage;
}
export class StorageSigner {
  free(): void;
  constructor(storage: Storage, key_id: string, public_key: Jwk);
  keyId(): string;
  sign(data: Uint8Array): Promise<string>;
  publicKey(): Promise<PublicKey>;
  iotaPublicKeyBytes(): Promise<Uint8Array>;
}
/**
 * A parsed Timestamp.
 */
export class Timestamp {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new {@link Timestamp} with the current date and time.
   */
  constructor();
  /**
   * Parses a {@link Timestamp} from the provided input string.
   */
  static parse(input: string): Timestamp;
  /**
   * Creates a new {@link Timestamp} with the current date and time.
   */
  static nowUTC(): Timestamp;
  /**
   * Returns the {@link Timestamp} as an RFC 3339 `String`.
   */
  toRFC3339(): string;
  /**
   * Computes `self + duration`
   *
   * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).
   */
  checkedAdd(duration: Duration): Timestamp | undefined;
  /**
   * Computes `self - duration`
   *
   * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).
   */
  checkedSub(duration: Duration): Timestamp | undefined;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): Timestamp;
}
export class TransactionOutputInternalIotaDocument {
  private constructor();
  free(): void;
  readonly output: IotaDocument;
  readonly response: WasmIotaTransactionBlockResponseWrapper;
}
export class TypeMetadata {
  free(): void;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): TypeMetadata;
  constructor(helper: any);
  intoInner(): any;
  /**
   * Uses this {@link TypeMetadata} to validate JSON object `credential`. This method fails
   * if the schema is referenced instead of embedded.
   * Use {@link TypeMetadata.validate_credential_with_resolver} for such cases.
   * ## Notes
   * This method ignores type extensions.
   */
  validateCredential(credential: any): void;
  /**
   * Similar to {@link TypeMetadata.validate_credential}, but accepts a {@link Resolver}
   * {@link Url} -> {@link any} that is used to resolve any reference to either
   * another type or JSON schema.
   */
  validateCredentialWithResolver(credential: any, resolver: IResolver<string, any>): Promise<void>;
}
export class UnknownCredential {
  private constructor();
  free(): void;
  /**
   * Returns a {@link Jwt} if the credential is of type string, `undefined` otherwise.
   */
  tryIntoJwt(): Jwt | undefined;
  /**
   * Returns a {@link Credential} if the credential is of said type, `undefined` otherwise.
   */
  tryIntoCredential(): Credential | undefined;
  /**
   * Returns the contained value as an Object, if it can be converted, `undefined` otherwise.
   */
  tryIntoRaw(): Record<string, any> | undefined;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): UnknownCredential;
  /**
   * Deep clones the object.
   */
  clone(): UnknownCredential;
}
export class UpdateDid {
  private constructor();
  free(): void;
  isDeactivation(): boolean;
  readonly didDocument: IotaDocument | undefined;
}
export class UpdateDidProposal {
  private constructor();
  free(): void;
}
/**
 * A DID Document Verification Method.
 */
export class VerificationMethod {
/**
** Return copy of self without private attributes.
*/
  toJSON(): Object;
/**
* Return stringified version of self.
*/
  toString(): string;
  free(): void;
  /**
   * Creates a new {@link VerificationMethod} from the given `did` and {@link Jwk}. If `fragment` is not given
   * the `kid` value of the given `key` will be used, if present, otherwise an error is returned.
   *
   * ### Recommendations
   * The following recommendations are essentially taken from the `publicKeyJwk` description from the [DID specification](https://www.w3.org/TR/did-core/#dfn-publickeyjwk):
   * - It is recommended that verification methods that use `Jwks` to represent their public keys use the value of
   *   `kid` as their fragment identifier. This is
   * done automatically if `None` is passed in as the fragment.
   * - It is recommended that {@link Jwk} kid values are set to the public key fingerprint.
   */
  static newFromJwk(did: CoreDID | IToCoreDID, key: Jwk, fragment?: string | null): VerificationMethod;
  /**
   * Create a custom {@link VerificationMethod}.
   */
  constructor(id: DIDUrl, controller: CoreDID, type_: MethodType, data: MethodData);
  /**
   * Returns a copy of the {@link DIDUrl} of the {@link VerificationMethod}'s `id`.
   */
  id(): DIDUrl;
  /**
   * Sets the id of the {@link VerificationMethod}.
   */
  setId(id: DIDUrl): void;
  /**
   * Returns a copy of the `controller` `DID` of the {@link VerificationMethod}.
   */
  controller(): CoreDID;
  /**
   * Sets the `controller` `DID` of the {@link VerificationMethod} object.
   */
  setController(did: CoreDID): void;
  /**
   * Returns a copy of the {@link VerificationMethod} type.
   */
  type(): MethodType;
  /**
   * Sets the {@link VerificationMethod} type.
   */
  setType(type_: MethodType): void;
  /**
   * Returns a copy of the {@link VerificationMethod} public key data.
   */
  data(): MethodData;
  /**
   * Sets {@link VerificationMethod} public key data.
   */
  setData(data: MethodData): void;
  /**
   * Get custom properties of the Verification Method.
   */
  properties(): Map<string, any>;
  /**
   * Adds a custom property to the Verification Method.
   * If the value is set to `null`, the custom property will be removed.
   *
   * ### WARNING
   * This method can overwrite existing properties like `id` and result
   * in an invalid Verification Method.
   */
  setPropertyUnchecked(key: string, value: any): void;
  /**
   * Serializes this to a JSON object.
   */
  toJSON(): any;
  /**
   * Deserializes an instance from a JSON object.
   */
  static fromJSON(json: any): VerificationMethod;
  /**
   * Deep clones the object.
   */
  clone(): VerificationMethod;
}
export class WasmManagedCoreClient {
  private constructor();
  free(): void;
  packageId(): string;
  packageHistory(): string[];
  network(): string;
  iotaClient(): IotaClient;
  signer(): TransactionSigner;
  senderAddress(): string;
  senderPublicKey(): PublicKey;
}
export class WasmManagedCoreClientReadOnly {
  private constructor();
  free(): void;
  packageId(): string;
  packageHistory(): string[];
  network(): string;
  iotaClient(): IotaClient;
}

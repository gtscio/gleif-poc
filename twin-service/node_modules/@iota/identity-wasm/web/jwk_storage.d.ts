import { Jwk, JwkGenOutput, JwkStorage, ProofAlgorithm, ProofUpdateCtx } from "./identity_wasm.js";
import { JwsAlgorithm } from "./jose";
export declare class JwkMemStore implements JwkStorage {
    /** The map from key identifiers to Jwks. */
    private _keys;
    /** Creates a new, empty `MemStore` instance. */
    constructor();
    static ed25519KeyType(): string;
    generate(keyType: string, algorithm: JwsAlgorithm): Promise<JwkGenOutput>;
    sign(keyId: string, data: Uint8Array, publicKey: Jwk): Promise<Uint8Array>;
    insert(jwk: Jwk): Promise<string>;
    delete(keyId: string): Promise<void>;
    exists(keyId: string): Promise<boolean>;
    count(): number;
    private _get_key;
}
export interface JwkStorageBBSPlusExt {
    generateBBS: (algorithm: ProofAlgorithm) => Promise<JwkGenOutput>;
    /** Signs a chunk of data together with an optional header
     * using the private key corresponding to the given `keyId` and according
     * to `publicKey`'s requirements.
     */
    signBBS: (keyId: string, data: Uint8Array[], publicKey: Jwk, header?: Uint8Array) => Promise<Uint8Array>;
    updateBBSSignature: (keyId: string, publicKey: Jwk, signature: Uint8Array, proofCtx: ProofUpdateCtx) => Promise<Uint8Array>;
}

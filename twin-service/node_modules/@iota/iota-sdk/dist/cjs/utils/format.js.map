{
  "version": 3,
  "sources": ["../../../src/utils/format.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isValidIotaAddress, isValidIotaObjectId, IOTA_ADDRESS_LENGTH } from './iota-types.js';\n\nconst ELLIPSIS = '\\u{2026}';\n\nexport function formatAddress(address: string) {\n    if (address.length <= 6) {\n        return address;\n    }\n\n    const offset = address.startsWith('0x') ? 2 : 0;\n\n    return `0x${address.slice(offset, offset + 4)}${ELLIPSIS}${address.slice(-4)}`;\n}\n\nexport function formatDigest(digest: string) {\n    // Use 10 first characters\n    return `${digest.slice(0, 10)}${ELLIPSIS}`;\n}\n\nexport function formatType(type: string) {\n    const objectAddressPattern = new RegExp(`0x[a-fA-F0-9]{${IOTA_ADDRESS_LENGTH * 2}}`, 'g');\n    const matches = type.match(objectAddressPattern) ?? [];\n    for (const match of matches) {\n        if (isValidIotaAddress(match) || isValidIotaObjectId(match)) {\n            type = type.replace(match, formatAddress(match));\n        }\n    }\n    return type;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,wBAA6E;AAE7E,MAAM,WAAW;AAEV,SAAS,cAAc,SAAiB;AAC3C,MAAI,QAAQ,UAAU,GAAG;AACrB,WAAO;AAAA,EACX;AAEA,QAAM,SAAS,QAAQ,WAAW,IAAI,IAAI,IAAI;AAE9C,SAAO,KAAK,QAAQ,MAAM,QAAQ,SAAS,CAAC,CAAC,GAAG,QAAQ,GAAG,QAAQ,MAAM,EAAE,CAAC;AAChF;AAEO,SAAS,aAAa,QAAgB;AAEzC,SAAO,GAAG,OAAO,MAAM,GAAG,EAAE,CAAC,GAAG,QAAQ;AAC5C;AAEO,SAAS,WAAW,MAAc;AACrC,QAAM,uBAAuB,IAAI,OAAO,iBAAiB,wCAAsB,CAAC,KAAK,GAAG;AACxF,QAAM,UAAU,KAAK,MAAM,oBAAoB,KAAK,CAAC;AACrD,aAAW,SAAS,SAAS;AACzB,YAAI,sCAAmB,KAAK,SAAK,uCAAoB,KAAK,GAAG;AACzD,aAAO,KAAK,QAAQ,OAAO,cAAc,KAAK,CAAC;AAAA,IACnD;AAAA,EACJ;AACA,SAAO;AACX;",
  "names": []
}

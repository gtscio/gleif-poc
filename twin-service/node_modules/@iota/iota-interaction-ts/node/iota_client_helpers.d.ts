import { IotaClient, IotaEvent, IotaTransactionBlockResponse, TransactionEffects } from "@iota/iota-sdk/client";
export type Signer = {
    sign(data: Uint8Array): Promise<string>;
};
export declare class WasmIotaTransactionBlockResponseWrapper {
    response: IotaTransactionBlockResponse;
    constructor(response: IotaTransactionBlockResponse);
    to_string(): string;
    get_effects(): TransactionEffects | null | undefined;
    get_response(): IotaTransactionBlockResponse;
    get_digest(): string;
    get_events(): IotaEvent[] | null | undefined;
}
/**
 * Inserts these values into the transaction and replaces placeholder values.
 *
 *   - sender (overwritten as we assume a placeholder to be used in prepared transaction)
 *   - gas budget (value determined automatically if not provided)
 *   - gas price (value determined automatically)
 *   - gas coin / payment object (fetched automatically)
 *   - gas owner (equals sender)
 *
 * @param iotaClient client instance
 * @param senderAddress transaction sender (and the one paying for it)
 * @param txBcs transaction data serialized to bcs, most probably having placeholder values
 * @param gasBudget optional fixed gas budget, determined automatically with a dry run if not provided
 * @returns updated transaction data
 */
export declare function addGasDataToTransaction(iotaClient: IotaClient, senderAddress: string, txBcs: Uint8Array, gasBudget?: bigint): Promise<Uint8Array>;
export declare function executeTransaction(iotaClient: IotaClient, senderAddress: string, txBcs: Uint8Array, signer: Signer, gasBudget?: bigint): Promise<WasmIotaTransactionBlockResponseWrapper>;
/**
 * Helper function to pause execution.
 *
 * @param durationMs time to sleep in ms
 */
export declare function sleep(durationMs: number): Promise<unknown>;

#!/usr/bin/env python3
"""
Seed the verifier's Baser database with trusted issuer key states.

This script reads the inception event files (gleif-incept.json, qvi-incept.json)
generated by the credential generation process and loads these events into the
verifier's Baser database to populate it with the trusted issuers' key states.

Usage: python3 seed-verifier-db.py
"""

import os
import json
import logging
from pathlib import Path

# KERI imports for cryptographic operations and database management
from keri.core import parsing, eventing, serdering
from keri.db import basing
from keri.app import habbing

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def initialize_verifier_baser():
    """Initialize the verifier's Baser database"""
    try:
        # Create database directory if it doesn't exist
        script_dir = Path(__file__).parent
        db_dir = script_dir / "db"
        db_dir.mkdir(exist_ok=True)

        # Initialize persistent Baser database
        baser = basing.Baser(name="verifier", temp=False, headDirPath=str(db_dir))
        logger.info(f"Initialized verifier Baser database at: {db_dir}")
        return baser
    except Exception as e:
        logger.error(f"Failed to initialize verifier Baser: {str(e)}")
        raise

def load_inception_event(baser, event_path):
    """Load a single inception event into the Baser database"""
    try:
        # Read the inception event file
        with open(event_path, 'r') as f:
            event_data = json.load(f)

        logger.info(f"Loading inception event from: {event_path}")
        logger.info(f"Event AID: {event_data.get('i', 'unknown')}")

        # Extract the necessary information from the event data
        aid = event_data['i']
        verfer_qb64 = event_data['k'][0]

        # Create a verfer from the public key
        from keri.core import coring
        verfer = coring.Verfer(qb64=verfer_qb64)

        # Create a simple mock Kever object that has the verfers attribute
        class MockKever:
            def __init__(self, pre, verfers):
                self.pre = pre
                self.verfers = verfers

        mock_kever = MockKever(aid, [verfer])

        # Initialize baser.kevers if it doesn't exist
        if not hasattr(baser, 'kevers'):
            baser.kevers = {}

        # Add the mock kever to the baser's kevers
        baser.kevers[aid] = [mock_kever]

        logger.info(f"Successfully loaded inception event for AID: {aid}")

        return True

    except Exception as e:
        logger.error(f"Failed to load inception event from {event_path}: {str(e)}")
        return False

def load_credential(baser, credential_path):
    """Load a credential from JSON file and store it in the Baser database"""
    try:
        # Read the credential file
        with open(credential_path, 'r') as f:
            credential_data = json.load(f)

        logger.info(f"Loading credential from: {credential_path}")
        logger.info(f"Credential SAID: {credential_data.get('d', 'unknown')}")

        # Store the credential in the Baser
        # For now, we'll store credentials in a simple dictionary on the baser
        if not hasattr(baser, 'credentials'):
            baser.credentials = {}

        said = credential_data.get('d')
        if said:
            baser.credentials[said] = credential_data
            logger.info(f"Successfully stored credential in Baser: {said}")
            return True
        else:
            logger.error(f"No SAID found in credential data")
            return False

    except Exception as e:
        logger.error(f"Failed to load credential from {credential_path}: {str(e)}")
        return False

def seed_verifier_database():
    """Main function to seed the verifier database with inception events"""
    try:
        logger.info("Starting verifier database seeding process")

        # Initialize the Baser database
        baser = initialize_verifier_baser()

        # Determine paths to inception event files
        script_dir = Path(__file__).parent
        inception_dir = script_dir.parent / "gleif-frontend" / "public" / ".well-known" / "keri"

        # Load habitats.json to get AID mappings
        habitats_path = inception_dir / "habitats.json"
        if not habitats_path.exists():
            logger.error(f"Habitats file not found: {habitats_path}")
            return False

        with open(habitats_path, 'r') as f:
            habitats = json.load(f)

        gleif_incept_path = inception_dir / "gleif-incept.json"
        qvi_incept_path = inception_dir / "qvi-incept.json"

        # Check if inception files exist
        if not gleif_incept_path.exists():
            logger.error(f"GLEIF inception file not found: {gleif_incept_path}")
            return False

        if not qvi_incept_path.exists():
            logger.error(f"QVI inception file not found: {qvi_incept_path}")
            return False

        # Load GLEIF inception event
        logger.info("Loading GLEIF inception event...")
        gleif_success = load_inception_event(baser, gleif_incept_path)

        # Load QVI inception event
        logger.info("Loading QVI inception event...")
        qvi_success = load_inception_event(baser, qvi_incept_path)

        # Load Legal Entity inception event (use dynamic AID from habitats when available)
        le_icp_candidate = None
        if 'legal_entity' in habitats and 'aid' in habitats['legal_entity']:
            le_icp_candidate = inception_dir / "icp" / habitats['legal_entity']['aid']
        else:
            # Fallback to placeholder filename if habitats missing (may not exist)
            le_icp_candidate = inception_dir / "icp" / "EEMnP-dylPHjCyLRy_4P5Z7X7wnwNY_DgTEH4dNpTGmj"

        legal_entity_incept_path = le_icp_candidate
        if legal_entity_incept_path.exists():
            logger.info("Loading Legal Entity inception event...")
            legal_entity_success = load_inception_event(baser, legal_entity_incept_path)
        else:
            logger.warning(f"Legal Entity inception file not found: {legal_entity_incept_path}")
            legal_entity_success = False

        # Load QVI credential
        logger.info("Loading QVI credential...")
        qvi_credential_path = inception_dir / "qvi-credential.json"
        qvi_credential_data = None
        if qvi_credential_path.exists():
            qvi_credential_success = load_credential(baser, qvi_credential_path)
            with open(qvi_credential_path, 'r') as f:
                qvi_credential_data = json.load(f)
        else:
            logger.error(f"QVI credential file not found: {qvi_credential_path}")
            qvi_credential_success = False

        # Load Legal Entity credential
        logger.info("Loading Legal Entity credential...")
        legal_entity_credential_path = inception_dir / "legal-entity-credential.json"
        legal_entity_credential_data = None
        if legal_entity_credential_path.exists():
            legal_entity_credential_success = load_credential(baser, legal_entity_credential_path)
            with open(legal_entity_credential_path, 'r') as f:
                legal_entity_credential_data = json.load(f)
        else:
            logger.error(f"Legal Entity credential file not found: {legal_entity_credential_path}")
            legal_entity_credential_success = False

        # --- Seed Credential Registry in persistent Habery DB ---
        logger.info("--- Seeding Credential Registry ---")
        db_dir = script_dir / "db"
        try:
            hby = habbing.Habery(name="verifier", temp=False, headDirPath=str(db_dir))
            if qvi_credential_data and 'd' in qvi_credential_data:
                # Prefer keripy credential sub-DB if available
                if hasattr(hby.db, 'creds'):
                    hby.db.creds.add(said=qvi_credential_data['d'], val=qvi_credential_data)
                    logger.info(f"Successfully stored QVI credential in KERI creds DB: {qvi_credential_data['d']}")
                else:
                    raise AttributeError("Baser has no 'creds' store")
            if legal_entity_credential_data and 'd' in legal_entity_credential_data:
                if hasattr(hby.db, 'creds'):
                    hby.db.creds.add(said=legal_entity_credential_data['d'], val=legal_entity_credential_data)
                    logger.info(f"Successfully stored Legal Entity credential in KERI creds DB: {legal_entity_credential_data['d']}")
                else:
                    raise AttributeError("Baser has no 'creds' store")
        except Exception as e:
            logger.error(f"Failed to seed credential registry: {str(e)}")
            # Fallback: persist a simple JSON registry for cross-process reads
            try:
                registry = {}
                if qvi_credential_data and 'd' in qvi_credential_data:
                    registry[qvi_credential_data['d']] = qvi_credential_data
                if legal_entity_credential_data and 'd' in legal_entity_credential_data:
                    registry[legal_entity_credential_data['d']] = legal_entity_credential_data
                registry_path = db_dir / "credentials_registry.json"
                with open(registry_path, 'w') as rf:
                    json.dump(registry, rf, indent=2)
                logger.info(f"Wrote fallback credential registry to: {registry_path}")
            except Exception as e2:
                logger.error(f"Failed to write fallback credential registry: {str(e2)}")

        # Create subject-based index for credential queries
        if not hasattr(baser, 'credentials_by_subject'):
            baser.credentials_by_subject = {}

        if legal_entity_credential_data and 'legal_entity' in habitats:
            baser.credentials_by_subject[habitats['legal_entity']['aid']] = legal_entity_credential_data
            logger.info(f"Indexed legal entity credential for subject: {habitats['legal_entity']['aid']}")

        if qvi_credential_data and 'qvi' in habitats:
            baser.credentials_by_subject[habitats['qvi']['aid']] = qvi_credential_data
            logger.info(f"Indexed QVI credential for subject: {habitats['qvi']['aid']}")

        if gleif_success and qvi_success and legal_entity_success and qvi_credential_success and legal_entity_credential_success:
            logger.info("✅ Verifier database seeding completed successfully")
            logger.info("The verifier's Baser database now contains key states for GLEIF, QVI, and Legal Entity")
            logger.info("The verifier's Baser database now contains QVI and Legal Entity credentials with subject indexing")
            return True
        else:
            logger.error("❌ Failed to load one or more inception events or credentials")
            return False

    except Exception as e:
        logger.error(f"Database seeding failed: {str(e)}")
        return False

if __name__ == "__main__":
    success = seed_verifier_database()
    exit(0 if success else 1)